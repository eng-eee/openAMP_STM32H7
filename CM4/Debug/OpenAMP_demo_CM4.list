
OpenAMP_demo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cac  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08107f4c  08107f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081082a4  081082a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081082ac  081082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081082b0  081082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000011c  10000000  081082b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000248  1000011c  081083d0  0002011c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000364  081083d0  00020364  2**0
                  ALLOC
  9 .openamp_section 0000008c  38000000  081083d0  00030000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020996  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004ad1  00000000  00000000  00040ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001850  00000000  00000000  000455b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001650  00000000  00000000  00046e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045397  00000000  00000000  00048458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00022e95  00000000  00000000  0008d7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a64ca  00000000  00000000  000b0684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00256b4e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006ce8  00000000  00000000  00256ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000011c 	.word	0x1000011c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08107f34 	.word	0x08107f34

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000120 	.word	0x10000120
 81002dc:	08107f34 	.word	0x08107f34

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <__aeabi_uldivmod>:
 81003a0:	b953      	cbnz	r3, 81003b8 <__aeabi_uldivmod+0x18>
 81003a2:	b94a      	cbnz	r2, 81003b8 <__aeabi_uldivmod+0x18>
 81003a4:	2900      	cmp	r1, #0
 81003a6:	bf08      	it	eq
 81003a8:	2800      	cmpeq	r0, #0
 81003aa:	bf1c      	itt	ne
 81003ac:	f04f 31ff 	movne.w	r1, #4294967295
 81003b0:	f04f 30ff 	movne.w	r0, #4294967295
 81003b4:	f000 b974 	b.w	81006a0 <__aeabi_idiv0>
 81003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003c0:	f000 f806 	bl	81003d0 <__udivmoddi4>
 81003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003cc:	b004      	add	sp, #16
 81003ce:	4770      	bx	lr

081003d0 <__udivmoddi4>:
 81003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003d4:	9d08      	ldr	r5, [sp, #32]
 81003d6:	4604      	mov	r4, r0
 81003d8:	468e      	mov	lr, r1
 81003da:	2b00      	cmp	r3, #0
 81003dc:	d14d      	bne.n	810047a <__udivmoddi4+0xaa>
 81003de:	428a      	cmp	r2, r1
 81003e0:	4694      	mov	ip, r2
 81003e2:	d969      	bls.n	81004b8 <__udivmoddi4+0xe8>
 81003e4:	fab2 f282 	clz	r2, r2
 81003e8:	b152      	cbz	r2, 8100400 <__udivmoddi4+0x30>
 81003ea:	fa01 f302 	lsl.w	r3, r1, r2
 81003ee:	f1c2 0120 	rsb	r1, r2, #32
 81003f2:	fa20 f101 	lsr.w	r1, r0, r1
 81003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 81003fa:	ea41 0e03 	orr.w	lr, r1, r3
 81003fe:	4094      	lsls	r4, r2
 8100400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100404:	0c21      	lsrs	r1, r4, #16
 8100406:	fbbe f6f8 	udiv	r6, lr, r8
 810040a:	fa1f f78c 	uxth.w	r7, ip
 810040e:	fb08 e316 	mls	r3, r8, r6, lr
 8100412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100416:	fb06 f107 	mul.w	r1, r6, r7
 810041a:	4299      	cmp	r1, r3
 810041c:	d90a      	bls.n	8100434 <__udivmoddi4+0x64>
 810041e:	eb1c 0303 	adds.w	r3, ip, r3
 8100422:	f106 30ff 	add.w	r0, r6, #4294967295
 8100426:	f080 811f 	bcs.w	8100668 <__udivmoddi4+0x298>
 810042a:	4299      	cmp	r1, r3
 810042c:	f240 811c 	bls.w	8100668 <__udivmoddi4+0x298>
 8100430:	3e02      	subs	r6, #2
 8100432:	4463      	add	r3, ip
 8100434:	1a5b      	subs	r3, r3, r1
 8100436:	b2a4      	uxth	r4, r4
 8100438:	fbb3 f0f8 	udiv	r0, r3, r8
 810043c:	fb08 3310 	mls	r3, r8, r0, r3
 8100440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100444:	fb00 f707 	mul.w	r7, r0, r7
 8100448:	42a7      	cmp	r7, r4
 810044a:	d90a      	bls.n	8100462 <__udivmoddi4+0x92>
 810044c:	eb1c 0404 	adds.w	r4, ip, r4
 8100450:	f100 33ff 	add.w	r3, r0, #4294967295
 8100454:	f080 810a 	bcs.w	810066c <__udivmoddi4+0x29c>
 8100458:	42a7      	cmp	r7, r4
 810045a:	f240 8107 	bls.w	810066c <__udivmoddi4+0x29c>
 810045e:	4464      	add	r4, ip
 8100460:	3802      	subs	r0, #2
 8100462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100466:	1be4      	subs	r4, r4, r7
 8100468:	2600      	movs	r6, #0
 810046a:	b11d      	cbz	r5, 8100474 <__udivmoddi4+0xa4>
 810046c:	40d4      	lsrs	r4, r2
 810046e:	2300      	movs	r3, #0
 8100470:	e9c5 4300 	strd	r4, r3, [r5]
 8100474:	4631      	mov	r1, r6
 8100476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810047a:	428b      	cmp	r3, r1
 810047c:	d909      	bls.n	8100492 <__udivmoddi4+0xc2>
 810047e:	2d00      	cmp	r5, #0
 8100480:	f000 80ef 	beq.w	8100662 <__udivmoddi4+0x292>
 8100484:	2600      	movs	r6, #0
 8100486:	e9c5 0100 	strd	r0, r1, [r5]
 810048a:	4630      	mov	r0, r6
 810048c:	4631      	mov	r1, r6
 810048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100492:	fab3 f683 	clz	r6, r3
 8100496:	2e00      	cmp	r6, #0
 8100498:	d14a      	bne.n	8100530 <__udivmoddi4+0x160>
 810049a:	428b      	cmp	r3, r1
 810049c:	d302      	bcc.n	81004a4 <__udivmoddi4+0xd4>
 810049e:	4282      	cmp	r2, r0
 81004a0:	f200 80f9 	bhi.w	8100696 <__udivmoddi4+0x2c6>
 81004a4:	1a84      	subs	r4, r0, r2
 81004a6:	eb61 0303 	sbc.w	r3, r1, r3
 81004aa:	2001      	movs	r0, #1
 81004ac:	469e      	mov	lr, r3
 81004ae:	2d00      	cmp	r5, #0
 81004b0:	d0e0      	beq.n	8100474 <__udivmoddi4+0xa4>
 81004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 81004b6:	e7dd      	b.n	8100474 <__udivmoddi4+0xa4>
 81004b8:	b902      	cbnz	r2, 81004bc <__udivmoddi4+0xec>
 81004ba:	deff      	udf	#255	; 0xff
 81004bc:	fab2 f282 	clz	r2, r2
 81004c0:	2a00      	cmp	r2, #0
 81004c2:	f040 8092 	bne.w	81005ea <__udivmoddi4+0x21a>
 81004c6:	eba1 010c 	sub.w	r1, r1, ip
 81004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004ce:	fa1f fe8c 	uxth.w	lr, ip
 81004d2:	2601      	movs	r6, #1
 81004d4:	0c20      	lsrs	r0, r4, #16
 81004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 81004da:	fb07 1113 	mls	r1, r7, r3, r1
 81004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004e2:	fb0e f003 	mul.w	r0, lr, r3
 81004e6:	4288      	cmp	r0, r1
 81004e8:	d908      	bls.n	81004fc <__udivmoddi4+0x12c>
 81004ea:	eb1c 0101 	adds.w	r1, ip, r1
 81004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 81004f2:	d202      	bcs.n	81004fa <__udivmoddi4+0x12a>
 81004f4:	4288      	cmp	r0, r1
 81004f6:	f200 80cb 	bhi.w	8100690 <__udivmoddi4+0x2c0>
 81004fa:	4643      	mov	r3, r8
 81004fc:	1a09      	subs	r1, r1, r0
 81004fe:	b2a4      	uxth	r4, r4
 8100500:	fbb1 f0f7 	udiv	r0, r1, r7
 8100504:	fb07 1110 	mls	r1, r7, r0, r1
 8100508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 810050c:	fb0e fe00 	mul.w	lr, lr, r0
 8100510:	45a6      	cmp	lr, r4
 8100512:	d908      	bls.n	8100526 <__udivmoddi4+0x156>
 8100514:	eb1c 0404 	adds.w	r4, ip, r4
 8100518:	f100 31ff 	add.w	r1, r0, #4294967295
 810051c:	d202      	bcs.n	8100524 <__udivmoddi4+0x154>
 810051e:	45a6      	cmp	lr, r4
 8100520:	f200 80bb 	bhi.w	810069a <__udivmoddi4+0x2ca>
 8100524:	4608      	mov	r0, r1
 8100526:	eba4 040e 	sub.w	r4, r4, lr
 810052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810052e:	e79c      	b.n	810046a <__udivmoddi4+0x9a>
 8100530:	f1c6 0720 	rsb	r7, r6, #32
 8100534:	40b3      	lsls	r3, r6
 8100536:	fa22 fc07 	lsr.w	ip, r2, r7
 810053a:	ea4c 0c03 	orr.w	ip, ip, r3
 810053e:	fa20 f407 	lsr.w	r4, r0, r7
 8100542:	fa01 f306 	lsl.w	r3, r1, r6
 8100546:	431c      	orrs	r4, r3
 8100548:	40f9      	lsrs	r1, r7
 810054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810054e:	fa00 f306 	lsl.w	r3, r0, r6
 8100552:	fbb1 f8f9 	udiv	r8, r1, r9
 8100556:	0c20      	lsrs	r0, r4, #16
 8100558:	fa1f fe8c 	uxth.w	lr, ip
 810055c:	fb09 1118 	mls	r1, r9, r8, r1
 8100560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100564:	fb08 f00e 	mul.w	r0, r8, lr
 8100568:	4288      	cmp	r0, r1
 810056a:	fa02 f206 	lsl.w	r2, r2, r6
 810056e:	d90b      	bls.n	8100588 <__udivmoddi4+0x1b8>
 8100570:	eb1c 0101 	adds.w	r1, ip, r1
 8100574:	f108 3aff 	add.w	sl, r8, #4294967295
 8100578:	f080 8088 	bcs.w	810068c <__udivmoddi4+0x2bc>
 810057c:	4288      	cmp	r0, r1
 810057e:	f240 8085 	bls.w	810068c <__udivmoddi4+0x2bc>
 8100582:	f1a8 0802 	sub.w	r8, r8, #2
 8100586:	4461      	add	r1, ip
 8100588:	1a09      	subs	r1, r1, r0
 810058a:	b2a4      	uxth	r4, r4
 810058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8100590:	fb09 1110 	mls	r1, r9, r0, r1
 8100594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100598:	fb00 fe0e 	mul.w	lr, r0, lr
 810059c:	458e      	cmp	lr, r1
 810059e:	d908      	bls.n	81005b2 <__udivmoddi4+0x1e2>
 81005a0:	eb1c 0101 	adds.w	r1, ip, r1
 81005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 81005a8:	d26c      	bcs.n	8100684 <__udivmoddi4+0x2b4>
 81005aa:	458e      	cmp	lr, r1
 81005ac:	d96a      	bls.n	8100684 <__udivmoddi4+0x2b4>
 81005ae:	3802      	subs	r0, #2
 81005b0:	4461      	add	r1, ip
 81005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81005b6:	fba0 9402 	umull	r9, r4, r0, r2
 81005ba:	eba1 010e 	sub.w	r1, r1, lr
 81005be:	42a1      	cmp	r1, r4
 81005c0:	46c8      	mov	r8, r9
 81005c2:	46a6      	mov	lr, r4
 81005c4:	d356      	bcc.n	8100674 <__udivmoddi4+0x2a4>
 81005c6:	d053      	beq.n	8100670 <__udivmoddi4+0x2a0>
 81005c8:	b15d      	cbz	r5, 81005e2 <__udivmoddi4+0x212>
 81005ca:	ebb3 0208 	subs.w	r2, r3, r8
 81005ce:	eb61 010e 	sbc.w	r1, r1, lr
 81005d2:	fa01 f707 	lsl.w	r7, r1, r7
 81005d6:	fa22 f306 	lsr.w	r3, r2, r6
 81005da:	40f1      	lsrs	r1, r6
 81005dc:	431f      	orrs	r7, r3
 81005de:	e9c5 7100 	strd	r7, r1, [r5]
 81005e2:	2600      	movs	r6, #0
 81005e4:	4631      	mov	r1, r6
 81005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005ea:	f1c2 0320 	rsb	r3, r2, #32
 81005ee:	40d8      	lsrs	r0, r3
 81005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 81005f4:	fa21 f303 	lsr.w	r3, r1, r3
 81005f8:	4091      	lsls	r1, r2
 81005fa:	4301      	orrs	r1, r0
 81005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100600:	fa1f fe8c 	uxth.w	lr, ip
 8100604:	fbb3 f0f7 	udiv	r0, r3, r7
 8100608:	fb07 3610 	mls	r6, r7, r0, r3
 810060c:	0c0b      	lsrs	r3, r1, #16
 810060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100612:	fb00 f60e 	mul.w	r6, r0, lr
 8100616:	429e      	cmp	r6, r3
 8100618:	fa04 f402 	lsl.w	r4, r4, r2
 810061c:	d908      	bls.n	8100630 <__udivmoddi4+0x260>
 810061e:	eb1c 0303 	adds.w	r3, ip, r3
 8100622:	f100 38ff 	add.w	r8, r0, #4294967295
 8100626:	d22f      	bcs.n	8100688 <__udivmoddi4+0x2b8>
 8100628:	429e      	cmp	r6, r3
 810062a:	d92d      	bls.n	8100688 <__udivmoddi4+0x2b8>
 810062c:	3802      	subs	r0, #2
 810062e:	4463      	add	r3, ip
 8100630:	1b9b      	subs	r3, r3, r6
 8100632:	b289      	uxth	r1, r1
 8100634:	fbb3 f6f7 	udiv	r6, r3, r7
 8100638:	fb07 3316 	mls	r3, r7, r6, r3
 810063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100640:	fb06 f30e 	mul.w	r3, r6, lr
 8100644:	428b      	cmp	r3, r1
 8100646:	d908      	bls.n	810065a <__udivmoddi4+0x28a>
 8100648:	eb1c 0101 	adds.w	r1, ip, r1
 810064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8100650:	d216      	bcs.n	8100680 <__udivmoddi4+0x2b0>
 8100652:	428b      	cmp	r3, r1
 8100654:	d914      	bls.n	8100680 <__udivmoddi4+0x2b0>
 8100656:	3e02      	subs	r6, #2
 8100658:	4461      	add	r1, ip
 810065a:	1ac9      	subs	r1, r1, r3
 810065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100660:	e738      	b.n	81004d4 <__udivmoddi4+0x104>
 8100662:	462e      	mov	r6, r5
 8100664:	4628      	mov	r0, r5
 8100666:	e705      	b.n	8100474 <__udivmoddi4+0xa4>
 8100668:	4606      	mov	r6, r0
 810066a:	e6e3      	b.n	8100434 <__udivmoddi4+0x64>
 810066c:	4618      	mov	r0, r3
 810066e:	e6f8      	b.n	8100462 <__udivmoddi4+0x92>
 8100670:	454b      	cmp	r3, r9
 8100672:	d2a9      	bcs.n	81005c8 <__udivmoddi4+0x1f8>
 8100674:	ebb9 0802 	subs.w	r8, r9, r2
 8100678:	eb64 0e0c 	sbc.w	lr, r4, ip
 810067c:	3801      	subs	r0, #1
 810067e:	e7a3      	b.n	81005c8 <__udivmoddi4+0x1f8>
 8100680:	4646      	mov	r6, r8
 8100682:	e7ea      	b.n	810065a <__udivmoddi4+0x28a>
 8100684:	4620      	mov	r0, r4
 8100686:	e794      	b.n	81005b2 <__udivmoddi4+0x1e2>
 8100688:	4640      	mov	r0, r8
 810068a:	e7d1      	b.n	8100630 <__udivmoddi4+0x260>
 810068c:	46d0      	mov	r8, sl
 810068e:	e77b      	b.n	8100588 <__udivmoddi4+0x1b8>
 8100690:	3b02      	subs	r3, #2
 8100692:	4461      	add	r1, ip
 8100694:	e732      	b.n	81004fc <__udivmoddi4+0x12c>
 8100696:	4630      	mov	r0, r6
 8100698:	e709      	b.n	81004ae <__udivmoddi4+0xde>
 810069a:	4464      	add	r4, ip
 810069c:	3802      	subs	r0, #2
 810069e:	e742      	b.n	8100526 <__udivmoddi4+0x156>

081006a0 <__aeabi_idiv0>:
 81006a0:	4770      	bx	lr
 81006a2:	bf00      	nop

081006a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006a4:	b480      	push	{r7}
 81006a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006a8:	4b09      	ldr	r3, [pc, #36]	; (81006d0 <SystemInit+0x2c>)
 81006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81006ae:	4a08      	ldr	r2, [pc, #32]	; (81006d0 <SystemInit+0x2c>)
 81006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006b8:	4b05      	ldr	r3, [pc, #20]	; (81006d0 <SystemInit+0x2c>)
 81006ba:	691b      	ldr	r3, [r3, #16]
 81006bc:	4a04      	ldr	r2, [pc, #16]	; (81006d0 <SystemInit+0x2c>)
 81006be:	f043 0310 	orr.w	r3, r3, #16
 81006c2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006c4:	bf00      	nop
 81006c6:	46bd      	mov	sp, r7
 81006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006cc:	4770      	bx	lr
 81006ce:	bf00      	nop
 81006d0:	e000ed00 	.word	0xe000ed00

081006d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81006d4:	b580      	push	{r7, lr}
 81006d6:	b088      	sub	sp, #32
 81006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81006da:	f107 030c 	add.w	r3, r7, #12
 81006de:	2200      	movs	r2, #0
 81006e0:	601a      	str	r2, [r3, #0]
 81006e2:	605a      	str	r2, [r3, #4]
 81006e4:	609a      	str	r2, [r3, #8]
 81006e6:	60da      	str	r2, [r3, #12]
 81006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 81006ea:	4b1b      	ldr	r3, [pc, #108]	; (8100758 <MX_GPIO_Init+0x84>)
 81006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006f0:	4a19      	ldr	r2, [pc, #100]	; (8100758 <MX_GPIO_Init+0x84>)
 81006f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006fa:	4b17      	ldr	r3, [pc, #92]	; (8100758 <MX_GPIO_Init+0x84>)
 81006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100704:	60bb      	str	r3, [r7, #8]
 8100706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100708:	4b13      	ldr	r3, [pc, #76]	; (8100758 <MX_GPIO_Init+0x84>)
 810070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810070e:	4a12      	ldr	r2, [pc, #72]	; (8100758 <MX_GPIO_Init+0x84>)
 8100710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100718:	4b0f      	ldr	r3, [pc, #60]	; (8100758 <MX_GPIO_Init+0x84>)
 810071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810071e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100722:	607b      	str	r3, [r7, #4]
 8100724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8100726:	2201      	movs	r2, #1
 8100728:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 810072c:	480b      	ldr	r0, [pc, #44]	; (810075c <MX_GPIO_Init+0x88>)
 810072e:	f000 fed7 	bl	81014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI12 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8100732:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8100736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100738:	2301      	movs	r3, #1
 810073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810073c:	2300      	movs	r3, #0
 810073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100740:	2300      	movs	r3, #0
 8100742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100744:	f107 030c 	add.w	r3, r7, #12
 8100748:	4619      	mov	r1, r3
 810074a:	4804      	ldr	r0, [pc, #16]	; (810075c <MX_GPIO_Init+0x88>)
 810074c:	f000 fd18 	bl	8101180 <HAL_GPIO_Init>

}
 8100750:	bf00      	nop
 8100752:	3720      	adds	r7, #32
 8100754:	46bd      	mov	sp, r7
 8100756:	bd80      	pop	{r7, pc}
 8100758:	58024400 	.word	0x58024400
 810075c:	58022000 	.word	0x58022000

08100760 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8100760:	b580      	push	{r7, lr}
 8100762:	b084      	sub	sp, #16
 8100764:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	int cnt = 0;
 8100766:	2300      	movs	r3, #0
 8100768:	60fb      	str	r3, [r7, #12]
	char str_cntrl[] = "dasal:";
 810076a:	4a35      	ldr	r2, [pc, #212]	; (8100840 <main+0xe0>)
 810076c:	1d3b      	adds	r3, r7, #4
 810076e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100772:	6018      	str	r0, [r3, #0]
 8100774:	3304      	adds	r3, #4
 8100776:	8019      	strh	r1, [r3, #0]
 8100778:	3302      	adds	r3, #2
 810077a:	0c0a      	lsrs	r2, r1, #16
 810077c:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 1 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 810077e:	4b31      	ldr	r3, [pc, #196]	; (8100844 <main+0xe4>)
 8100780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100784:	4a2f      	ldr	r2, [pc, #188]	; (8100844 <main+0xe4>)
 8100786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810078e:	4b2d      	ldr	r3, [pc, #180]	; (8100844 <main+0xe4>)
 8100790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100798:	603b      	str	r3, [r7, #0]
 810079a:	683b      	ldr	r3, [r7, #0]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810079c:	2001      	movs	r0, #1
 810079e:	f000 ff01 	bl	81015a4 <HAL_HSEM_ActivateNotification>
	/*
	 Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	 perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 81007a2:	f000 ffa5 	bl	81016f0 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE,
 81007a6:	2201      	movs	r2, #1
 81007a8:	2102      	movs	r1, #2
 81007aa:	2000      	movs	r0, #0
 81007ac:	f000 ff26 	bl	81015fc <HAL_PWREx_EnterSTOPMode>
	PWR_D2_DOMAIN);
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007b0:	4b25      	ldr	r3, [pc, #148]	; (8100848 <main+0xe8>)
 81007b2:	681b      	ldr	r3, [r3, #0]
 81007b4:	091b      	lsrs	r3, r3, #4
 81007b6:	f003 030f 	and.w	r3, r3, #15
 81007ba:	2b07      	cmp	r3, #7
 81007bc:	d108      	bne.n	81007d0 <main+0x70>
 81007be:	4b23      	ldr	r3, [pc, #140]	; (810084c <main+0xec>)
 81007c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81007c4:	4a21      	ldr	r2, [pc, #132]	; (810084c <main+0xec>)
 81007c6:	f043 0301 	orr.w	r3, r3, #1
 81007ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81007ce:	e007      	b.n	81007e0 <main+0x80>
 81007d0:	4b1e      	ldr	r3, [pc, #120]	; (810084c <main+0xec>)
 81007d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81007d6:	4a1d      	ldr	r2, [pc, #116]	; (810084c <main+0xec>)
 81007d8:	f043 0301 	orr.w	r3, r3, #1
 81007dc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 81007e0:	f000 faf6 	bl	8100dd0 <HAL_Init>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 81007e4:	f7ff ff76 	bl	81006d4 <MX_GPIO_Init>
	MX_UART8_Init();
 81007e8:	f000 fa16 	bl	8100c18 <MX_UART8_Init>
	MX_TIM13_Init();
 81007ec:	f000 f9c8 	bl	8100b80 <MX_TIM13_Init>
	/* USER CODE BEGIN 2 */

	OpenAMP_init();
 81007f0:	f000 f870 	bl	81008d4 <OpenAMP_init>

	HAL_TIM_Base_Start_IT(&htim13);
 81007f4:	4816      	ldr	r0, [pc, #88]	; (8100850 <main+0xf0>)
 81007f6:	f002 fd49 	bl	810328c <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (message_received == 1) {
 81007fa:	4b16      	ldr	r3, [pc, #88]	; (8100854 <main+0xf4>)
 81007fc:	681b      	ldr	r3, [r3, #0]
 81007fe:	2b01      	cmp	r3, #1
 8100800:	d112      	bne.n	8100828 <main+0xc8>
			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 8100802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100806:	4814      	ldr	r0, [pc, #80]	; (8100858 <main+0xf8>)
 8100808:	f000 fe83 	bl	8101512 <HAL_GPIO_TogglePin>
			message_received = 0;
 810080c:	4b11      	ldr	r3, [pc, #68]	; (8100854 <main+0xf4>)
 810080e:	2200      	movs	r2, #0
 8100810:	601a      	str	r2, [r3, #0]
			if (NULL != strstr(buf, str_cntrl))
 8100812:	1d3b      	adds	r3, r7, #4
 8100814:	4619      	mov	r1, r3
 8100816:	4811      	ldr	r0, [pc, #68]	; (810085c <main+0xfc>)
 8100818:	f006 ff91 	bl	810773e <strstr>
 810081c:	4603      	mov	r3, r0
 810081e:	2b00      	cmp	r3, #0
 8100820:	d002      	beq.n	8100828 <main+0xc8>
				cnt++;
 8100822:	68fb      	ldr	r3, [r7, #12]
 8100824:	3301      	adds	r3, #1
 8100826:	60fb      	str	r3, [r7, #12]
		}

		if (cnt == 200) {
 8100828:	68fb      	ldr	r3, [r7, #12]
 810082a:	2bc8      	cmp	r3, #200	; 0xc8
 810082c:	d1e5      	bne.n	81007fa <main+0x9a>
			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 810082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8100832:	4809      	ldr	r0, [pc, #36]	; (8100858 <main+0xf8>)
 8100834:	f000 fe6d 	bl	8101512 <HAL_GPIO_TogglePin>
			cnt = 0;
 8100838:	2300      	movs	r3, #0
 810083a:	60fb      	str	r3, [r7, #12]
		if (message_received == 1) {
 810083c:	e7dd      	b.n	81007fa <main+0x9a>
 810083e:	bf00      	nop
 8100840:	08107f4c 	.word	0x08107f4c
 8100844:	58024400 	.word	0x58024400
 8100848:	e000ed00 	.word	0xe000ed00
 810084c:	58026400 	.word	0x58026400
 8100850:	100001bc 	.word	0x100001bc
 8100854:	10000174 	.word	0x10000174
 8100858:	58022000 	.word	0x58022000
 810085c:	10000140 	.word	0x10000140

08100860 <HAL_TIM_PeriodElapsedCallback>:
	/* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8100860:	b580      	push	{r7, lr}
 8100862:	b082      	sub	sp, #8
 8100864:	af00      	add	r7, sp, #0
 8100866:	6078      	str	r0, [r7, #4]

	if (htim == &htim13) {
 8100868:	687b      	ldr	r3, [r7, #4]
 810086a:	4a07      	ldr	r2, [pc, #28]	; (8100888 <HAL_TIM_PeriodElapsedCallback+0x28>)
 810086c:	4293      	cmp	r3, r2
 810086e:	d104      	bne.n	810087a <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8100870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8100874:	4805      	ldr	r0, [pc, #20]	; (810088c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8100876:	f000 fe4c 	bl	8101512 <HAL_GPIO_TogglePin>
	}

	OPENAMP_check_for_message();
 810087a:	f006 fab9 	bl	8106df0 <OPENAMP_check_for_message>
}
 810087e:	bf00      	nop
 8100880:	3708      	adds	r7, #8
 8100882:	46bd      	mov	sp, r7
 8100884:	bd80      	pop	{r7, pc}
 8100886:	bf00      	nop
 8100888:	100001bc 	.word	0x100001bc
 810088c:	58022000 	.word	0x58022000

08100890 <rpmsg_recv_callback>:

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv) {
 8100890:	b580      	push	{r7, lr}
 8100892:	b084      	sub	sp, #16
 8100894:	af00      	add	r7, sp, #0
 8100896:	60f8      	str	r0, [r7, #12]
 8100898:	60b9      	str	r1, [r7, #8]
 810089a:	607a      	str	r2, [r7, #4]
 810089c:	603b      	str	r3, [r7, #0]

	memset((void*) buf, 0, sizeof(char) * TEST_BUF_SIZE);
 810089e:	2232      	movs	r2, #50	; 0x32
 81008a0:	2100      	movs	r1, #0
 81008a2:	4809      	ldr	r0, [pc, #36]	; (81008c8 <rpmsg_recv_callback+0x38>)
 81008a4:	f006 fb3e 	bl	8106f24 <memset>
	app_len = len;
 81008a8:	4a08      	ldr	r2, [pc, #32]	; (81008cc <rpmsg_recv_callback+0x3c>)
 81008aa:	687b      	ldr	r3, [r7, #4]
 81008ac:	6013      	str	r3, [r2, #0]

	strncpy((char*) buf, (char*) data, len);
 81008ae:	687a      	ldr	r2, [r7, #4]
 81008b0:	68b9      	ldr	r1, [r7, #8]
 81008b2:	4805      	ldr	r0, [pc, #20]	; (81008c8 <rpmsg_recv_callback+0x38>)
 81008b4:	f006 ff30 	bl	8107718 <strncpy>

	message_received = 1;
 81008b8:	4b05      	ldr	r3, [pc, #20]	; (81008d0 <rpmsg_recv_callback+0x40>)
 81008ba:	2201      	movs	r2, #1
 81008bc:	601a      	str	r2, [r3, #0]
	return 0;
 81008be:	2300      	movs	r3, #0

}
 81008c0:	4618      	mov	r0, r3
 81008c2:	3710      	adds	r7, #16
 81008c4:	46bd      	mov	sp, r7
 81008c6:	bd80      	pop	{r7, pc}
 81008c8:	10000140 	.word	0x10000140
 81008cc:	10000138 	.word	0x10000138
 81008d0:	10000174 	.word	0x10000174

081008d4 <OpenAMP_init>:

static void OpenAMP_init(void) {
 81008d4:	b580      	push	{r7, lr}
 81008d6:	b082      	sub	sp, #8
 81008d8:	af02      	add	r7, sp, #8
	MAILBOX_Init();
 81008da:	f006 f8d3 	bl	8106a84 <MAILBOX_Init>

	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL) != HAL_OK)
 81008de:	2100      	movs	r1, #0
 81008e0:	2001      	movs	r0, #1
 81008e2:	f006 f9d1 	bl	8106c88 <MX_OPENAMP_Init>
 81008e6:	4603      	mov	r3, r0
 81008e8:	2b00      	cmp	r3, #0
 81008ea:	d001      	beq.n	81008f0 <OpenAMP_init+0x1c>
		Error_Handler();
 81008ec:	f000 f81e 	bl	810092c <Error_Handler>

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_CHAN_NAME,
 81008f0:	2300      	movs	r3, #0
 81008f2:	9300      	str	r3, [sp, #0]
 81008f4:	4b09      	ldr	r3, [pc, #36]	; (810091c <OpenAMP_init+0x48>)
 81008f6:	f04f 32ff 	mov.w	r2, #4294967295
 81008fa:	4909      	ldr	r1, [pc, #36]	; (8100920 <OpenAMP_init+0x4c>)
 81008fc:	4809      	ldr	r0, [pc, #36]	; (8100924 <OpenAMP_init+0x50>)
 81008fe:	f006 fa59 	bl	8106db4 <OPENAMP_create_endpoint>
 8100902:	4603      	mov	r3, r0
 8100904:	4a08      	ldr	r2, [pc, #32]	; (8100928 <OpenAMP_init+0x54>)
 8100906:	6013      	str	r3, [r2, #0]
	RPMSG_ADDR_ANY, rpmsg_recv_callback, NULL);

	if (status < 0) {
 8100908:	4b07      	ldr	r3, [pc, #28]	; (8100928 <OpenAMP_init+0x54>)
 810090a:	681b      	ldr	r3, [r3, #0]
 810090c:	2b00      	cmp	r3, #0
 810090e:	da01      	bge.n	8100914 <OpenAMP_init+0x40>
		Error_Handler();
 8100910:	f000 f80c 	bl	810092c <Error_Handler>
	}

	//OPENAMP_DeInit();
}
 8100914:	bf00      	nop
 8100916:	46bd      	mov	sp, r7
 8100918:	bd80      	pop	{r7, pc}
 810091a:	bf00      	nop
 810091c:	08100891 	.word	0x08100891
 8100920:	08107f54 	.word	0x08107f54
 8100924:	10000178 	.word	0x10000178
 8100928:	1000013c 	.word	0x1000013c

0810092c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 810092c:	b480      	push	{r7}
 810092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100930:	b672      	cpsid	i
}
 8100932:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8100934:	e7fe      	b.n	8100934 <Error_Handler+0x8>
	...

08100938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100938:	b580      	push	{r7, lr}
 810093a:	b082      	sub	sp, #8
 810093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810093e:	4b0d      	ldr	r3, [pc, #52]	; (8100974 <HAL_MspInit+0x3c>)
 8100940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100944:	4a0b      	ldr	r2, [pc, #44]	; (8100974 <HAL_MspInit+0x3c>)
 8100946:	f043 0302 	orr.w	r3, r3, #2
 810094a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810094e:	4b09      	ldr	r3, [pc, #36]	; (8100974 <HAL_MspInit+0x3c>)
 8100950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100954:	f003 0302 	and.w	r3, r3, #2
 8100958:	607b      	str	r3, [r7, #4]
 810095a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 810095c:	2200      	movs	r2, #0
 810095e:	2100      	movs	r1, #0
 8100960:	207e      	movs	r0, #126	; 0x7e
 8100962:	f000 fbc4 	bl	81010ee <HAL_NVIC_SetPriority>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100966:	207e      	movs	r0, #126	; 0x7e
 8100968:	f000 fbdb 	bl	8101122 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810096c:	bf00      	nop
 810096e:	3708      	adds	r7, #8
 8100970:	46bd      	mov	sp, r7
 8100972:	bd80      	pop	{r7, pc}
 8100974:	58024400 	.word	0x58024400

08100978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100978:	b480      	push	{r7}
 810097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810097c:	e7fe      	b.n	810097c <NMI_Handler+0x4>

0810097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810097e:	b480      	push	{r7}
 8100980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100982:	e7fe      	b.n	8100982 <HardFault_Handler+0x4>

08100984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100984:	b480      	push	{r7}
 8100986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100988:	e7fe      	b.n	8100988 <MemManage_Handler+0x4>

0810098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810098a:	b480      	push	{r7}
 810098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810098e:	e7fe      	b.n	810098e <BusFault_Handler+0x4>

08100990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100990:	b480      	push	{r7}
 8100992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100994:	e7fe      	b.n	8100994 <UsageFault_Handler+0x4>

08100996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100996:	b480      	push	{r7}
 8100998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810099a:	bf00      	nop
 810099c:	46bd      	mov	sp, r7
 810099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009a2:	4770      	bx	lr

081009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81009a4:	b480      	push	{r7}
 81009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81009a8:	bf00      	nop
 81009aa:	46bd      	mov	sp, r7
 81009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009b0:	4770      	bx	lr

081009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81009b2:	b480      	push	{r7}
 81009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81009b6:	bf00      	nop
 81009b8:	46bd      	mov	sp, r7
 81009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009be:	4770      	bx	lr

081009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81009c0:	b580      	push	{r7, lr}
 81009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81009c4:	f000 fa98 	bl	8100ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81009c8:	bf00      	nop
 81009ca:	bd80      	pop	{r7, pc}

081009cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 81009cc:	b580      	push	{r7, lr}
 81009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 81009d0:	4802      	ldr	r0, [pc, #8]	; (81009dc <TIM8_UP_TIM13_IRQHandler+0x10>)
 81009d2:	f002 fcd3 	bl	810337c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 81009d6:	bf00      	nop
 81009d8:	bd80      	pop	{r7, pc}
 81009da:	bf00      	nop
 81009dc:	100001bc 	.word	0x100001bc

081009e0 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81009e0:	b580      	push	{r7, lr}
 81009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81009e4:	f000 fdf0 	bl	81015c8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81009e8:	bf00      	nop
 81009ea:	bd80      	pop	{r7, pc}

081009ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81009ec:	b480      	push	{r7}
 81009ee:	af00      	add	r7, sp, #0
	return 1;
 81009f0:	2301      	movs	r3, #1
}
 81009f2:	4618      	mov	r0, r3
 81009f4:	46bd      	mov	sp, r7
 81009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009fa:	4770      	bx	lr

081009fc <_kill>:

int _kill(int pid, int sig)
{
 81009fc:	b480      	push	{r7}
 81009fe:	b083      	sub	sp, #12
 8100a00:	af00      	add	r7, sp, #0
 8100a02:	6078      	str	r0, [r7, #4]
 8100a04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100a06:	4b05      	ldr	r3, [pc, #20]	; (8100a1c <_kill+0x20>)
 8100a08:	2216      	movs	r2, #22
 8100a0a:	601a      	str	r2, [r3, #0]
	return -1;
 8100a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100a10:	4618      	mov	r0, r3
 8100a12:	370c      	adds	r7, #12
 8100a14:	46bd      	mov	sp, r7
 8100a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a1a:	4770      	bx	lr
 8100a1c:	1000035c 	.word	0x1000035c

08100a20 <_exit>:

void _exit (int status)
{
 8100a20:	b580      	push	{r7, lr}
 8100a22:	b082      	sub	sp, #8
 8100a24:	af00      	add	r7, sp, #0
 8100a26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100a28:	f04f 31ff 	mov.w	r1, #4294967295
 8100a2c:	6878      	ldr	r0, [r7, #4]
 8100a2e:	f7ff ffe5 	bl	81009fc <_kill>
	while (1) {}		/* Make sure we hang here */
 8100a32:	e7fe      	b.n	8100a32 <_exit+0x12>

08100a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100a34:	b580      	push	{r7, lr}
 8100a36:	b086      	sub	sp, #24
 8100a38:	af00      	add	r7, sp, #0
 8100a3a:	60f8      	str	r0, [r7, #12]
 8100a3c:	60b9      	str	r1, [r7, #8]
 8100a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a40:	2300      	movs	r3, #0
 8100a42:	617b      	str	r3, [r7, #20]
 8100a44:	e00a      	b.n	8100a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100a46:	f3af 8000 	nop.w
 8100a4a:	4601      	mov	r1, r0
 8100a4c:	68bb      	ldr	r3, [r7, #8]
 8100a4e:	1c5a      	adds	r2, r3, #1
 8100a50:	60ba      	str	r2, [r7, #8]
 8100a52:	b2ca      	uxtb	r2, r1
 8100a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a56:	697b      	ldr	r3, [r7, #20]
 8100a58:	3301      	adds	r3, #1
 8100a5a:	617b      	str	r3, [r7, #20]
 8100a5c:	697a      	ldr	r2, [r7, #20]
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	429a      	cmp	r2, r3
 8100a62:	dbf0      	blt.n	8100a46 <_read+0x12>
	}

return len;
 8100a64:	687b      	ldr	r3, [r7, #4]
}
 8100a66:	4618      	mov	r0, r3
 8100a68:	3718      	adds	r7, #24
 8100a6a:	46bd      	mov	sp, r7
 8100a6c:	bd80      	pop	{r7, pc}

08100a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100a6e:	b580      	push	{r7, lr}
 8100a70:	b086      	sub	sp, #24
 8100a72:	af00      	add	r7, sp, #0
 8100a74:	60f8      	str	r0, [r7, #12]
 8100a76:	60b9      	str	r1, [r7, #8]
 8100a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a7a:	2300      	movs	r3, #0
 8100a7c:	617b      	str	r3, [r7, #20]
 8100a7e:	e009      	b.n	8100a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100a80:	68bb      	ldr	r3, [r7, #8]
 8100a82:	1c5a      	adds	r2, r3, #1
 8100a84:	60ba      	str	r2, [r7, #8]
 8100a86:	781b      	ldrb	r3, [r3, #0]
 8100a88:	4618      	mov	r0, r3
 8100a8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100a8e:	697b      	ldr	r3, [r7, #20]
 8100a90:	3301      	adds	r3, #1
 8100a92:	617b      	str	r3, [r7, #20]
 8100a94:	697a      	ldr	r2, [r7, #20]
 8100a96:	687b      	ldr	r3, [r7, #4]
 8100a98:	429a      	cmp	r2, r3
 8100a9a:	dbf1      	blt.n	8100a80 <_write+0x12>
	}
	return len;
 8100a9c:	687b      	ldr	r3, [r7, #4]
}
 8100a9e:	4618      	mov	r0, r3
 8100aa0:	3718      	adds	r7, #24
 8100aa2:	46bd      	mov	sp, r7
 8100aa4:	bd80      	pop	{r7, pc}

08100aa6 <_close>:

int _close(int file)
{
 8100aa6:	b480      	push	{r7}
 8100aa8:	b083      	sub	sp, #12
 8100aaa:	af00      	add	r7, sp, #0
 8100aac:	6078      	str	r0, [r7, #4]
	return -1;
 8100aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100ab2:	4618      	mov	r0, r3
 8100ab4:	370c      	adds	r7, #12
 8100ab6:	46bd      	mov	sp, r7
 8100ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100abc:	4770      	bx	lr

08100abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100abe:	b480      	push	{r7}
 8100ac0:	b083      	sub	sp, #12
 8100ac2:	af00      	add	r7, sp, #0
 8100ac4:	6078      	str	r0, [r7, #4]
 8100ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100ac8:	683b      	ldr	r3, [r7, #0]
 8100aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8100ace:	605a      	str	r2, [r3, #4]
	return 0;
 8100ad0:	2300      	movs	r3, #0
}
 8100ad2:	4618      	mov	r0, r3
 8100ad4:	370c      	adds	r7, #12
 8100ad6:	46bd      	mov	sp, r7
 8100ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100adc:	4770      	bx	lr

08100ade <_isatty>:

int _isatty(int file)
{
 8100ade:	b480      	push	{r7}
 8100ae0:	b083      	sub	sp, #12
 8100ae2:	af00      	add	r7, sp, #0
 8100ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8100ae6:	2301      	movs	r3, #1
}
 8100ae8:	4618      	mov	r0, r3
 8100aea:	370c      	adds	r7, #12
 8100aec:	46bd      	mov	sp, r7
 8100aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100af2:	4770      	bx	lr

08100af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100af4:	b480      	push	{r7}
 8100af6:	b085      	sub	sp, #20
 8100af8:	af00      	add	r7, sp, #0
 8100afa:	60f8      	str	r0, [r7, #12]
 8100afc:	60b9      	str	r1, [r7, #8]
 8100afe:	607a      	str	r2, [r7, #4]
	return 0;
 8100b00:	2300      	movs	r3, #0
}
 8100b02:	4618      	mov	r0, r3
 8100b04:	3714      	adds	r7, #20
 8100b06:	46bd      	mov	sp, r7
 8100b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b0c:	4770      	bx	lr
	...

08100b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100b10:	b480      	push	{r7}
 8100b12:	b087      	sub	sp, #28
 8100b14:	af00      	add	r7, sp, #0
 8100b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100b18:	4a14      	ldr	r2, [pc, #80]	; (8100b6c <_sbrk+0x5c>)
 8100b1a:	4b15      	ldr	r3, [pc, #84]	; (8100b70 <_sbrk+0x60>)
 8100b1c:	1ad3      	subs	r3, r2, r3
 8100b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100b20:	697b      	ldr	r3, [r7, #20]
 8100b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100b24:	4b13      	ldr	r3, [pc, #76]	; (8100b74 <_sbrk+0x64>)
 8100b26:	681b      	ldr	r3, [r3, #0]
 8100b28:	2b00      	cmp	r3, #0
 8100b2a:	d102      	bne.n	8100b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100b2c:	4b11      	ldr	r3, [pc, #68]	; (8100b74 <_sbrk+0x64>)
 8100b2e:	4a12      	ldr	r2, [pc, #72]	; (8100b78 <_sbrk+0x68>)
 8100b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100b32:	4b10      	ldr	r3, [pc, #64]	; (8100b74 <_sbrk+0x64>)
 8100b34:	681a      	ldr	r2, [r3, #0]
 8100b36:	687b      	ldr	r3, [r7, #4]
 8100b38:	4413      	add	r3, r2
 8100b3a:	693a      	ldr	r2, [r7, #16]
 8100b3c:	429a      	cmp	r2, r3
 8100b3e:	d205      	bcs.n	8100b4c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8100b40:	4b0e      	ldr	r3, [pc, #56]	; (8100b7c <_sbrk+0x6c>)
 8100b42:	220c      	movs	r2, #12
 8100b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100b46:	f04f 33ff 	mov.w	r3, #4294967295
 8100b4a:	e009      	b.n	8100b60 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8100b4c:	4b09      	ldr	r3, [pc, #36]	; (8100b74 <_sbrk+0x64>)
 8100b4e:	681b      	ldr	r3, [r3, #0]
 8100b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100b52:	4b08      	ldr	r3, [pc, #32]	; (8100b74 <_sbrk+0x64>)
 8100b54:	681a      	ldr	r2, [r3, #0]
 8100b56:	687b      	ldr	r3, [r7, #4]
 8100b58:	4413      	add	r3, r2
 8100b5a:	4a06      	ldr	r2, [pc, #24]	; (8100b74 <_sbrk+0x64>)
 8100b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100b5e:	68fb      	ldr	r3, [r7, #12]
}
 8100b60:	4618      	mov	r0, r3
 8100b62:	371c      	adds	r7, #28
 8100b64:	46bd      	mov	sp, r7
 8100b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b6a:	4770      	bx	lr
 8100b6c:	10048000 	.word	0x10048000
 8100b70:	00000400 	.word	0x00000400
 8100b74:	100001b8 	.word	0x100001b8
 8100b78:	10000368 	.word	0x10000368
 8100b7c:	1000035c 	.word	0x1000035c

08100b80 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8100b80:	b580      	push	{r7, lr}
 8100b82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100b84:	4b0e      	ldr	r3, [pc, #56]	; (8100bc0 <MX_TIM13_Init+0x40>)
 8100b86:	4a0f      	ldr	r2, [pc, #60]	; (8100bc4 <MX_TIM13_Init+0x44>)
 8100b88:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 7500-1; // tim 10khz
 8100b8a:	4b0d      	ldr	r3, [pc, #52]	; (8100bc0 <MX_TIM13_Init+0x40>)
 8100b8c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8100b90:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100b92:	4b0b      	ldr	r3, [pc, #44]	; (8100bc0 <MX_TIM13_Init+0x40>)
 8100b94:	2200      	movs	r2, #0
 8100b96:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50; // freq 200hz
 8100b98:	4b09      	ldr	r3, [pc, #36]	; (8100bc0 <MX_TIM13_Init+0x40>)
 8100b9a:	2232      	movs	r2, #50	; 0x32
 8100b9c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100b9e:	4b08      	ldr	r3, [pc, #32]	; (8100bc0 <MX_TIM13_Init+0x40>)
 8100ba0:	2200      	movs	r2, #0
 8100ba2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100ba4:	4b06      	ldr	r3, [pc, #24]	; (8100bc0 <MX_TIM13_Init+0x40>)
 8100ba6:	2200      	movs	r2, #0
 8100ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100baa:	4805      	ldr	r0, [pc, #20]	; (8100bc0 <MX_TIM13_Init+0x40>)
 8100bac:	f002 fb16 	bl	81031dc <HAL_TIM_Base_Init>
 8100bb0:	4603      	mov	r3, r0
 8100bb2:	2b00      	cmp	r3, #0
 8100bb4:	d001      	beq.n	8100bba <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8100bb6:	f7ff feb9 	bl	810092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100bba:	bf00      	nop
 8100bbc:	bd80      	pop	{r7, pc}
 8100bbe:	bf00      	nop
 8100bc0:	100001bc 	.word	0x100001bc
 8100bc4:	40001c00 	.word	0x40001c00

08100bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8100bc8:	b580      	push	{r7, lr}
 8100bca:	b084      	sub	sp, #16
 8100bcc:	af00      	add	r7, sp, #0
 8100bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8100bd0:	687b      	ldr	r3, [r7, #4]
 8100bd2:	681b      	ldr	r3, [r3, #0]
 8100bd4:	4a0e      	ldr	r2, [pc, #56]	; (8100c10 <HAL_TIM_Base_MspInit+0x48>)
 8100bd6:	4293      	cmp	r3, r2
 8100bd8:	d116      	bne.n	8100c08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8100bda:	4b0e      	ldr	r3, [pc, #56]	; (8100c14 <HAL_TIM_Base_MspInit+0x4c>)
 8100bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100be0:	4a0c      	ldr	r2, [pc, #48]	; (8100c14 <HAL_TIM_Base_MspInit+0x4c>)
 8100be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100be6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100bea:	4b0a      	ldr	r3, [pc, #40]	; (8100c14 <HAL_TIM_Base_MspInit+0x4c>)
 8100bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100bf4:	60fb      	str	r3, [r7, #12]
 8100bf6:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8100bf8:	2200      	movs	r2, #0
 8100bfa:	2100      	movs	r1, #0
 8100bfc:	202c      	movs	r0, #44	; 0x2c
 8100bfe:	f000 fa76 	bl	81010ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8100c02:	202c      	movs	r0, #44	; 0x2c
 8100c04:	f000 fa8d 	bl	8101122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8100c08:	bf00      	nop
 8100c0a:	3710      	adds	r7, #16
 8100c0c:	46bd      	mov	sp, r7
 8100c0e:	bd80      	pop	{r7, pc}
 8100c10:	40001c00 	.word	0x40001c00
 8100c14:	58024400 	.word	0x58024400

08100c18 <MX_UART8_Init>:

UART_HandleTypeDef huart8;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8100c18:	b580      	push	{r7, lr}
 8100c1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8100c1c:	4b22      	ldr	r3, [pc, #136]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c1e:	4a23      	ldr	r2, [pc, #140]	; (8100cac <MX_UART8_Init+0x94>)
 8100c20:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8100c22:	4b21      	ldr	r3, [pc, #132]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100c28:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8100c2a:	4b1f      	ldr	r3, [pc, #124]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c2c:	2200      	movs	r2, #0
 8100c2e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8100c30:	4b1d      	ldr	r3, [pc, #116]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c32:	2200      	movs	r2, #0
 8100c34:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8100c36:	4b1c      	ldr	r3, [pc, #112]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c38:	2200      	movs	r2, #0
 8100c3a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8100c3c:	4b1a      	ldr	r3, [pc, #104]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c3e:	220c      	movs	r2, #12
 8100c40:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100c42:	4b19      	ldr	r3, [pc, #100]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c44:	2200      	movs	r2, #0
 8100c46:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8100c48:	4b17      	ldr	r3, [pc, #92]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c4a:	2200      	movs	r2, #0
 8100c4c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100c4e:	4b16      	ldr	r3, [pc, #88]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c50:	2200      	movs	r2, #0
 8100c52:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100c54:	4b14      	ldr	r3, [pc, #80]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c56:	2200      	movs	r2, #0
 8100c58:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100c5a:	4b13      	ldr	r3, [pc, #76]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c5c:	2200      	movs	r2, #0
 8100c5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8100c60:	4811      	ldr	r0, [pc, #68]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c62:	f002 fd8b 	bl	810377c <HAL_UART_Init>
 8100c66:	4603      	mov	r3, r0
 8100c68:	2b00      	cmp	r3, #0
 8100c6a:	d001      	beq.n	8100c70 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8100c6c:	f7ff fe5e 	bl	810092c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100c70:	2100      	movs	r1, #0
 8100c72:	480d      	ldr	r0, [pc, #52]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c74:	f003 fd28 	bl	81046c8 <HAL_UARTEx_SetTxFifoThreshold>
 8100c78:	4603      	mov	r3, r0
 8100c7a:	2b00      	cmp	r3, #0
 8100c7c:	d001      	beq.n	8100c82 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8100c7e:	f7ff fe55 	bl	810092c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100c82:	2100      	movs	r1, #0
 8100c84:	4808      	ldr	r0, [pc, #32]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c86:	f003 fd5d 	bl	8104744 <HAL_UARTEx_SetRxFifoThreshold>
 8100c8a:	4603      	mov	r3, r0
 8100c8c:	2b00      	cmp	r3, #0
 8100c8e:	d001      	beq.n	8100c94 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8100c90:	f7ff fe4c 	bl	810092c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8100c94:	4804      	ldr	r0, [pc, #16]	; (8100ca8 <MX_UART8_Init+0x90>)
 8100c96:	f003 fcde 	bl	8104656 <HAL_UARTEx_DisableFifoMode>
 8100c9a:	4603      	mov	r3, r0
 8100c9c:	2b00      	cmp	r3, #0
 8100c9e:	d001      	beq.n	8100ca4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8100ca0:	f7ff fe44 	bl	810092c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8100ca4:	bf00      	nop
 8100ca6:	bd80      	pop	{r7, pc}
 8100ca8:	10000208 	.word	0x10000208
 8100cac:	40007c00 	.word	0x40007c00

08100cb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8100cb0:	b580      	push	{r7, lr}
 8100cb2:	b0ba      	sub	sp, #232	; 0xe8
 8100cb4:	af00      	add	r7, sp, #0
 8100cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100cb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100cbc:	2200      	movs	r2, #0
 8100cbe:	601a      	str	r2, [r3, #0]
 8100cc0:	605a      	str	r2, [r3, #4]
 8100cc2:	609a      	str	r2, [r3, #8]
 8100cc4:	60da      	str	r2, [r3, #12]
 8100cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cc8:	f107 0314 	add.w	r3, r7, #20
 8100ccc:	22c0      	movs	r2, #192	; 0xc0
 8100cce:	2100      	movs	r1, #0
 8100cd0:	4618      	mov	r0, r3
 8100cd2:	f006 f927 	bl	8106f24 <memset>
  if(uartHandle->Instance==UART8)
 8100cd6:	687b      	ldr	r3, [r7, #4]
 8100cd8:	681b      	ldr	r3, [r3, #0]
 8100cda:	4a25      	ldr	r2, [pc, #148]	; (8100d70 <HAL_UART_MspInit+0xc0>)
 8100cdc:	4293      	cmp	r3, r2
 8100cde:	d142      	bne.n	8100d66 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8100ce0:	2302      	movs	r3, #2
 8100ce2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100ce4:	2300      	movs	r3, #0
 8100ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100cea:	f107 0314 	add.w	r3, r7, #20
 8100cee:	4618      	mov	r0, r3
 8100cf0:	f000 fee4 	bl	8101abc <HAL_RCCEx_PeriphCLKConfig>
 8100cf4:	4603      	mov	r3, r0
 8100cf6:	2b00      	cmp	r3, #0
 8100cf8:	d001      	beq.n	8100cfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8100cfa:	f7ff fe17 	bl	810092c <Error_Handler>
    }

    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8100cfe:	4b1d      	ldr	r3, [pc, #116]	; (8100d74 <HAL_UART_MspInit+0xc4>)
 8100d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d04:	4a1b      	ldr	r2, [pc, #108]	; (8100d74 <HAL_UART_MspInit+0xc4>)
 8100d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100d0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100d0e:	4b19      	ldr	r3, [pc, #100]	; (8100d74 <HAL_UART_MspInit+0xc4>)
 8100d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8100d18:	613b      	str	r3, [r7, #16]
 8100d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100d1c:	4b15      	ldr	r3, [pc, #84]	; (8100d74 <HAL_UART_MspInit+0xc4>)
 8100d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d22:	4a14      	ldr	r2, [pc, #80]	; (8100d74 <HAL_UART_MspInit+0xc4>)
 8100d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d2c:	4b11      	ldr	r3, [pc, #68]	; (8100d74 <HAL_UART_MspInit+0xc4>)
 8100d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100d36:	60fb      	str	r3, [r7, #12]
 8100d38:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8100d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8100d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d42:	2302      	movs	r3, #2
 8100d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d48:	2300      	movs	r3, #0
 8100d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d4e:	2300      	movs	r3, #0
 8100d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8100d54:	2308      	movs	r3, #8
 8100d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8100d5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100d5e:	4619      	mov	r1, r3
 8100d60:	4805      	ldr	r0, [pc, #20]	; (8100d78 <HAL_UART_MspInit+0xc8>)
 8100d62:	f000 fa0d 	bl	8101180 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8100d66:	bf00      	nop
 8100d68:	37e8      	adds	r7, #232	; 0xe8
 8100d6a:	46bd      	mov	sp, r7
 8100d6c:	bd80      	pop	{r7, pc}
 8100d6e:	bf00      	nop
 8100d70:	40007c00 	.word	0x40007c00
 8100d74:	58024400 	.word	0x58024400
 8100d78:	58022400 	.word	0x58022400

08100d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100db4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100d80:	f7ff fc90 	bl	81006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100d84:	480c      	ldr	r0, [pc, #48]	; (8100db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100d86:	490d      	ldr	r1, [pc, #52]	; (8100dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100d88:	4a0d      	ldr	r2, [pc, #52]	; (8100dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100d8c:	e002      	b.n	8100d94 <LoopCopyDataInit>

08100d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100d92:	3304      	adds	r3, #4

08100d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100d98:	d3f9      	bcc.n	8100d8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100d9a:	4a0a      	ldr	r2, [pc, #40]	; (8100dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100d9c:	4c0a      	ldr	r4, [pc, #40]	; (8100dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100da0:	e001      	b.n	8100da6 <LoopFillZerobss>

08100da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100da4:	3204      	adds	r2, #4

08100da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100da8:	d3fb      	bcc.n	8100da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100daa:	f006 f879 	bl	8106ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100dae:	f7ff fcd7 	bl	8100760 <main>
  bx  lr
 8100db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100db4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100db8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100dbc:	1000011c 	.word	0x1000011c
  ldr r2, =_sidata
 8100dc0:	081082b4 	.word	0x081082b4
  ldr r2, =_sbss
 8100dc4:	1000011c 	.word	0x1000011c
  ldr r4, =_ebss
 8100dc8:	10000364 	.word	0x10000364

08100dcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100dcc:	e7fe      	b.n	8100dcc <ADC3_IRQHandler>
	...

08100dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100dd0:	b580      	push	{r7, lr}
 8100dd2:	b082      	sub	sp, #8
 8100dd4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100dd6:	4b28      	ldr	r3, [pc, #160]	; (8100e78 <HAL_Init+0xa8>)
 8100dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100ddc:	4a26      	ldr	r2, [pc, #152]	; (8100e78 <HAL_Init+0xa8>)
 8100dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100de2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100de6:	4b24      	ldr	r3, [pc, #144]	; (8100e78 <HAL_Init+0xa8>)
 8100de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100df0:	603b      	str	r3, [r7, #0]
 8100df2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100df4:	4b21      	ldr	r3, [pc, #132]	; (8100e7c <HAL_Init+0xac>)
 8100df6:	681b      	ldr	r3, [r3, #0]
 8100df8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100e00:	4a1e      	ldr	r2, [pc, #120]	; (8100e7c <HAL_Init+0xac>)
 8100e02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100e06:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100e08:	4b1c      	ldr	r3, [pc, #112]	; (8100e7c <HAL_Init+0xac>)
 8100e0a:	681b      	ldr	r3, [r3, #0]
 8100e0c:	4a1b      	ldr	r2, [pc, #108]	; (8100e7c <HAL_Init+0xac>)
 8100e0e:	f043 0301 	orr.w	r3, r3, #1
 8100e12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100e14:	2003      	movs	r0, #3
 8100e16:	f000 f95f 	bl	81010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e1a:	f000 fc77 	bl	810170c <HAL_RCC_GetSysClockFreq>
 8100e1e:	4602      	mov	r2, r0
 8100e20:	4b15      	ldr	r3, [pc, #84]	; (8100e78 <HAL_Init+0xa8>)
 8100e22:	699b      	ldr	r3, [r3, #24]
 8100e24:	0a1b      	lsrs	r3, r3, #8
 8100e26:	f003 030f 	and.w	r3, r3, #15
 8100e2a:	4915      	ldr	r1, [pc, #84]	; (8100e80 <HAL_Init+0xb0>)
 8100e2c:	5ccb      	ldrb	r3, [r1, r3]
 8100e2e:	f003 031f 	and.w	r3, r3, #31
 8100e32:	fa22 f303 	lsr.w	r3, r2, r3
 8100e36:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e38:	4b0f      	ldr	r3, [pc, #60]	; (8100e78 <HAL_Init+0xa8>)
 8100e3a:	699b      	ldr	r3, [r3, #24]
 8100e3c:	f003 030f 	and.w	r3, r3, #15
 8100e40:	4a0f      	ldr	r2, [pc, #60]	; (8100e80 <HAL_Init+0xb0>)
 8100e42:	5cd3      	ldrb	r3, [r2, r3]
 8100e44:	f003 031f 	and.w	r3, r3, #31
 8100e48:	687a      	ldr	r2, [r7, #4]
 8100e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8100e4e:	4a0d      	ldr	r2, [pc, #52]	; (8100e84 <HAL_Init+0xb4>)
 8100e50:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100e52:	4b0c      	ldr	r3, [pc, #48]	; (8100e84 <HAL_Init+0xb4>)
 8100e54:	681b      	ldr	r3, [r3, #0]
 8100e56:	4a0c      	ldr	r2, [pc, #48]	; (8100e88 <HAL_Init+0xb8>)
 8100e58:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100e5a:	2000      	movs	r0, #0
 8100e5c:	f000 f816 	bl	8100e8c <HAL_InitTick>
 8100e60:	4603      	mov	r3, r0
 8100e62:	2b00      	cmp	r3, #0
 8100e64:	d001      	beq.n	8100e6a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100e66:	2301      	movs	r3, #1
 8100e68:	e002      	b.n	8100e70 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100e6a:	f7ff fd65 	bl	8100938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100e6e:	2300      	movs	r3, #0
}
 8100e70:	4618      	mov	r0, r3
 8100e72:	3708      	adds	r7, #8
 8100e74:	46bd      	mov	sp, r7
 8100e76:	bd80      	pop	{r7, pc}
 8100e78:	58024400 	.word	0x58024400
 8100e7c:	40024400 	.word	0x40024400
 8100e80:	08108144 	.word	0x08108144
 8100e84:	10000004 	.word	0x10000004
 8100e88:	10000000 	.word	0x10000000

08100e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100e8c:	b580      	push	{r7, lr}
 8100e8e:	b082      	sub	sp, #8
 8100e90:	af00      	add	r7, sp, #0
 8100e92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100e94:	4b15      	ldr	r3, [pc, #84]	; (8100eec <HAL_InitTick+0x60>)
 8100e96:	781b      	ldrb	r3, [r3, #0]
 8100e98:	2b00      	cmp	r3, #0
 8100e9a:	d101      	bne.n	8100ea0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100e9c:	2301      	movs	r3, #1
 8100e9e:	e021      	b.n	8100ee4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100ea0:	4b13      	ldr	r3, [pc, #76]	; (8100ef0 <HAL_InitTick+0x64>)
 8100ea2:	681a      	ldr	r2, [r3, #0]
 8100ea4:	4b11      	ldr	r3, [pc, #68]	; (8100eec <HAL_InitTick+0x60>)
 8100ea6:	781b      	ldrb	r3, [r3, #0]
 8100ea8:	4619      	mov	r1, r3
 8100eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8100eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8100eb6:	4618      	mov	r0, r3
 8100eb8:	f000 f941 	bl	810113e <HAL_SYSTICK_Config>
 8100ebc:	4603      	mov	r3, r0
 8100ebe:	2b00      	cmp	r3, #0
 8100ec0:	d001      	beq.n	8100ec6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100ec2:	2301      	movs	r3, #1
 8100ec4:	e00e      	b.n	8100ee4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100ec6:	687b      	ldr	r3, [r7, #4]
 8100ec8:	2b0f      	cmp	r3, #15
 8100eca:	d80a      	bhi.n	8100ee2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100ecc:	2200      	movs	r2, #0
 8100ece:	6879      	ldr	r1, [r7, #4]
 8100ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8100ed4:	f000 f90b 	bl	81010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ed8:	4a06      	ldr	r2, [pc, #24]	; (8100ef4 <HAL_InitTick+0x68>)
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100ede:	2300      	movs	r3, #0
 8100ee0:	e000      	b.n	8100ee4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100ee2:	2301      	movs	r3, #1
}
 8100ee4:	4618      	mov	r0, r3
 8100ee6:	3708      	adds	r7, #8
 8100ee8:	46bd      	mov	sp, r7
 8100eea:	bd80      	pop	{r7, pc}
 8100eec:	1000000c 	.word	0x1000000c
 8100ef0:	10000000 	.word	0x10000000
 8100ef4:	10000008 	.word	0x10000008

08100ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ef8:	b480      	push	{r7}
 8100efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100efc:	4b06      	ldr	r3, [pc, #24]	; (8100f18 <HAL_IncTick+0x20>)
 8100efe:	781b      	ldrb	r3, [r3, #0]
 8100f00:	461a      	mov	r2, r3
 8100f02:	4b06      	ldr	r3, [pc, #24]	; (8100f1c <HAL_IncTick+0x24>)
 8100f04:	681b      	ldr	r3, [r3, #0]
 8100f06:	4413      	add	r3, r2
 8100f08:	4a04      	ldr	r2, [pc, #16]	; (8100f1c <HAL_IncTick+0x24>)
 8100f0a:	6013      	str	r3, [r2, #0]
}
 8100f0c:	bf00      	nop
 8100f0e:	46bd      	mov	sp, r7
 8100f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f14:	4770      	bx	lr
 8100f16:	bf00      	nop
 8100f18:	1000000c 	.word	0x1000000c
 8100f1c:	10000298 	.word	0x10000298

08100f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100f20:	b480      	push	{r7}
 8100f22:	af00      	add	r7, sp, #0
  return uwTick;
 8100f24:	4b03      	ldr	r3, [pc, #12]	; (8100f34 <HAL_GetTick+0x14>)
 8100f26:	681b      	ldr	r3, [r3, #0]
}
 8100f28:	4618      	mov	r0, r3
 8100f2a:	46bd      	mov	sp, r7
 8100f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f30:	4770      	bx	lr
 8100f32:	bf00      	nop
 8100f34:	10000298 	.word	0x10000298

08100f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f38:	b480      	push	{r7}
 8100f3a:	b085      	sub	sp, #20
 8100f3c:	af00      	add	r7, sp, #0
 8100f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100f40:	687b      	ldr	r3, [r7, #4]
 8100f42:	f003 0307 	and.w	r3, r3, #7
 8100f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100f48:	4b0c      	ldr	r3, [pc, #48]	; (8100f7c <__NVIC_SetPriorityGrouping+0x44>)
 8100f4a:	68db      	ldr	r3, [r3, #12]
 8100f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100f4e:	68ba      	ldr	r2, [r7, #8]
 8100f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100f54:	4013      	ands	r3, r2
 8100f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100f58:	68fb      	ldr	r3, [r7, #12]
 8100f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100f5c:	68bb      	ldr	r3, [r7, #8]
 8100f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100f6a:	4a04      	ldr	r2, [pc, #16]	; (8100f7c <__NVIC_SetPriorityGrouping+0x44>)
 8100f6c:	68bb      	ldr	r3, [r7, #8]
 8100f6e:	60d3      	str	r3, [r2, #12]
}
 8100f70:	bf00      	nop
 8100f72:	3714      	adds	r7, #20
 8100f74:	46bd      	mov	sp, r7
 8100f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f7a:	4770      	bx	lr
 8100f7c:	e000ed00 	.word	0xe000ed00

08100f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100f80:	b480      	push	{r7}
 8100f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100f84:	4b04      	ldr	r3, [pc, #16]	; (8100f98 <__NVIC_GetPriorityGrouping+0x18>)
 8100f86:	68db      	ldr	r3, [r3, #12]
 8100f88:	0a1b      	lsrs	r3, r3, #8
 8100f8a:	f003 0307 	and.w	r3, r3, #7
}
 8100f8e:	4618      	mov	r0, r3
 8100f90:	46bd      	mov	sp, r7
 8100f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f96:	4770      	bx	lr
 8100f98:	e000ed00 	.word	0xe000ed00

08100f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100f9c:	b480      	push	{r7}
 8100f9e:	b083      	sub	sp, #12
 8100fa0:	af00      	add	r7, sp, #0
 8100fa2:	4603      	mov	r3, r0
 8100fa4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100faa:	2b00      	cmp	r3, #0
 8100fac:	db0b      	blt.n	8100fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100fae:	88fb      	ldrh	r3, [r7, #6]
 8100fb0:	f003 021f 	and.w	r2, r3, #31
 8100fb4:	4907      	ldr	r1, [pc, #28]	; (8100fd4 <__NVIC_EnableIRQ+0x38>)
 8100fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fba:	095b      	lsrs	r3, r3, #5
 8100fbc:	2001      	movs	r0, #1
 8100fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8100fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100fc6:	bf00      	nop
 8100fc8:	370c      	adds	r7, #12
 8100fca:	46bd      	mov	sp, r7
 8100fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fd0:	4770      	bx	lr
 8100fd2:	bf00      	nop
 8100fd4:	e000e100 	.word	0xe000e100

08100fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100fd8:	b480      	push	{r7}
 8100fda:	b083      	sub	sp, #12
 8100fdc:	af00      	add	r7, sp, #0
 8100fde:	4603      	mov	r3, r0
 8100fe0:	6039      	str	r1, [r7, #0]
 8100fe2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100fe8:	2b00      	cmp	r3, #0
 8100fea:	db0a      	blt.n	8101002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100fec:	683b      	ldr	r3, [r7, #0]
 8100fee:	b2da      	uxtb	r2, r3
 8100ff0:	490c      	ldr	r1, [pc, #48]	; (8101024 <__NVIC_SetPriority+0x4c>)
 8100ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ff6:	0112      	lsls	r2, r2, #4
 8100ff8:	b2d2      	uxtb	r2, r2
 8100ffa:	440b      	add	r3, r1
 8100ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101000:	e00a      	b.n	8101018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101002:	683b      	ldr	r3, [r7, #0]
 8101004:	b2da      	uxtb	r2, r3
 8101006:	4908      	ldr	r1, [pc, #32]	; (8101028 <__NVIC_SetPriority+0x50>)
 8101008:	88fb      	ldrh	r3, [r7, #6]
 810100a:	f003 030f 	and.w	r3, r3, #15
 810100e:	3b04      	subs	r3, #4
 8101010:	0112      	lsls	r2, r2, #4
 8101012:	b2d2      	uxtb	r2, r2
 8101014:	440b      	add	r3, r1
 8101016:	761a      	strb	r2, [r3, #24]
}
 8101018:	bf00      	nop
 810101a:	370c      	adds	r7, #12
 810101c:	46bd      	mov	sp, r7
 810101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101022:	4770      	bx	lr
 8101024:	e000e100 	.word	0xe000e100
 8101028:	e000ed00 	.word	0xe000ed00

0810102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810102c:	b480      	push	{r7}
 810102e:	b089      	sub	sp, #36	; 0x24
 8101030:	af00      	add	r7, sp, #0
 8101032:	60f8      	str	r0, [r7, #12]
 8101034:	60b9      	str	r1, [r7, #8]
 8101036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101038:	68fb      	ldr	r3, [r7, #12]
 810103a:	f003 0307 	and.w	r3, r3, #7
 810103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101040:	69fb      	ldr	r3, [r7, #28]
 8101042:	f1c3 0307 	rsb	r3, r3, #7
 8101046:	2b04      	cmp	r3, #4
 8101048:	bf28      	it	cs
 810104a:	2304      	movcs	r3, #4
 810104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810104e:	69fb      	ldr	r3, [r7, #28]
 8101050:	3304      	adds	r3, #4
 8101052:	2b06      	cmp	r3, #6
 8101054:	d902      	bls.n	810105c <NVIC_EncodePriority+0x30>
 8101056:	69fb      	ldr	r3, [r7, #28]
 8101058:	3b03      	subs	r3, #3
 810105a:	e000      	b.n	810105e <NVIC_EncodePriority+0x32>
 810105c:	2300      	movs	r3, #0
 810105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101060:	f04f 32ff 	mov.w	r2, #4294967295
 8101064:	69bb      	ldr	r3, [r7, #24]
 8101066:	fa02 f303 	lsl.w	r3, r2, r3
 810106a:	43da      	mvns	r2, r3
 810106c:	68bb      	ldr	r3, [r7, #8]
 810106e:	401a      	ands	r2, r3
 8101070:	697b      	ldr	r3, [r7, #20]
 8101072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101074:	f04f 31ff 	mov.w	r1, #4294967295
 8101078:	697b      	ldr	r3, [r7, #20]
 810107a:	fa01 f303 	lsl.w	r3, r1, r3
 810107e:	43d9      	mvns	r1, r3
 8101080:	687b      	ldr	r3, [r7, #4]
 8101082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101084:	4313      	orrs	r3, r2
         );
}
 8101086:	4618      	mov	r0, r3
 8101088:	3724      	adds	r7, #36	; 0x24
 810108a:	46bd      	mov	sp, r7
 810108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101090:	4770      	bx	lr
	...

08101094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101094:	b580      	push	{r7, lr}
 8101096:	b082      	sub	sp, #8
 8101098:	af00      	add	r7, sp, #0
 810109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	3b01      	subs	r3, #1
 81010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81010a4:	d301      	bcc.n	81010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81010a6:	2301      	movs	r3, #1
 81010a8:	e00f      	b.n	81010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81010aa:	4a0a      	ldr	r2, [pc, #40]	; (81010d4 <SysTick_Config+0x40>)
 81010ac:	687b      	ldr	r3, [r7, #4]
 81010ae:	3b01      	subs	r3, #1
 81010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81010b2:	210f      	movs	r1, #15
 81010b4:	f04f 30ff 	mov.w	r0, #4294967295
 81010b8:	f7ff ff8e 	bl	8100fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81010bc:	4b05      	ldr	r3, [pc, #20]	; (81010d4 <SysTick_Config+0x40>)
 81010be:	2200      	movs	r2, #0
 81010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81010c2:	4b04      	ldr	r3, [pc, #16]	; (81010d4 <SysTick_Config+0x40>)
 81010c4:	2207      	movs	r2, #7
 81010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81010c8:	2300      	movs	r3, #0
}
 81010ca:	4618      	mov	r0, r3
 81010cc:	3708      	adds	r7, #8
 81010ce:	46bd      	mov	sp, r7
 81010d0:	bd80      	pop	{r7, pc}
 81010d2:	bf00      	nop
 81010d4:	e000e010 	.word	0xe000e010

081010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81010d8:	b580      	push	{r7, lr}
 81010da:	b082      	sub	sp, #8
 81010dc:	af00      	add	r7, sp, #0
 81010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81010e0:	6878      	ldr	r0, [r7, #4]
 81010e2:	f7ff ff29 	bl	8100f38 <__NVIC_SetPriorityGrouping>
}
 81010e6:	bf00      	nop
 81010e8:	3708      	adds	r7, #8
 81010ea:	46bd      	mov	sp, r7
 81010ec:	bd80      	pop	{r7, pc}

081010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81010ee:	b580      	push	{r7, lr}
 81010f0:	b086      	sub	sp, #24
 81010f2:	af00      	add	r7, sp, #0
 81010f4:	4603      	mov	r3, r0
 81010f6:	60b9      	str	r1, [r7, #8]
 81010f8:	607a      	str	r2, [r7, #4]
 81010fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81010fc:	f7ff ff40 	bl	8100f80 <__NVIC_GetPriorityGrouping>
 8101100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101102:	687a      	ldr	r2, [r7, #4]
 8101104:	68b9      	ldr	r1, [r7, #8]
 8101106:	6978      	ldr	r0, [r7, #20]
 8101108:	f7ff ff90 	bl	810102c <NVIC_EncodePriority>
 810110c:	4602      	mov	r2, r0
 810110e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101112:	4611      	mov	r1, r2
 8101114:	4618      	mov	r0, r3
 8101116:	f7ff ff5f 	bl	8100fd8 <__NVIC_SetPriority>
}
 810111a:	bf00      	nop
 810111c:	3718      	adds	r7, #24
 810111e:	46bd      	mov	sp, r7
 8101120:	bd80      	pop	{r7, pc}

08101122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101122:	b580      	push	{r7, lr}
 8101124:	b082      	sub	sp, #8
 8101126:	af00      	add	r7, sp, #0
 8101128:	4603      	mov	r3, r0
 810112a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810112c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101130:	4618      	mov	r0, r3
 8101132:	f7ff ff33 	bl	8100f9c <__NVIC_EnableIRQ>
}
 8101136:	bf00      	nop
 8101138:	3708      	adds	r7, #8
 810113a:	46bd      	mov	sp, r7
 810113c:	bd80      	pop	{r7, pc}

0810113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810113e:	b580      	push	{r7, lr}
 8101140:	b082      	sub	sp, #8
 8101142:	af00      	add	r7, sp, #0
 8101144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101146:	6878      	ldr	r0, [r7, #4]
 8101148:	f7ff ffa4 	bl	8101094 <SysTick_Config>
 810114c:	4603      	mov	r3, r0
}
 810114e:	4618      	mov	r0, r3
 8101150:	3708      	adds	r7, #8
 8101152:	46bd      	mov	sp, r7
 8101154:	bd80      	pop	{r7, pc}
	...

08101158 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101158:	b480      	push	{r7}
 810115a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810115c:	4b07      	ldr	r3, [pc, #28]	; (810117c <HAL_GetCurrentCPUID+0x24>)
 810115e:	681b      	ldr	r3, [r3, #0]
 8101160:	091b      	lsrs	r3, r3, #4
 8101162:	f003 030f 	and.w	r3, r3, #15
 8101166:	2b07      	cmp	r3, #7
 8101168:	d101      	bne.n	810116e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810116a:	2303      	movs	r3, #3
 810116c:	e000      	b.n	8101170 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810116e:	2301      	movs	r3, #1
  }
}
 8101170:	4618      	mov	r0, r3
 8101172:	46bd      	mov	sp, r7
 8101174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101178:	4770      	bx	lr
 810117a:	bf00      	nop
 810117c:	e000ed00 	.word	0xe000ed00

08101180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101180:	b480      	push	{r7}
 8101182:	b089      	sub	sp, #36	; 0x24
 8101184:	af00      	add	r7, sp, #0
 8101186:	6078      	str	r0, [r7, #4]
 8101188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810118a:	2300      	movs	r3, #0
 810118c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810118e:	4b89      	ldr	r3, [pc, #548]	; (81013b4 <HAL_GPIO_Init+0x234>)
 8101190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101192:	e194      	b.n	81014be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101194:	683b      	ldr	r3, [r7, #0]
 8101196:	681a      	ldr	r2, [r3, #0]
 8101198:	2101      	movs	r1, #1
 810119a:	69fb      	ldr	r3, [r7, #28]
 810119c:	fa01 f303 	lsl.w	r3, r1, r3
 81011a0:	4013      	ands	r3, r2
 81011a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81011a4:	693b      	ldr	r3, [r7, #16]
 81011a6:	2b00      	cmp	r3, #0
 81011a8:	f000 8186 	beq.w	81014b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81011ac:	683b      	ldr	r3, [r7, #0]
 81011ae:	685b      	ldr	r3, [r3, #4]
 81011b0:	f003 0303 	and.w	r3, r3, #3
 81011b4:	2b01      	cmp	r3, #1
 81011b6:	d005      	beq.n	81011c4 <HAL_GPIO_Init+0x44>
 81011b8:	683b      	ldr	r3, [r7, #0]
 81011ba:	685b      	ldr	r3, [r3, #4]
 81011bc:	f003 0303 	and.w	r3, r3, #3
 81011c0:	2b02      	cmp	r3, #2
 81011c2:	d130      	bne.n	8101226 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	689b      	ldr	r3, [r3, #8]
 81011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81011ca:	69fb      	ldr	r3, [r7, #28]
 81011cc:	005b      	lsls	r3, r3, #1
 81011ce:	2203      	movs	r2, #3
 81011d0:	fa02 f303 	lsl.w	r3, r2, r3
 81011d4:	43db      	mvns	r3, r3
 81011d6:	69ba      	ldr	r2, [r7, #24]
 81011d8:	4013      	ands	r3, r2
 81011da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81011dc:	683b      	ldr	r3, [r7, #0]
 81011de:	68da      	ldr	r2, [r3, #12]
 81011e0:	69fb      	ldr	r3, [r7, #28]
 81011e2:	005b      	lsls	r3, r3, #1
 81011e4:	fa02 f303 	lsl.w	r3, r2, r3
 81011e8:	69ba      	ldr	r2, [r7, #24]
 81011ea:	4313      	orrs	r3, r2
 81011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81011ee:	687b      	ldr	r3, [r7, #4]
 81011f0:	69ba      	ldr	r2, [r7, #24]
 81011f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	685b      	ldr	r3, [r3, #4]
 81011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81011fa:	2201      	movs	r2, #1
 81011fc:	69fb      	ldr	r3, [r7, #28]
 81011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8101202:	43db      	mvns	r3, r3
 8101204:	69ba      	ldr	r2, [r7, #24]
 8101206:	4013      	ands	r3, r2
 8101208:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810120a:	683b      	ldr	r3, [r7, #0]
 810120c:	685b      	ldr	r3, [r3, #4]
 810120e:	091b      	lsrs	r3, r3, #4
 8101210:	f003 0201 	and.w	r2, r3, #1
 8101214:	69fb      	ldr	r3, [r7, #28]
 8101216:	fa02 f303 	lsl.w	r3, r2, r3
 810121a:	69ba      	ldr	r2, [r7, #24]
 810121c:	4313      	orrs	r3, r2
 810121e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	69ba      	ldr	r2, [r7, #24]
 8101224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101226:	683b      	ldr	r3, [r7, #0]
 8101228:	685b      	ldr	r3, [r3, #4]
 810122a:	f003 0303 	and.w	r3, r3, #3
 810122e:	2b03      	cmp	r3, #3
 8101230:	d017      	beq.n	8101262 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	68db      	ldr	r3, [r3, #12]
 8101236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101238:	69fb      	ldr	r3, [r7, #28]
 810123a:	005b      	lsls	r3, r3, #1
 810123c:	2203      	movs	r2, #3
 810123e:	fa02 f303 	lsl.w	r3, r2, r3
 8101242:	43db      	mvns	r3, r3
 8101244:	69ba      	ldr	r2, [r7, #24]
 8101246:	4013      	ands	r3, r2
 8101248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810124a:	683b      	ldr	r3, [r7, #0]
 810124c:	689a      	ldr	r2, [r3, #8]
 810124e:	69fb      	ldr	r3, [r7, #28]
 8101250:	005b      	lsls	r3, r3, #1
 8101252:	fa02 f303 	lsl.w	r3, r2, r3
 8101256:	69ba      	ldr	r2, [r7, #24]
 8101258:	4313      	orrs	r3, r2
 810125a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	69ba      	ldr	r2, [r7, #24]
 8101260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101262:	683b      	ldr	r3, [r7, #0]
 8101264:	685b      	ldr	r3, [r3, #4]
 8101266:	f003 0303 	and.w	r3, r3, #3
 810126a:	2b02      	cmp	r3, #2
 810126c:	d123      	bne.n	81012b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810126e:	69fb      	ldr	r3, [r7, #28]
 8101270:	08da      	lsrs	r2, r3, #3
 8101272:	687b      	ldr	r3, [r7, #4]
 8101274:	3208      	adds	r2, #8
 8101276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810127c:	69fb      	ldr	r3, [r7, #28]
 810127e:	f003 0307 	and.w	r3, r3, #7
 8101282:	009b      	lsls	r3, r3, #2
 8101284:	220f      	movs	r2, #15
 8101286:	fa02 f303 	lsl.w	r3, r2, r3
 810128a:	43db      	mvns	r3, r3
 810128c:	69ba      	ldr	r2, [r7, #24]
 810128e:	4013      	ands	r3, r2
 8101290:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101292:	683b      	ldr	r3, [r7, #0]
 8101294:	691a      	ldr	r2, [r3, #16]
 8101296:	69fb      	ldr	r3, [r7, #28]
 8101298:	f003 0307 	and.w	r3, r3, #7
 810129c:	009b      	lsls	r3, r3, #2
 810129e:	fa02 f303 	lsl.w	r3, r2, r3
 81012a2:	69ba      	ldr	r2, [r7, #24]
 81012a4:	4313      	orrs	r3, r2
 81012a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81012a8:	69fb      	ldr	r3, [r7, #28]
 81012aa:	08da      	lsrs	r2, r3, #3
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	3208      	adds	r2, #8
 81012b0:	69b9      	ldr	r1, [r7, #24]
 81012b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81012b6:	687b      	ldr	r3, [r7, #4]
 81012b8:	681b      	ldr	r3, [r3, #0]
 81012ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81012bc:	69fb      	ldr	r3, [r7, #28]
 81012be:	005b      	lsls	r3, r3, #1
 81012c0:	2203      	movs	r2, #3
 81012c2:	fa02 f303 	lsl.w	r3, r2, r3
 81012c6:	43db      	mvns	r3, r3
 81012c8:	69ba      	ldr	r2, [r7, #24]
 81012ca:	4013      	ands	r3, r2
 81012cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81012ce:	683b      	ldr	r3, [r7, #0]
 81012d0:	685b      	ldr	r3, [r3, #4]
 81012d2:	f003 0203 	and.w	r2, r3, #3
 81012d6:	69fb      	ldr	r3, [r7, #28]
 81012d8:	005b      	lsls	r3, r3, #1
 81012da:	fa02 f303 	lsl.w	r3, r2, r3
 81012de:	69ba      	ldr	r2, [r7, #24]
 81012e0:	4313      	orrs	r3, r2
 81012e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81012e4:	687b      	ldr	r3, [r7, #4]
 81012e6:	69ba      	ldr	r2, [r7, #24]
 81012e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81012ea:	683b      	ldr	r3, [r7, #0]
 81012ec:	685b      	ldr	r3, [r3, #4]
 81012ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81012f2:	2b00      	cmp	r3, #0
 81012f4:	f000 80e0 	beq.w	81014b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81012f8:	4b2f      	ldr	r3, [pc, #188]	; (81013b8 <HAL_GPIO_Init+0x238>)
 81012fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81012fe:	4a2e      	ldr	r2, [pc, #184]	; (81013b8 <HAL_GPIO_Init+0x238>)
 8101300:	f043 0302 	orr.w	r3, r3, #2
 8101304:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101308:	4b2b      	ldr	r3, [pc, #172]	; (81013b8 <HAL_GPIO_Init+0x238>)
 810130a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810130e:	f003 0302 	and.w	r3, r3, #2
 8101312:	60fb      	str	r3, [r7, #12]
 8101314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101316:	4a29      	ldr	r2, [pc, #164]	; (81013bc <HAL_GPIO_Init+0x23c>)
 8101318:	69fb      	ldr	r3, [r7, #28]
 810131a:	089b      	lsrs	r3, r3, #2
 810131c:	3302      	adds	r3, #2
 810131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101324:	69fb      	ldr	r3, [r7, #28]
 8101326:	f003 0303 	and.w	r3, r3, #3
 810132a:	009b      	lsls	r3, r3, #2
 810132c:	220f      	movs	r2, #15
 810132e:	fa02 f303 	lsl.w	r3, r2, r3
 8101332:	43db      	mvns	r3, r3
 8101334:	69ba      	ldr	r2, [r7, #24]
 8101336:	4013      	ands	r3, r2
 8101338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	4a20      	ldr	r2, [pc, #128]	; (81013c0 <HAL_GPIO_Init+0x240>)
 810133e:	4293      	cmp	r3, r2
 8101340:	d052      	beq.n	81013e8 <HAL_GPIO_Init+0x268>
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	4a1f      	ldr	r2, [pc, #124]	; (81013c4 <HAL_GPIO_Init+0x244>)
 8101346:	4293      	cmp	r3, r2
 8101348:	d031      	beq.n	81013ae <HAL_GPIO_Init+0x22e>
 810134a:	687b      	ldr	r3, [r7, #4]
 810134c:	4a1e      	ldr	r2, [pc, #120]	; (81013c8 <HAL_GPIO_Init+0x248>)
 810134e:	4293      	cmp	r3, r2
 8101350:	d02b      	beq.n	81013aa <HAL_GPIO_Init+0x22a>
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	4a1d      	ldr	r2, [pc, #116]	; (81013cc <HAL_GPIO_Init+0x24c>)
 8101356:	4293      	cmp	r3, r2
 8101358:	d025      	beq.n	81013a6 <HAL_GPIO_Init+0x226>
 810135a:	687b      	ldr	r3, [r7, #4]
 810135c:	4a1c      	ldr	r2, [pc, #112]	; (81013d0 <HAL_GPIO_Init+0x250>)
 810135e:	4293      	cmp	r3, r2
 8101360:	d01f      	beq.n	81013a2 <HAL_GPIO_Init+0x222>
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	4a1b      	ldr	r2, [pc, #108]	; (81013d4 <HAL_GPIO_Init+0x254>)
 8101366:	4293      	cmp	r3, r2
 8101368:	d019      	beq.n	810139e <HAL_GPIO_Init+0x21e>
 810136a:	687b      	ldr	r3, [r7, #4]
 810136c:	4a1a      	ldr	r2, [pc, #104]	; (81013d8 <HAL_GPIO_Init+0x258>)
 810136e:	4293      	cmp	r3, r2
 8101370:	d013      	beq.n	810139a <HAL_GPIO_Init+0x21a>
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	4a19      	ldr	r2, [pc, #100]	; (81013dc <HAL_GPIO_Init+0x25c>)
 8101376:	4293      	cmp	r3, r2
 8101378:	d00d      	beq.n	8101396 <HAL_GPIO_Init+0x216>
 810137a:	687b      	ldr	r3, [r7, #4]
 810137c:	4a18      	ldr	r2, [pc, #96]	; (81013e0 <HAL_GPIO_Init+0x260>)
 810137e:	4293      	cmp	r3, r2
 8101380:	d007      	beq.n	8101392 <HAL_GPIO_Init+0x212>
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	4a17      	ldr	r2, [pc, #92]	; (81013e4 <HAL_GPIO_Init+0x264>)
 8101386:	4293      	cmp	r3, r2
 8101388:	d101      	bne.n	810138e <HAL_GPIO_Init+0x20e>
 810138a:	2309      	movs	r3, #9
 810138c:	e02d      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 810138e:	230a      	movs	r3, #10
 8101390:	e02b      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 8101392:	2308      	movs	r3, #8
 8101394:	e029      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 8101396:	2307      	movs	r3, #7
 8101398:	e027      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 810139a:	2306      	movs	r3, #6
 810139c:	e025      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 810139e:	2305      	movs	r3, #5
 81013a0:	e023      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 81013a2:	2304      	movs	r3, #4
 81013a4:	e021      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 81013a6:	2303      	movs	r3, #3
 81013a8:	e01f      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 81013aa:	2302      	movs	r3, #2
 81013ac:	e01d      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 81013ae:	2301      	movs	r3, #1
 81013b0:	e01b      	b.n	81013ea <HAL_GPIO_Init+0x26a>
 81013b2:	bf00      	nop
 81013b4:	580000c0 	.word	0x580000c0
 81013b8:	58024400 	.word	0x58024400
 81013bc:	58000400 	.word	0x58000400
 81013c0:	58020000 	.word	0x58020000
 81013c4:	58020400 	.word	0x58020400
 81013c8:	58020800 	.word	0x58020800
 81013cc:	58020c00 	.word	0x58020c00
 81013d0:	58021000 	.word	0x58021000
 81013d4:	58021400 	.word	0x58021400
 81013d8:	58021800 	.word	0x58021800
 81013dc:	58021c00 	.word	0x58021c00
 81013e0:	58022000 	.word	0x58022000
 81013e4:	58022400 	.word	0x58022400
 81013e8:	2300      	movs	r3, #0
 81013ea:	69fa      	ldr	r2, [r7, #28]
 81013ec:	f002 0203 	and.w	r2, r2, #3
 81013f0:	0092      	lsls	r2, r2, #2
 81013f2:	4093      	lsls	r3, r2
 81013f4:	69ba      	ldr	r2, [r7, #24]
 81013f6:	4313      	orrs	r3, r2
 81013f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81013fa:	4938      	ldr	r1, [pc, #224]	; (81014dc <HAL_GPIO_Init+0x35c>)
 81013fc:	69fb      	ldr	r3, [r7, #28]
 81013fe:	089b      	lsrs	r3, r3, #2
 8101400:	3302      	adds	r3, #2
 8101402:	69ba      	ldr	r2, [r7, #24]
 8101404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810140c:	681b      	ldr	r3, [r3, #0]
 810140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101410:	693b      	ldr	r3, [r7, #16]
 8101412:	43db      	mvns	r3, r3
 8101414:	69ba      	ldr	r2, [r7, #24]
 8101416:	4013      	ands	r3, r2
 8101418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810141a:	683b      	ldr	r3, [r7, #0]
 810141c:	685b      	ldr	r3, [r3, #4]
 810141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101422:	2b00      	cmp	r3, #0
 8101424:	d003      	beq.n	810142e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101426:	69ba      	ldr	r2, [r7, #24]
 8101428:	693b      	ldr	r3, [r7, #16]
 810142a:	4313      	orrs	r3, r2
 810142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810142e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101432:	69bb      	ldr	r3, [r7, #24]
 8101434:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810143a:	685b      	ldr	r3, [r3, #4]
 810143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810143e:	693b      	ldr	r3, [r7, #16]
 8101440:	43db      	mvns	r3, r3
 8101442:	69ba      	ldr	r2, [r7, #24]
 8101444:	4013      	ands	r3, r2
 8101446:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101448:	683b      	ldr	r3, [r7, #0]
 810144a:	685b      	ldr	r3, [r3, #4]
 810144c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101450:	2b00      	cmp	r3, #0
 8101452:	d003      	beq.n	810145c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101454:	69ba      	ldr	r2, [r7, #24]
 8101456:	693b      	ldr	r3, [r7, #16]
 8101458:	4313      	orrs	r3, r2
 810145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810145c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101460:	69bb      	ldr	r3, [r7, #24]
 8101462:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101464:	697b      	ldr	r3, [r7, #20]
 8101466:	685b      	ldr	r3, [r3, #4]
 8101468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810146a:	693b      	ldr	r3, [r7, #16]
 810146c:	43db      	mvns	r3, r3
 810146e:	69ba      	ldr	r2, [r7, #24]
 8101470:	4013      	ands	r3, r2
 8101472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101474:	683b      	ldr	r3, [r7, #0]
 8101476:	685b      	ldr	r3, [r3, #4]
 8101478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810147c:	2b00      	cmp	r3, #0
 810147e:	d003      	beq.n	8101488 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101480:	69ba      	ldr	r2, [r7, #24]
 8101482:	693b      	ldr	r3, [r7, #16]
 8101484:	4313      	orrs	r3, r2
 8101486:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101488:	697b      	ldr	r3, [r7, #20]
 810148a:	69ba      	ldr	r2, [r7, #24]
 810148c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810148e:	697b      	ldr	r3, [r7, #20]
 8101490:	681b      	ldr	r3, [r3, #0]
 8101492:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101494:	693b      	ldr	r3, [r7, #16]
 8101496:	43db      	mvns	r3, r3
 8101498:	69ba      	ldr	r2, [r7, #24]
 810149a:	4013      	ands	r3, r2
 810149c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810149e:	683b      	ldr	r3, [r7, #0]
 81014a0:	685b      	ldr	r3, [r3, #4]
 81014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81014a6:	2b00      	cmp	r3, #0
 81014a8:	d003      	beq.n	81014b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81014aa:	69ba      	ldr	r2, [r7, #24]
 81014ac:	693b      	ldr	r3, [r7, #16]
 81014ae:	4313      	orrs	r3, r2
 81014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81014b2:	697b      	ldr	r3, [r7, #20]
 81014b4:	69ba      	ldr	r2, [r7, #24]
 81014b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81014b8:	69fb      	ldr	r3, [r7, #28]
 81014ba:	3301      	adds	r3, #1
 81014bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81014be:	683b      	ldr	r3, [r7, #0]
 81014c0:	681a      	ldr	r2, [r3, #0]
 81014c2:	69fb      	ldr	r3, [r7, #28]
 81014c4:	fa22 f303 	lsr.w	r3, r2, r3
 81014c8:	2b00      	cmp	r3, #0
 81014ca:	f47f ae63 	bne.w	8101194 <HAL_GPIO_Init+0x14>
  }
}
 81014ce:	bf00      	nop
 81014d0:	bf00      	nop
 81014d2:	3724      	adds	r7, #36	; 0x24
 81014d4:	46bd      	mov	sp, r7
 81014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014da:	4770      	bx	lr
 81014dc:	58000400 	.word	0x58000400

081014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81014e0:	b480      	push	{r7}
 81014e2:	b083      	sub	sp, #12
 81014e4:	af00      	add	r7, sp, #0
 81014e6:	6078      	str	r0, [r7, #4]
 81014e8:	460b      	mov	r3, r1
 81014ea:	807b      	strh	r3, [r7, #2]
 81014ec:	4613      	mov	r3, r2
 81014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81014f0:	787b      	ldrb	r3, [r7, #1]
 81014f2:	2b00      	cmp	r3, #0
 81014f4:	d003      	beq.n	81014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81014f6:	887a      	ldrh	r2, [r7, #2]
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81014fc:	e003      	b.n	8101506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81014fe:	887b      	ldrh	r3, [r7, #2]
 8101500:	041a      	lsls	r2, r3, #16
 8101502:	687b      	ldr	r3, [r7, #4]
 8101504:	619a      	str	r2, [r3, #24]
}
 8101506:	bf00      	nop
 8101508:	370c      	adds	r7, #12
 810150a:	46bd      	mov	sp, r7
 810150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101510:	4770      	bx	lr

08101512 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8101512:	b480      	push	{r7}
 8101514:	b085      	sub	sp, #20
 8101516:	af00      	add	r7, sp, #0
 8101518:	6078      	str	r0, [r7, #4]
 810151a:	460b      	mov	r3, r1
 810151c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810151e:	687b      	ldr	r3, [r7, #4]
 8101520:	695b      	ldr	r3, [r3, #20]
 8101522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101524:	887a      	ldrh	r2, [r7, #2]
 8101526:	68fb      	ldr	r3, [r7, #12]
 8101528:	4013      	ands	r3, r2
 810152a:	041a      	lsls	r2, r3, #16
 810152c:	68fb      	ldr	r3, [r7, #12]
 810152e:	43d9      	mvns	r1, r3
 8101530:	887b      	ldrh	r3, [r7, #2]
 8101532:	400b      	ands	r3, r1
 8101534:	431a      	orrs	r2, r3
 8101536:	687b      	ldr	r3, [r7, #4]
 8101538:	619a      	str	r2, [r3, #24]
}
 810153a:	bf00      	nop
 810153c:	3714      	adds	r7, #20
 810153e:	46bd      	mov	sp, r7
 8101540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101544:	4770      	bx	lr
	...

08101548 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8101548:	b480      	push	{r7}
 810154a:	b083      	sub	sp, #12
 810154c:	af00      	add	r7, sp, #0
 810154e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8101550:	4a08      	ldr	r2, [pc, #32]	; (8101574 <HAL_HSEM_FastTake+0x2c>)
 8101552:	687b      	ldr	r3, [r7, #4]
 8101554:	3320      	adds	r3, #32
 8101556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810155a:	4a07      	ldr	r2, [pc, #28]	; (8101578 <HAL_HSEM_FastTake+0x30>)
 810155c:	4293      	cmp	r3, r2
 810155e:	d101      	bne.n	8101564 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8101560:	2300      	movs	r3, #0
 8101562:	e000      	b.n	8101566 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101564:	2301      	movs	r3, #1
}
 8101566:	4618      	mov	r0, r3
 8101568:	370c      	adds	r7, #12
 810156a:	46bd      	mov	sp, r7
 810156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101570:	4770      	bx	lr
 8101572:	bf00      	nop
 8101574:	58026400 	.word	0x58026400
 8101578:	80000100 	.word	0x80000100

0810157c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810157c:	b480      	push	{r7}
 810157e:	b083      	sub	sp, #12
 8101580:	af00      	add	r7, sp, #0
 8101582:	6078      	str	r0, [r7, #4]
 8101584:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101586:	4906      	ldr	r1, [pc, #24]	; (81015a0 <HAL_HSEM_Release+0x24>)
 8101588:	683b      	ldr	r3, [r7, #0]
 810158a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101594:	bf00      	nop
 8101596:	370c      	adds	r7, #12
 8101598:	46bd      	mov	sp, r7
 810159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810159e:	4770      	bx	lr
 81015a0:	58026400 	.word	0x58026400

081015a4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81015a4:	b480      	push	{r7}
 81015a6:	b083      	sub	sp, #12
 81015a8:	af00      	add	r7, sp, #0
 81015aa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81015ac:	4b05      	ldr	r3, [pc, #20]	; (81015c4 <HAL_HSEM_ActivateNotification+0x20>)
 81015ae:	681a      	ldr	r2, [r3, #0]
 81015b0:	4904      	ldr	r1, [pc, #16]	; (81015c4 <HAL_HSEM_ActivateNotification+0x20>)
 81015b2:	687b      	ldr	r3, [r7, #4]
 81015b4:	4313      	orrs	r3, r2
 81015b6:	600b      	str	r3, [r1, #0]
#endif
}
 81015b8:	bf00      	nop
 81015ba:	370c      	adds	r7, #12
 81015bc:	46bd      	mov	sp, r7
 81015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c2:	4770      	bx	lr
 81015c4:	58026510 	.word	0x58026510

081015c8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81015c8:	b580      	push	{r7, lr}
 81015ca:	b082      	sub	sp, #8
 81015cc:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81015ce:	4b0a      	ldr	r3, [pc, #40]	; (81015f8 <HAL_HSEM_IRQHandler+0x30>)
 81015d0:	68db      	ldr	r3, [r3, #12]
 81015d2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81015d4:	4b08      	ldr	r3, [pc, #32]	; (81015f8 <HAL_HSEM_IRQHandler+0x30>)
 81015d6:	681a      	ldr	r2, [r3, #0]
 81015d8:	687b      	ldr	r3, [r7, #4]
 81015da:	43db      	mvns	r3, r3
 81015dc:	4906      	ldr	r1, [pc, #24]	; (81015f8 <HAL_HSEM_IRQHandler+0x30>)
 81015de:	4013      	ands	r3, r2
 81015e0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81015e2:	4a05      	ldr	r2, [pc, #20]	; (81015f8 <HAL_HSEM_IRQHandler+0x30>)
 81015e4:	687b      	ldr	r3, [r7, #4]
 81015e6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81015e8:	6878      	ldr	r0, [r7, #4]
 81015ea:	f005 fa3b 	bl	8106a64 <HAL_HSEM_FreeCallback>
}
 81015ee:	bf00      	nop
 81015f0:	3708      	adds	r7, #8
 81015f2:	46bd      	mov	sp, r7
 81015f4:	bd80      	pop	{r7, pc}
 81015f6:	bf00      	nop
 81015f8:	58026510 	.word	0x58026510

081015fc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81015fc:	b580      	push	{r7, lr}
 81015fe:	b084      	sub	sp, #16
 8101600:	af00      	add	r7, sp, #0
 8101602:	60f8      	str	r0, [r7, #12]
 8101604:	460b      	mov	r3, r1
 8101606:	607a      	str	r2, [r7, #4]
 8101608:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810160a:	4b37      	ldr	r3, [pc, #220]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810160c:	681b      	ldr	r3, [r3, #0]
 810160e:	f023 0201 	bic.w	r2, r3, #1
 8101612:	4935      	ldr	r1, [pc, #212]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101614:	68fb      	ldr	r3, [r7, #12]
 8101616:	4313      	orrs	r3, r2
 8101618:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810161a:	687b      	ldr	r3, [r7, #4]
 810161c:	2b00      	cmp	r3, #0
 810161e:	d123      	bne.n	8101668 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101620:	f7ff fd9a 	bl	8101158 <HAL_GetCurrentCPUID>
 8101624:	4603      	mov	r3, r0
 8101626:	2b03      	cmp	r3, #3
 8101628:	d158      	bne.n	81016dc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810162a:	4b2f      	ldr	r3, [pc, #188]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810162c:	691b      	ldr	r3, [r3, #16]
 810162e:	4a2e      	ldr	r2, [pc, #184]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101630:	f023 0301 	bic.w	r3, r3, #1
 8101634:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101636:	4b2d      	ldr	r3, [pc, #180]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101638:	691b      	ldr	r3, [r3, #16]
 810163a:	4a2c      	ldr	r2, [pc, #176]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 810163c:	f043 0304 	orr.w	r3, r3, #4
 8101640:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101642:	f3bf 8f4f 	dsb	sy
}
 8101646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101648:	f3bf 8f6f 	isb	sy
}
 810164c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810164e:	7afb      	ldrb	r3, [r7, #11]
 8101650:	2b01      	cmp	r3, #1
 8101652:	d101      	bne.n	8101658 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101654:	bf30      	wfi
 8101656:	e000      	b.n	810165a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101658:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810165a:	4b24      	ldr	r3, [pc, #144]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 810165c:	691b      	ldr	r3, [r3, #16]
 810165e:	4a23      	ldr	r2, [pc, #140]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101660:	f023 0304 	bic.w	r3, r3, #4
 8101664:	6113      	str	r3, [r2, #16]
 8101666:	e03c      	b.n	81016e2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	2b01      	cmp	r3, #1
 810166c:	d123      	bne.n	81016b6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810166e:	f7ff fd73 	bl	8101158 <HAL_GetCurrentCPUID>
 8101672:	4603      	mov	r3, r0
 8101674:	2b01      	cmp	r3, #1
 8101676:	d133      	bne.n	81016e0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101678:	4b1b      	ldr	r3, [pc, #108]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810167a:	695b      	ldr	r3, [r3, #20]
 810167c:	4a1a      	ldr	r2, [pc, #104]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810167e:	f023 0302 	bic.w	r3, r3, #2
 8101682:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101684:	4b19      	ldr	r3, [pc, #100]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101686:	691b      	ldr	r3, [r3, #16]
 8101688:	4a18      	ldr	r2, [pc, #96]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 810168a:	f043 0304 	orr.w	r3, r3, #4
 810168e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101690:	f3bf 8f4f 	dsb	sy
}
 8101694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101696:	f3bf 8f6f 	isb	sy
}
 810169a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810169c:	7afb      	ldrb	r3, [r7, #11]
 810169e:	2b01      	cmp	r3, #1
 81016a0:	d101      	bne.n	81016a6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81016a2:	bf30      	wfi
 81016a4:	e000      	b.n	81016a8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81016a6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016a8:	4b10      	ldr	r3, [pc, #64]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016aa:	691b      	ldr	r3, [r3, #16]
 81016ac:	4a0f      	ldr	r2, [pc, #60]	; (81016ec <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016ae:	f023 0304 	bic.w	r3, r3, #4
 81016b2:	6113      	str	r3, [r2, #16]
 81016b4:	e015      	b.n	81016e2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016b6:	f7ff fd4f 	bl	8101158 <HAL_GetCurrentCPUID>
 81016ba:	4603      	mov	r3, r0
 81016bc:	2b03      	cmp	r3, #3
 81016be:	d106      	bne.n	81016ce <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81016c0:	4b09      	ldr	r3, [pc, #36]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016c2:	691b      	ldr	r3, [r3, #16]
 81016c4:	4a08      	ldr	r2, [pc, #32]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016c6:	f023 0304 	bic.w	r3, r3, #4
 81016ca:	6113      	str	r3, [r2, #16]
 81016cc:	e009      	b.n	81016e2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81016ce:	4b06      	ldr	r3, [pc, #24]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016d0:	695b      	ldr	r3, [r3, #20]
 81016d2:	4a05      	ldr	r2, [pc, #20]	; (81016e8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016d4:	f023 0304 	bic.w	r3, r3, #4
 81016d8:	6153      	str	r3, [r2, #20]
 81016da:	e002      	b.n	81016e2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016dc:	bf00      	nop
 81016de:	e000      	b.n	81016e2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016e0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81016e2:	3710      	adds	r7, #16
 81016e4:	46bd      	mov	sp, r7
 81016e6:	bd80      	pop	{r7, pc}
 81016e8:	58024800 	.word	0x58024800
 81016ec:	e000ed00 	.word	0xe000ed00

081016f0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81016f0:	b580      	push	{r7, lr}
 81016f2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016f4:	f7ff fd30 	bl	8101158 <HAL_GetCurrentCPUID>
 81016f8:	4603      	mov	r3, r0
 81016fa:	2b03      	cmp	r3, #3
 81016fc:	d101      	bne.n	8101702 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81016fe:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101700:	e001      	b.n	8101706 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101702:	bf40      	sev
    __WFE ();
 8101704:	bf20      	wfe
}
 8101706:	bf00      	nop
 8101708:	bd80      	pop	{r7, pc}
	...

0810170c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810170c:	b480      	push	{r7}
 810170e:	b089      	sub	sp, #36	; 0x24
 8101710:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101712:	4bb3      	ldr	r3, [pc, #716]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101714:	691b      	ldr	r3, [r3, #16]
 8101716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810171a:	2b18      	cmp	r3, #24
 810171c:	f200 8155 	bhi.w	81019ca <HAL_RCC_GetSysClockFreq+0x2be>
 8101720:	a201      	add	r2, pc, #4	; (adr r2, 8101728 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101726:	bf00      	nop
 8101728:	0810178d 	.word	0x0810178d
 810172c:	081019cb 	.word	0x081019cb
 8101730:	081019cb 	.word	0x081019cb
 8101734:	081019cb 	.word	0x081019cb
 8101738:	081019cb 	.word	0x081019cb
 810173c:	081019cb 	.word	0x081019cb
 8101740:	081019cb 	.word	0x081019cb
 8101744:	081019cb 	.word	0x081019cb
 8101748:	081017b3 	.word	0x081017b3
 810174c:	081019cb 	.word	0x081019cb
 8101750:	081019cb 	.word	0x081019cb
 8101754:	081019cb 	.word	0x081019cb
 8101758:	081019cb 	.word	0x081019cb
 810175c:	081019cb 	.word	0x081019cb
 8101760:	081019cb 	.word	0x081019cb
 8101764:	081019cb 	.word	0x081019cb
 8101768:	081017b9 	.word	0x081017b9
 810176c:	081019cb 	.word	0x081019cb
 8101770:	081019cb 	.word	0x081019cb
 8101774:	081019cb 	.word	0x081019cb
 8101778:	081019cb 	.word	0x081019cb
 810177c:	081019cb 	.word	0x081019cb
 8101780:	081019cb 	.word	0x081019cb
 8101784:	081019cb 	.word	0x081019cb
 8101788:	081017bf 	.word	0x081017bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810178c:	4b94      	ldr	r3, [pc, #592]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810178e:	681b      	ldr	r3, [r3, #0]
 8101790:	f003 0320 	and.w	r3, r3, #32
 8101794:	2b00      	cmp	r3, #0
 8101796:	d009      	beq.n	81017ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101798:	4b91      	ldr	r3, [pc, #580]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	08db      	lsrs	r3, r3, #3
 810179e:	f003 0303 	and.w	r3, r3, #3
 81017a2:	4a90      	ldr	r2, [pc, #576]	; (81019e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017a4:	fa22 f303 	lsr.w	r3, r2, r3
 81017a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81017aa:	e111      	b.n	81019d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81017ac:	4b8d      	ldr	r3, [pc, #564]	; (81019e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017ae:	61bb      	str	r3, [r7, #24]
    break;
 81017b0:	e10e      	b.n	81019d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81017b2:	4b8d      	ldr	r3, [pc, #564]	; (81019e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81017b4:	61bb      	str	r3, [r7, #24]
    break;
 81017b6:	e10b      	b.n	81019d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81017b8:	4b8c      	ldr	r3, [pc, #560]	; (81019ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 81017ba:	61bb      	str	r3, [r7, #24]
    break;
 81017bc:	e108      	b.n	81019d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81017be:	4b88      	ldr	r3, [pc, #544]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81017c2:	f003 0303 	and.w	r3, r3, #3
 81017c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81017c8:	4b85      	ldr	r3, [pc, #532]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81017cc:	091b      	lsrs	r3, r3, #4
 81017ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81017d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81017d4:	4b82      	ldr	r3, [pc, #520]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017d8:	f003 0301 	and.w	r3, r3, #1
 81017dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81017de:	4b80      	ldr	r3, [pc, #512]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81017e2:	08db      	lsrs	r3, r3, #3
 81017e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81017e8:	68fa      	ldr	r2, [r7, #12]
 81017ea:	fb02 f303 	mul.w	r3, r2, r3
 81017ee:	ee07 3a90 	vmov	s15, r3
 81017f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81017f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81017fa:	693b      	ldr	r3, [r7, #16]
 81017fc:	2b00      	cmp	r3, #0
 81017fe:	f000 80e1 	beq.w	81019c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101802:	697b      	ldr	r3, [r7, #20]
 8101804:	2b02      	cmp	r3, #2
 8101806:	f000 8083 	beq.w	8101910 <HAL_RCC_GetSysClockFreq+0x204>
 810180a:	697b      	ldr	r3, [r7, #20]
 810180c:	2b02      	cmp	r3, #2
 810180e:	f200 80a1 	bhi.w	8101954 <HAL_RCC_GetSysClockFreq+0x248>
 8101812:	697b      	ldr	r3, [r7, #20]
 8101814:	2b00      	cmp	r3, #0
 8101816:	d003      	beq.n	8101820 <HAL_RCC_GetSysClockFreq+0x114>
 8101818:	697b      	ldr	r3, [r7, #20]
 810181a:	2b01      	cmp	r3, #1
 810181c:	d056      	beq.n	81018cc <HAL_RCC_GetSysClockFreq+0x1c0>
 810181e:	e099      	b.n	8101954 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101820:	4b6f      	ldr	r3, [pc, #444]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	f003 0320 	and.w	r3, r3, #32
 8101828:	2b00      	cmp	r3, #0
 810182a:	d02d      	beq.n	8101888 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810182c:	4b6c      	ldr	r3, [pc, #432]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	08db      	lsrs	r3, r3, #3
 8101832:	f003 0303 	and.w	r3, r3, #3
 8101836:	4a6b      	ldr	r2, [pc, #428]	; (81019e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101838:	fa22 f303 	lsr.w	r3, r2, r3
 810183c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	ee07 3a90 	vmov	s15, r3
 8101844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101848:	693b      	ldr	r3, [r7, #16]
 810184a:	ee07 3a90 	vmov	s15, r3
 810184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101856:	4b62      	ldr	r3, [pc, #392]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810185a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810185e:	ee07 3a90 	vmov	s15, r3
 8101862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101866:	ed97 6a02 	vldr	s12, [r7, #8]
 810186a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81019f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810186e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810187a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101882:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101886:	e087      	b.n	8101998 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101888:	693b      	ldr	r3, [r7, #16]
 810188a:	ee07 3a90 	vmov	s15, r3
 810188e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101892:	eddf 6a58 	vldr	s13, [pc, #352]	; 81019f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810189a:	4b51      	ldr	r3, [pc, #324]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810189e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018a2:	ee07 3a90 	vmov	s15, r3
 81018a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81018ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 81019f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81018be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81018ca:	e065      	b.n	8101998 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81018cc:	693b      	ldr	r3, [r7, #16]
 81018ce:	ee07 3a90 	vmov	s15, r3
 81018d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81019f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81018da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018de:	4b40      	ldr	r3, [pc, #256]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81018e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018e6:	ee07 3a90 	vmov	s15, r3
 81018ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81018f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81019f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81018f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101906:	ee67 7a27 	vmul.f32	s15, s14, s15
 810190a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810190e:	e043      	b.n	8101998 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101910:	693b      	ldr	r3, [r7, #16]
 8101912:	ee07 3a90 	vmov	s15, r3
 8101916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810191a:	eddf 6a38 	vldr	s13, [pc, #224]	; 81019fc <HAL_RCC_GetSysClockFreq+0x2f0>
 810191e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101922:	4b2f      	ldr	r3, [pc, #188]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810192a:	ee07 3a90 	vmov	s15, r3
 810192e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101932:	ed97 6a02 	vldr	s12, [r7, #8]
 8101936:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81019f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810193a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810193e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810194e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101952:	e021      	b.n	8101998 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101954:	693b      	ldr	r3, [r7, #16]
 8101956:	ee07 3a90 	vmov	s15, r3
 810195a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810195e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81019f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101966:	4b1e      	ldr	r3, [pc, #120]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810196a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810196e:	ee07 3a90 	vmov	s15, r3
 8101972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101976:	ed97 6a02 	vldr	s12, [r7, #8]
 810197a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81019f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810197e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810198a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810198e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101996:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101998:	4b11      	ldr	r3, [pc, #68]	; (81019e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810199c:	0a5b      	lsrs	r3, r3, #9
 810199e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81019a2:	3301      	adds	r3, #1
 81019a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81019a6:	683b      	ldr	r3, [r7, #0]
 81019a8:	ee07 3a90 	vmov	s15, r3
 81019ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81019b0:	edd7 6a07 	vldr	s13, [r7, #28]
 81019b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81019b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81019bc:	ee17 3a90 	vmov	r3, s15
 81019c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81019c2:	e005      	b.n	81019d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81019c4:	2300      	movs	r3, #0
 81019c6:	61bb      	str	r3, [r7, #24]
    break;
 81019c8:	e002      	b.n	81019d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81019ca:	4b07      	ldr	r3, [pc, #28]	; (81019e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81019cc:	61bb      	str	r3, [r7, #24]
    break;
 81019ce:	bf00      	nop
  }

  return sysclockfreq;
 81019d0:	69bb      	ldr	r3, [r7, #24]
}
 81019d2:	4618      	mov	r0, r3
 81019d4:	3724      	adds	r7, #36	; 0x24
 81019d6:	46bd      	mov	sp, r7
 81019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019dc:	4770      	bx	lr
 81019de:	bf00      	nop
 81019e0:	58024400 	.word	0x58024400
 81019e4:	03d09000 	.word	0x03d09000
 81019e8:	003d0900 	.word	0x003d0900
 81019ec:	017d7840 	.word	0x017d7840
 81019f0:	46000000 	.word	0x46000000
 81019f4:	4c742400 	.word	0x4c742400
 81019f8:	4a742400 	.word	0x4a742400
 81019fc:	4bbebc20 	.word	0x4bbebc20

08101a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101a00:	b580      	push	{r7, lr}
 8101a02:	b082      	sub	sp, #8
 8101a04:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101a06:	f7ff fe81 	bl	810170c <HAL_RCC_GetSysClockFreq>
 8101a0a:	4602      	mov	r2, r0
 8101a0c:	4b11      	ldr	r3, [pc, #68]	; (8101a54 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a0e:	699b      	ldr	r3, [r3, #24]
 8101a10:	0a1b      	lsrs	r3, r3, #8
 8101a12:	f003 030f 	and.w	r3, r3, #15
 8101a16:	4910      	ldr	r1, [pc, #64]	; (8101a58 <HAL_RCC_GetHCLKFreq+0x58>)
 8101a18:	5ccb      	ldrb	r3, [r1, r3]
 8101a1a:	f003 031f 	and.w	r3, r3, #31
 8101a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8101a22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a24:	4b0b      	ldr	r3, [pc, #44]	; (8101a54 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a26:	699b      	ldr	r3, [r3, #24]
 8101a28:	f003 030f 	and.w	r3, r3, #15
 8101a2c:	4a0a      	ldr	r2, [pc, #40]	; (8101a58 <HAL_RCC_GetHCLKFreq+0x58>)
 8101a2e:	5cd3      	ldrb	r3, [r2, r3]
 8101a30:	f003 031f 	and.w	r3, r3, #31
 8101a34:	687a      	ldr	r2, [r7, #4]
 8101a36:	fa22 f303 	lsr.w	r3, r2, r3
 8101a3a:	4a08      	ldr	r2, [pc, #32]	; (8101a5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a3c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a3e:	4b07      	ldr	r3, [pc, #28]	; (8101a5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	4a07      	ldr	r2, [pc, #28]	; (8101a60 <HAL_RCC_GetHCLKFreq+0x60>)
 8101a44:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101a46:	4b05      	ldr	r3, [pc, #20]	; (8101a5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a48:	681b      	ldr	r3, [r3, #0]
}
 8101a4a:	4618      	mov	r0, r3
 8101a4c:	3708      	adds	r7, #8
 8101a4e:	46bd      	mov	sp, r7
 8101a50:	bd80      	pop	{r7, pc}
 8101a52:	bf00      	nop
 8101a54:	58024400 	.word	0x58024400
 8101a58:	08108144 	.word	0x08108144
 8101a5c:	10000004 	.word	0x10000004
 8101a60:	10000000 	.word	0x10000000

08101a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101a64:	b580      	push	{r7, lr}
 8101a66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101a68:	f7ff ffca 	bl	8101a00 <HAL_RCC_GetHCLKFreq>
 8101a6c:	4602      	mov	r2, r0
 8101a6e:	4b06      	ldr	r3, [pc, #24]	; (8101a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101a70:	69db      	ldr	r3, [r3, #28]
 8101a72:	091b      	lsrs	r3, r3, #4
 8101a74:	f003 0307 	and.w	r3, r3, #7
 8101a78:	4904      	ldr	r1, [pc, #16]	; (8101a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8101a7a:	5ccb      	ldrb	r3, [r1, r3]
 8101a7c:	f003 031f 	and.w	r3, r3, #31
 8101a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101a84:	4618      	mov	r0, r3
 8101a86:	bd80      	pop	{r7, pc}
 8101a88:	58024400 	.word	0x58024400
 8101a8c:	08108144 	.word	0x08108144

08101a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101a90:	b580      	push	{r7, lr}
 8101a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101a94:	f7ff ffb4 	bl	8101a00 <HAL_RCC_GetHCLKFreq>
 8101a98:	4602      	mov	r2, r0
 8101a9a:	4b06      	ldr	r3, [pc, #24]	; (8101ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101a9c:	69db      	ldr	r3, [r3, #28]
 8101a9e:	0a1b      	lsrs	r3, r3, #8
 8101aa0:	f003 0307 	and.w	r3, r3, #7
 8101aa4:	4904      	ldr	r1, [pc, #16]	; (8101ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101aa6:	5ccb      	ldrb	r3, [r1, r3]
 8101aa8:	f003 031f 	and.w	r3, r3, #31
 8101aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101ab0:	4618      	mov	r0, r3
 8101ab2:	bd80      	pop	{r7, pc}
 8101ab4:	58024400 	.word	0x58024400
 8101ab8:	08108144 	.word	0x08108144

08101abc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101abc:	b580      	push	{r7, lr}
 8101abe:	b086      	sub	sp, #24
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101ac4:	2300      	movs	r3, #0
 8101ac6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101ac8:	2300      	movs	r3, #0
 8101aca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	681b      	ldr	r3, [r3, #0]
 8101ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101ad4:	2b00      	cmp	r3, #0
 8101ad6:	d03f      	beq.n	8101b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101adc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101ae0:	d02a      	beq.n	8101b38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101ae6:	d824      	bhi.n	8101b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101aec:	d018      	beq.n	8101b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101aee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101af2:	d81e      	bhi.n	8101b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101af4:	2b00      	cmp	r3, #0
 8101af6:	d003      	beq.n	8101b00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8101af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101afc:	d007      	beq.n	8101b0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8101afe:	e018      	b.n	8101b32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b00:	4ba3      	ldr	r3, [pc, #652]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101b04:	4aa2      	ldr	r2, [pc, #648]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101b0c:	e015      	b.n	8101b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	3304      	adds	r3, #4
 8101b12:	2102      	movs	r1, #2
 8101b14:	4618      	mov	r0, r3
 8101b16:	f001 f9fd 	bl	8102f14 <RCCEx_PLL2_Config>
 8101b1a:	4603      	mov	r3, r0
 8101b1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101b1e:	e00c      	b.n	8101b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101b20:	687b      	ldr	r3, [r7, #4]
 8101b22:	3324      	adds	r3, #36	; 0x24
 8101b24:	2102      	movs	r1, #2
 8101b26:	4618      	mov	r0, r3
 8101b28:	f001 faa6 	bl	8103078 <RCCEx_PLL3_Config>
 8101b2c:	4603      	mov	r3, r0
 8101b2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101b30:	e003      	b.n	8101b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101b32:	2301      	movs	r3, #1
 8101b34:	75fb      	strb	r3, [r7, #23]
      break;
 8101b36:	e000      	b.n	8101b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8101b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b3a:	7dfb      	ldrb	r3, [r7, #23]
 8101b3c:	2b00      	cmp	r3, #0
 8101b3e:	d109      	bne.n	8101b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101b40:	4b93      	ldr	r3, [pc, #588]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101b48:	687b      	ldr	r3, [r7, #4]
 8101b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101b4c:	4990      	ldr	r1, [pc, #576]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b4e:	4313      	orrs	r3, r2
 8101b50:	650b      	str	r3, [r1, #80]	; 0x50
 8101b52:	e001      	b.n	8101b58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b54:	7dfb      	ldrb	r3, [r7, #23]
 8101b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	681b      	ldr	r3, [r3, #0]
 8101b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101b60:	2b00      	cmp	r3, #0
 8101b62:	d03d      	beq.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101b68:	2b04      	cmp	r3, #4
 8101b6a:	d826      	bhi.n	8101bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101b6c:	a201      	add	r2, pc, #4	; (adr r2, 8101b74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8101b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101b72:	bf00      	nop
 8101b74:	08101b89 	.word	0x08101b89
 8101b78:	08101b97 	.word	0x08101b97
 8101b7c:	08101ba9 	.word	0x08101ba9
 8101b80:	08101bc1 	.word	0x08101bc1
 8101b84:	08101bc1 	.word	0x08101bc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b88:	4b81      	ldr	r3, [pc, #516]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101b8c:	4a80      	ldr	r2, [pc, #512]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101b94:	e015      	b.n	8101bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	3304      	adds	r3, #4
 8101b9a:	2100      	movs	r1, #0
 8101b9c:	4618      	mov	r0, r3
 8101b9e:	f001 f9b9 	bl	8102f14 <RCCEx_PLL2_Config>
 8101ba2:	4603      	mov	r3, r0
 8101ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101ba6:	e00c      	b.n	8101bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	3324      	adds	r3, #36	; 0x24
 8101bac:	2100      	movs	r1, #0
 8101bae:	4618      	mov	r0, r3
 8101bb0:	f001 fa62 	bl	8103078 <RCCEx_PLL3_Config>
 8101bb4:	4603      	mov	r3, r0
 8101bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101bb8:	e003      	b.n	8101bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101bba:	2301      	movs	r3, #1
 8101bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8101bbe:	e000      	b.n	8101bc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101bc2:	7dfb      	ldrb	r3, [r7, #23]
 8101bc4:	2b00      	cmp	r3, #0
 8101bc6:	d109      	bne.n	8101bdc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101bc8:	4b71      	ldr	r3, [pc, #452]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101bcc:	f023 0207 	bic.w	r2, r3, #7
 8101bd0:	687b      	ldr	r3, [r7, #4]
 8101bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101bd4:	496e      	ldr	r1, [pc, #440]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101bd6:	4313      	orrs	r3, r2
 8101bd8:	650b      	str	r3, [r1, #80]	; 0x50
 8101bda:	e001      	b.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bdc:	7dfb      	ldrb	r3, [r7, #23]
 8101bde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101be8:	2b00      	cmp	r3, #0
 8101bea:	d042      	beq.n	8101c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101bf4:	d02b      	beq.n	8101c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8101bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101bfa:	d825      	bhi.n	8101c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101bfc:	2bc0      	cmp	r3, #192	; 0xc0
 8101bfe:	d028      	beq.n	8101c52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101c00:	2bc0      	cmp	r3, #192	; 0xc0
 8101c02:	d821      	bhi.n	8101c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101c04:	2b80      	cmp	r3, #128	; 0x80
 8101c06:	d016      	beq.n	8101c36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8101c08:	2b80      	cmp	r3, #128	; 0x80
 8101c0a:	d81d      	bhi.n	8101c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101c0c:	2b00      	cmp	r3, #0
 8101c0e:	d002      	beq.n	8101c16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8101c10:	2b40      	cmp	r3, #64	; 0x40
 8101c12:	d007      	beq.n	8101c24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101c14:	e018      	b.n	8101c48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c16:	4b5e      	ldr	r3, [pc, #376]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c1a:	4a5d      	ldr	r2, [pc, #372]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101c22:	e017      	b.n	8101c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	3304      	adds	r3, #4
 8101c28:	2100      	movs	r1, #0
 8101c2a:	4618      	mov	r0, r3
 8101c2c:	f001 f972 	bl	8102f14 <RCCEx_PLL2_Config>
 8101c30:	4603      	mov	r3, r0
 8101c32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101c34:	e00e      	b.n	8101c54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	3324      	adds	r3, #36	; 0x24
 8101c3a:	2100      	movs	r1, #0
 8101c3c:	4618      	mov	r0, r3
 8101c3e:	f001 fa1b 	bl	8103078 <RCCEx_PLL3_Config>
 8101c42:	4603      	mov	r3, r0
 8101c44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101c46:	e005      	b.n	8101c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101c48:	2301      	movs	r3, #1
 8101c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8101c4c:	e002      	b.n	8101c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101c4e:	bf00      	nop
 8101c50:	e000      	b.n	8101c54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c54:	7dfb      	ldrb	r3, [r7, #23]
 8101c56:	2b00      	cmp	r3, #0
 8101c58:	d109      	bne.n	8101c6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101c5a:	4b4d      	ldr	r3, [pc, #308]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101c5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101c66:	494a      	ldr	r1, [pc, #296]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101c68:	4313      	orrs	r3, r2
 8101c6a:	650b      	str	r3, [r1, #80]	; 0x50
 8101c6c:	e001      	b.n	8101c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c6e:	7dfb      	ldrb	r3, [r7, #23]
 8101c70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	681b      	ldr	r3, [r3, #0]
 8101c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101c7a:	2b00      	cmp	r3, #0
 8101c7c:	d049      	beq.n	8101d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101c88:	d030      	beq.n	8101cec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8101c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101c8e:	d82a      	bhi.n	8101ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101c90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101c94:	d02c      	beq.n	8101cf0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101c96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101c9a:	d824      	bhi.n	8101ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101ca0:	d018      	beq.n	8101cd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8101ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101ca6:	d81e      	bhi.n	8101ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101ca8:	2b00      	cmp	r3, #0
 8101caa:	d003      	beq.n	8101cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101cb0:	d007      	beq.n	8101cc2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8101cb2:	e018      	b.n	8101ce6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101cb4:	4b36      	ldr	r3, [pc, #216]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101cb8:	4a35      	ldr	r2, [pc, #212]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101cc0:	e017      	b.n	8101cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	3304      	adds	r3, #4
 8101cc6:	2100      	movs	r1, #0
 8101cc8:	4618      	mov	r0, r3
 8101cca:	f001 f923 	bl	8102f14 <RCCEx_PLL2_Config>
 8101cce:	4603      	mov	r3, r0
 8101cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101cd2:	e00e      	b.n	8101cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	3324      	adds	r3, #36	; 0x24
 8101cd8:	2100      	movs	r1, #0
 8101cda:	4618      	mov	r0, r3
 8101cdc:	f001 f9cc 	bl	8103078 <RCCEx_PLL3_Config>
 8101ce0:	4603      	mov	r3, r0
 8101ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101ce4:	e005      	b.n	8101cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101ce6:	2301      	movs	r3, #1
 8101ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8101cea:	e002      	b.n	8101cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101cec:	bf00      	nop
 8101cee:	e000      	b.n	8101cf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101cf2:	7dfb      	ldrb	r3, [r7, #23]
 8101cf4:	2b00      	cmp	r3, #0
 8101cf6:	d10a      	bne.n	8101d0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101cf8:	4b25      	ldr	r3, [pc, #148]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101cfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101d06:	4922      	ldr	r1, [pc, #136]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101d08:	4313      	orrs	r3, r2
 8101d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8101d0c:	e001      	b.n	8101d12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d0e:	7dfb      	ldrb	r3, [r7, #23]
 8101d10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101d1a:	2b00      	cmp	r3, #0
 8101d1c:	d04b      	beq.n	8101db6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8101d1e:	687b      	ldr	r3, [r7, #4]
 8101d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101d28:	d030      	beq.n	8101d8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8101d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101d2e:	d82a      	bhi.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101d34:	d02e      	beq.n	8101d94 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8101d36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101d3a:	d824      	bhi.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101d40:	d018      	beq.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8101d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101d46:	d81e      	bhi.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101d48:	2b00      	cmp	r3, #0
 8101d4a:	d003      	beq.n	8101d54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101d50:	d007      	beq.n	8101d62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8101d52:	e018      	b.n	8101d86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d54:	4b0e      	ldr	r3, [pc, #56]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d58:	4a0d      	ldr	r2, [pc, #52]	; (8101d90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8101d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101d60:	e019      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	3304      	adds	r3, #4
 8101d66:	2100      	movs	r1, #0
 8101d68:	4618      	mov	r0, r3
 8101d6a:	f001 f8d3 	bl	8102f14 <RCCEx_PLL2_Config>
 8101d6e:	4603      	mov	r3, r0
 8101d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101d72:	e010      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	3324      	adds	r3, #36	; 0x24
 8101d78:	2100      	movs	r1, #0
 8101d7a:	4618      	mov	r0, r3
 8101d7c:	f001 f97c 	bl	8103078 <RCCEx_PLL3_Config>
 8101d80:	4603      	mov	r3, r0
 8101d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101d84:	e007      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101d86:	2301      	movs	r3, #1
 8101d88:	75fb      	strb	r3, [r7, #23]
      break;
 8101d8a:	e004      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8101d8c:	bf00      	nop
 8101d8e:	e002      	b.n	8101d96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8101d90:	58024400 	.word	0x58024400
      break;
 8101d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d96:	7dfb      	ldrb	r3, [r7, #23]
 8101d98:	2b00      	cmp	r3, #0
 8101d9a:	d10a      	bne.n	8101db2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101d9c:	4b99      	ldr	r3, [pc, #612]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101da0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101daa:	4996      	ldr	r1, [pc, #600]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101dac:	4313      	orrs	r3, r2
 8101dae:	658b      	str	r3, [r1, #88]	; 0x58
 8101db0:	e001      	b.n	8101db6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101db2:	7dfb      	ldrb	r3, [r7, #23]
 8101db4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101dbe:	2b00      	cmp	r3, #0
 8101dc0:	d032      	beq.n	8101e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101dc6:	2b30      	cmp	r3, #48	; 0x30
 8101dc8:	d01c      	beq.n	8101e04 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8101dca:	2b30      	cmp	r3, #48	; 0x30
 8101dcc:	d817      	bhi.n	8101dfe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101dce:	2b20      	cmp	r3, #32
 8101dd0:	d00c      	beq.n	8101dec <HAL_RCCEx_PeriphCLKConfig+0x330>
 8101dd2:	2b20      	cmp	r3, #32
 8101dd4:	d813      	bhi.n	8101dfe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8101dd6:	2b00      	cmp	r3, #0
 8101dd8:	d016      	beq.n	8101e08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8101dda:	2b10      	cmp	r3, #16
 8101ddc:	d10f      	bne.n	8101dfe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101dde:	4b89      	ldr	r3, [pc, #548]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101de2:	4a88      	ldr	r2, [pc, #544]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101dea:	e00e      	b.n	8101e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101dec:	687b      	ldr	r3, [r7, #4]
 8101dee:	3304      	adds	r3, #4
 8101df0:	2102      	movs	r1, #2
 8101df2:	4618      	mov	r0, r3
 8101df4:	f001 f88e 	bl	8102f14 <RCCEx_PLL2_Config>
 8101df8:	4603      	mov	r3, r0
 8101dfa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101dfc:	e005      	b.n	8101e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101dfe:	2301      	movs	r3, #1
 8101e00:	75fb      	strb	r3, [r7, #23]
      break;
 8101e02:	e002      	b.n	8101e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101e04:	bf00      	nop
 8101e06:	e000      	b.n	8101e0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8101e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e0a:	7dfb      	ldrb	r3, [r7, #23]
 8101e0c:	2b00      	cmp	r3, #0
 8101e0e:	d109      	bne.n	8101e24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101e10:	4b7c      	ldr	r3, [pc, #496]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101e1c:	4979      	ldr	r1, [pc, #484]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101e1e:	4313      	orrs	r3, r2
 8101e20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101e22:	e001      	b.n	8101e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e24:	7dfb      	ldrb	r3, [r7, #23]
 8101e26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	681b      	ldr	r3, [r3, #0]
 8101e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101e30:	2b00      	cmp	r3, #0
 8101e32:	d047      	beq.n	8101ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101e3c:	d030      	beq.n	8101ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8101e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101e42:	d82a      	bhi.n	8101e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101e44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101e48:	d02c      	beq.n	8101ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8101e4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101e4e:	d824      	bhi.n	8101e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101e54:	d018      	beq.n	8101e88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8101e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101e5a:	d81e      	bhi.n	8101e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8101e5c:	2b00      	cmp	r3, #0
 8101e5e:	d003      	beq.n	8101e68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8101e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101e64:	d007      	beq.n	8101e76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8101e66:	e018      	b.n	8101e9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e68:	4b66      	ldr	r3, [pc, #408]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e6c:	4a65      	ldr	r2, [pc, #404]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101e74:	e017      	b.n	8101ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101e76:	687b      	ldr	r3, [r7, #4]
 8101e78:	3304      	adds	r3, #4
 8101e7a:	2100      	movs	r1, #0
 8101e7c:	4618      	mov	r0, r3
 8101e7e:	f001 f849 	bl	8102f14 <RCCEx_PLL2_Config>
 8101e82:	4603      	mov	r3, r0
 8101e84:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101e86:	e00e      	b.n	8101ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	3324      	adds	r3, #36	; 0x24
 8101e8c:	2100      	movs	r1, #0
 8101e8e:	4618      	mov	r0, r3
 8101e90:	f001 f8f2 	bl	8103078 <RCCEx_PLL3_Config>
 8101e94:	4603      	mov	r3, r0
 8101e96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101e98:	e005      	b.n	8101ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e9a:	2301      	movs	r3, #1
 8101e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8101e9e:	e002      	b.n	8101ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8101ea0:	bf00      	nop
 8101ea2:	e000      	b.n	8101ea6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8101ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ea6:	7dfb      	ldrb	r3, [r7, #23]
 8101ea8:	2b00      	cmp	r3, #0
 8101eaa:	d109      	bne.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101eac:	4b55      	ldr	r3, [pc, #340]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101eb0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101eb8:	4952      	ldr	r1, [pc, #328]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101eba:	4313      	orrs	r3, r2
 8101ebc:	650b      	str	r3, [r1, #80]	; 0x50
 8101ebe:	e001      	b.n	8101ec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ec0:	7dfb      	ldrb	r3, [r7, #23]
 8101ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101ecc:	2b00      	cmp	r3, #0
 8101ece:	d049      	beq.n	8101f64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101ed8:	d02e      	beq.n	8101f38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8101eda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101ede:	d828      	bhi.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101ee0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101ee4:	d02a      	beq.n	8101f3c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8101ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101eea:	d822      	bhi.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101eec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101ef0:	d026      	beq.n	8101f40 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8101ef2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101ef6:	d81c      	bhi.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101efc:	d010      	beq.n	8101f20 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8101efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101f02:	d816      	bhi.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8101f04:	2b00      	cmp	r3, #0
 8101f06:	d01d      	beq.n	8101f44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8101f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101f0c:	d111      	bne.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	3304      	adds	r3, #4
 8101f12:	2101      	movs	r1, #1
 8101f14:	4618      	mov	r0, r3
 8101f16:	f000 fffd 	bl	8102f14 <RCCEx_PLL2_Config>
 8101f1a:	4603      	mov	r3, r0
 8101f1c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101f1e:	e012      	b.n	8101f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	3324      	adds	r3, #36	; 0x24
 8101f24:	2101      	movs	r1, #1
 8101f26:	4618      	mov	r0, r3
 8101f28:	f001 f8a6 	bl	8103078 <RCCEx_PLL3_Config>
 8101f2c:	4603      	mov	r3, r0
 8101f2e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101f30:	e009      	b.n	8101f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f32:	2301      	movs	r3, #1
 8101f34:	75fb      	strb	r3, [r7, #23]
      break;
 8101f36:	e006      	b.n	8101f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101f38:	bf00      	nop
 8101f3a:	e004      	b.n	8101f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101f3c:	bf00      	nop
 8101f3e:	e002      	b.n	8101f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101f40:	bf00      	nop
 8101f42:	e000      	b.n	8101f46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8101f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f46:	7dfb      	ldrb	r3, [r7, #23]
 8101f48:	2b00      	cmp	r3, #0
 8101f4a:	d109      	bne.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101f4c:	4b2d      	ldr	r3, [pc, #180]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101f50:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101f58:	492a      	ldr	r1, [pc, #168]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101f5a:	4313      	orrs	r3, r2
 8101f5c:	650b      	str	r3, [r1, #80]	; 0x50
 8101f5e:	e001      	b.n	8101f64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f60:	7dfb      	ldrb	r3, [r7, #23]
 8101f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101f6c:	2b00      	cmp	r3, #0
 8101f6e:	d04d      	beq.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101f7a:	d02e      	beq.n	8101fda <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8101f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101f80:	d828      	bhi.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101f86:	d02a      	beq.n	8101fde <HAL_RCCEx_PeriphCLKConfig+0x522>
 8101f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101f8c:	d822      	bhi.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101f8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101f92:	d026      	beq.n	8101fe2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8101f94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101f98:	d81c      	bhi.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101f9e:	d010      	beq.n	8101fc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8101fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101fa4:	d816      	bhi.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8101fa6:	2b00      	cmp	r3, #0
 8101fa8:	d01d      	beq.n	8101fe6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8101faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101fae:	d111      	bne.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	3304      	adds	r3, #4
 8101fb4:	2101      	movs	r1, #1
 8101fb6:	4618      	mov	r0, r3
 8101fb8:	f000 ffac 	bl	8102f14 <RCCEx_PLL2_Config>
 8101fbc:	4603      	mov	r3, r0
 8101fbe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101fc0:	e012      	b.n	8101fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	3324      	adds	r3, #36	; 0x24
 8101fc6:	2101      	movs	r1, #1
 8101fc8:	4618      	mov	r0, r3
 8101fca:	f001 f855 	bl	8103078 <RCCEx_PLL3_Config>
 8101fce:	4603      	mov	r3, r0
 8101fd0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101fd2:	e009      	b.n	8101fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101fd4:	2301      	movs	r3, #1
 8101fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8101fd8:	e006      	b.n	8101fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101fda:	bf00      	nop
 8101fdc:	e004      	b.n	8101fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101fde:	bf00      	nop
 8101fe0:	e002      	b.n	8101fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101fe2:	bf00      	nop
 8101fe4:	e000      	b.n	8101fe8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8101fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fe8:	7dfb      	ldrb	r3, [r7, #23]
 8101fea:	2b00      	cmp	r3, #0
 8101fec:	d10c      	bne.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101fee:	4b05      	ldr	r3, [pc, #20]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101ff2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101ffc:	4901      	ldr	r1, [pc, #4]	; (8102004 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8101ffe:	4313      	orrs	r3, r2
 8102000:	658b      	str	r3, [r1, #88]	; 0x58
 8102002:	e003      	b.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8102004:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102008:	7dfb      	ldrb	r3, [r7, #23]
 810200a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8102014:	2b00      	cmp	r3, #0
 8102016:	d022      	beq.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810201c:	2b00      	cmp	r3, #0
 810201e:	d00e      	beq.n	810203e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8102020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102024:	d108      	bne.n	8102038 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	3304      	adds	r3, #4
 810202a:	2101      	movs	r1, #1
 810202c:	4618      	mov	r0, r3
 810202e:	f000 ff71 	bl	8102f14 <RCCEx_PLL2_Config>
 8102032:	4603      	mov	r3, r0
 8102034:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8102036:	e003      	b.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102038:	2301      	movs	r3, #1
 810203a:	75fb      	strb	r3, [r7, #23]
      break;
 810203c:	e000      	b.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 810203e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102040:	7dfb      	ldrb	r3, [r7, #23]
 8102042:	2b00      	cmp	r3, #0
 8102044:	d109      	bne.n	810205a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8102046:	4b83      	ldr	r3, [pc, #524]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810204a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102052:	4980      	ldr	r1, [pc, #512]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102054:	4313      	orrs	r3, r2
 8102056:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102058:	e001      	b.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810205a:	7dfb      	ldrb	r3, [r7, #23]
 810205c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	681b      	ldr	r3, [r3, #0]
 8102062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102066:	2b00      	cmp	r3, #0
 8102068:	d02f      	beq.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810206a:	687b      	ldr	r3, [r7, #4]
 810206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810206e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102072:	d00e      	beq.n	8102092 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8102074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102078:	d814      	bhi.n	81020a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 810207a:	2b00      	cmp	r3, #0
 810207c:	d015      	beq.n	81020aa <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 810207e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102082:	d10f      	bne.n	81020a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102084:	4b73      	ldr	r3, [pc, #460]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102088:	4a72      	ldr	r2, [pc, #456]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 810208a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810208e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102090:	e00c      	b.n	81020ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	3304      	adds	r3, #4
 8102096:	2101      	movs	r1, #1
 8102098:	4618      	mov	r0, r3
 810209a:	f000 ff3b 	bl	8102f14 <RCCEx_PLL2_Config>
 810209e:	4603      	mov	r3, r0
 81020a0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81020a2:	e003      	b.n	81020ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81020a4:	2301      	movs	r3, #1
 81020a6:	75fb      	strb	r3, [r7, #23]
      break;
 81020a8:	e000      	b.n	81020ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 81020aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020ac:	7dfb      	ldrb	r3, [r7, #23]
 81020ae:	2b00      	cmp	r3, #0
 81020b0:	d109      	bne.n	81020c6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81020b2:	4b68      	ldr	r3, [pc, #416]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81020b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81020b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81020be:	4965      	ldr	r1, [pc, #404]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81020c0:	4313      	orrs	r3, r2
 81020c2:	650b      	str	r3, [r1, #80]	; 0x50
 81020c4:	e001      	b.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020c6:	7dfb      	ldrb	r3, [r7, #23]
 81020c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	681b      	ldr	r3, [r3, #0]
 81020ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81020d2:	2b00      	cmp	r3, #0
 81020d4:	d031      	beq.n	810213a <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81020da:	2b03      	cmp	r3, #3
 81020dc:	d81a      	bhi.n	8102114 <HAL_RCCEx_PeriphCLKConfig+0x658>
 81020de:	a201      	add	r2, pc, #4	; (adr r2, 81020e4 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 81020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020e4:	0810211b 	.word	0x0810211b
 81020e8:	081020f5 	.word	0x081020f5
 81020ec:	08102103 	.word	0x08102103
 81020f0:	0810211b 	.word	0x0810211b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81020f4:	4b57      	ldr	r3, [pc, #348]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81020f8:	4a56      	ldr	r2, [pc, #344]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81020fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81020fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102100:	e00c      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	3304      	adds	r3, #4
 8102106:	2102      	movs	r1, #2
 8102108:	4618      	mov	r0, r3
 810210a:	f000 ff03 	bl	8102f14 <RCCEx_PLL2_Config>
 810210e:	4603      	mov	r3, r0
 8102110:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102112:	e003      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102114:	2301      	movs	r3, #1
 8102116:	75fb      	strb	r3, [r7, #23]
      break;
 8102118:	e000      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 810211a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810211c:	7dfb      	ldrb	r3, [r7, #23]
 810211e:	2b00      	cmp	r3, #0
 8102120:	d109      	bne.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102122:	4b4c      	ldr	r3, [pc, #304]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102126:	f023 0203 	bic.w	r2, r3, #3
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810212e:	4949      	ldr	r1, [pc, #292]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102130:	4313      	orrs	r3, r2
 8102132:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102134:	e001      	b.n	810213a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102136:	7dfb      	ldrb	r3, [r7, #23]
 8102138:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102142:	2b00      	cmp	r3, #0
 8102144:	f000 808c 	beq.w	8102260 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102148:	4b43      	ldr	r3, [pc, #268]	; (8102258 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 810214a:	681b      	ldr	r3, [r3, #0]
 810214c:	4a42      	ldr	r2, [pc, #264]	; (8102258 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 810214e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102154:	f7fe fee4 	bl	8100f20 <HAL_GetTick>
 8102158:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810215a:	e009      	b.n	8102170 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810215c:	f7fe fee0 	bl	8100f20 <HAL_GetTick>
 8102160:	4602      	mov	r2, r0
 8102162:	693b      	ldr	r3, [r7, #16]
 8102164:	1ad3      	subs	r3, r2, r3
 8102166:	2b64      	cmp	r3, #100	; 0x64
 8102168:	d902      	bls.n	8102170 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 810216a:	2303      	movs	r3, #3
 810216c:	75fb      	strb	r3, [r7, #23]
        break;
 810216e:	e005      	b.n	810217c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102170:	4b39      	ldr	r3, [pc, #228]	; (8102258 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8102172:	681b      	ldr	r3, [r3, #0]
 8102174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102178:	2b00      	cmp	r3, #0
 810217a:	d0ef      	beq.n	810215c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 810217c:	7dfb      	ldrb	r3, [r7, #23]
 810217e:	2b00      	cmp	r3, #0
 8102180:	d16c      	bne.n	810225c <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102182:	4b34      	ldr	r3, [pc, #208]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102184:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810218c:	4053      	eors	r3, r2
 810218e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102192:	2b00      	cmp	r3, #0
 8102194:	d013      	beq.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102196:	4b2f      	ldr	r3, [pc, #188]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810219a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810219e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81021a0:	4b2c      	ldr	r3, [pc, #176]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81021a4:	4a2b      	ldr	r2, [pc, #172]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81021aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81021ac:	4b29      	ldr	r3, [pc, #164]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81021b0:	4a28      	ldr	r2, [pc, #160]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81021b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81021b8:	4a26      	ldr	r2, [pc, #152]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81021ba:	68fb      	ldr	r3, [r7, #12]
 81021bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81021be:	687b      	ldr	r3, [r7, #4]
 81021c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81021c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81021c8:	d115      	bne.n	81021f6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81021ca:	f7fe fea9 	bl	8100f20 <HAL_GetTick>
 81021ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81021d0:	e00b      	b.n	81021ea <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81021d2:	f7fe fea5 	bl	8100f20 <HAL_GetTick>
 81021d6:	4602      	mov	r2, r0
 81021d8:	693b      	ldr	r3, [r7, #16]
 81021da:	1ad3      	subs	r3, r2, r3
 81021dc:	f241 3288 	movw	r2, #5000	; 0x1388
 81021e0:	4293      	cmp	r3, r2
 81021e2:	d902      	bls.n	81021ea <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 81021e4:	2303      	movs	r3, #3
 81021e6:	75fb      	strb	r3, [r7, #23]
            break;
 81021e8:	e005      	b.n	81021f6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81021ea:	4b1a      	ldr	r3, [pc, #104]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 81021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81021ee:	f003 0302 	and.w	r3, r3, #2
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	d0ed      	beq.n	81021d2 <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 81021f6:	7dfb      	ldrb	r3, [r7, #23]
 81021f8:	2b00      	cmp	r3, #0
 81021fa:	d128      	bne.n	810224e <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810220a:	d10f      	bne.n	810222c <HAL_RCCEx_PeriphCLKConfig+0x770>
 810220c:	4b11      	ldr	r3, [pc, #68]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 810220e:	691b      	ldr	r3, [r3, #16]
 8102210:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810221a:	091b      	lsrs	r3, r3, #4
 810221c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102220:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102224:	490b      	ldr	r1, [pc, #44]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102226:	4313      	orrs	r3, r2
 8102228:	610b      	str	r3, [r1, #16]
 810222a:	e005      	b.n	8102238 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 810222c:	4b09      	ldr	r3, [pc, #36]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 810222e:	691b      	ldr	r3, [r3, #16]
 8102230:	4a08      	ldr	r2, [pc, #32]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102232:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8102236:	6113      	str	r3, [r2, #16]
 8102238:	4b06      	ldr	r3, [pc, #24]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 810223a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102246:	4903      	ldr	r1, [pc, #12]	; (8102254 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8102248:	4313      	orrs	r3, r2
 810224a:	670b      	str	r3, [r1, #112]	; 0x70
 810224c:	e008      	b.n	8102260 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810224e:	7dfb      	ldrb	r3, [r7, #23]
 8102250:	75bb      	strb	r3, [r7, #22]
 8102252:	e005      	b.n	8102260 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8102254:	58024400 	.word	0x58024400
 8102258:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810225c:	7dfb      	ldrb	r3, [r7, #23]
 810225e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	681b      	ldr	r3, [r3, #0]
 8102264:	f003 0301 	and.w	r3, r3, #1
 8102268:	2b00      	cmp	r3, #0
 810226a:	d07e      	beq.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102270:	2b28      	cmp	r3, #40	; 0x28
 8102272:	d867      	bhi.n	8102344 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8102274:	a201      	add	r2, pc, #4	; (adr r2, 810227c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8102276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810227a:	bf00      	nop
 810227c:	0810234b 	.word	0x0810234b
 8102280:	08102345 	.word	0x08102345
 8102284:	08102345 	.word	0x08102345
 8102288:	08102345 	.word	0x08102345
 810228c:	08102345 	.word	0x08102345
 8102290:	08102345 	.word	0x08102345
 8102294:	08102345 	.word	0x08102345
 8102298:	08102345 	.word	0x08102345
 810229c:	08102321 	.word	0x08102321
 81022a0:	08102345 	.word	0x08102345
 81022a4:	08102345 	.word	0x08102345
 81022a8:	08102345 	.word	0x08102345
 81022ac:	08102345 	.word	0x08102345
 81022b0:	08102345 	.word	0x08102345
 81022b4:	08102345 	.word	0x08102345
 81022b8:	08102345 	.word	0x08102345
 81022bc:	08102333 	.word	0x08102333
 81022c0:	08102345 	.word	0x08102345
 81022c4:	08102345 	.word	0x08102345
 81022c8:	08102345 	.word	0x08102345
 81022cc:	08102345 	.word	0x08102345
 81022d0:	08102345 	.word	0x08102345
 81022d4:	08102345 	.word	0x08102345
 81022d8:	08102345 	.word	0x08102345
 81022dc:	0810234b 	.word	0x0810234b
 81022e0:	08102345 	.word	0x08102345
 81022e4:	08102345 	.word	0x08102345
 81022e8:	08102345 	.word	0x08102345
 81022ec:	08102345 	.word	0x08102345
 81022f0:	08102345 	.word	0x08102345
 81022f4:	08102345 	.word	0x08102345
 81022f8:	08102345 	.word	0x08102345
 81022fc:	0810234b 	.word	0x0810234b
 8102300:	08102345 	.word	0x08102345
 8102304:	08102345 	.word	0x08102345
 8102308:	08102345 	.word	0x08102345
 810230c:	08102345 	.word	0x08102345
 8102310:	08102345 	.word	0x08102345
 8102314:	08102345 	.word	0x08102345
 8102318:	08102345 	.word	0x08102345
 810231c:	0810234b 	.word	0x0810234b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	3304      	adds	r3, #4
 8102324:	2101      	movs	r1, #1
 8102326:	4618      	mov	r0, r3
 8102328:	f000 fdf4 	bl	8102f14 <RCCEx_PLL2_Config>
 810232c:	4603      	mov	r3, r0
 810232e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102330:	e00c      	b.n	810234c <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	3324      	adds	r3, #36	; 0x24
 8102336:	2101      	movs	r1, #1
 8102338:	4618      	mov	r0, r3
 810233a:	f000 fe9d 	bl	8103078 <RCCEx_PLL3_Config>
 810233e:	4603      	mov	r3, r0
 8102340:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102342:	e003      	b.n	810234c <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102344:	2301      	movs	r3, #1
 8102346:	75fb      	strb	r3, [r7, #23]
      break;
 8102348:	e000      	b.n	810234c <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 810234a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810234c:	7dfb      	ldrb	r3, [r7, #23]
 810234e:	2b00      	cmp	r3, #0
 8102350:	d109      	bne.n	8102366 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102352:	4b96      	ldr	r3, [pc, #600]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8102354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102356:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810235e:	4993      	ldr	r1, [pc, #588]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8102360:	4313      	orrs	r3, r2
 8102362:	654b      	str	r3, [r1, #84]	; 0x54
 8102364:	e001      	b.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102366:	7dfb      	ldrb	r3, [r7, #23]
 8102368:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810236a:	687b      	ldr	r3, [r7, #4]
 810236c:	681b      	ldr	r3, [r3, #0]
 810236e:	f003 0302 	and.w	r3, r3, #2
 8102372:	2b00      	cmp	r3, #0
 8102374:	d037      	beq.n	81023e6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810237a:	2b05      	cmp	r3, #5
 810237c:	d820      	bhi.n	81023c0 <HAL_RCCEx_PeriphCLKConfig+0x904>
 810237e:	a201      	add	r2, pc, #4	; (adr r2, 8102384 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8102380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102384:	081023c7 	.word	0x081023c7
 8102388:	0810239d 	.word	0x0810239d
 810238c:	081023af 	.word	0x081023af
 8102390:	081023c7 	.word	0x081023c7
 8102394:	081023c7 	.word	0x081023c7
 8102398:	081023c7 	.word	0x081023c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810239c:	687b      	ldr	r3, [r7, #4]
 810239e:	3304      	adds	r3, #4
 81023a0:	2101      	movs	r1, #1
 81023a2:	4618      	mov	r0, r3
 81023a4:	f000 fdb6 	bl	8102f14 <RCCEx_PLL2_Config>
 81023a8:	4603      	mov	r3, r0
 81023aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81023ac:	e00c      	b.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	3324      	adds	r3, #36	; 0x24
 81023b2:	2101      	movs	r1, #1
 81023b4:	4618      	mov	r0, r3
 81023b6:	f000 fe5f 	bl	8103078 <RCCEx_PLL3_Config>
 81023ba:	4603      	mov	r3, r0
 81023bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81023be:	e003      	b.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023c0:	2301      	movs	r3, #1
 81023c2:	75fb      	strb	r3, [r7, #23]
      break;
 81023c4:	e000      	b.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 81023c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023c8:	7dfb      	ldrb	r3, [r7, #23]
 81023ca:	2b00      	cmp	r3, #0
 81023cc:	d109      	bne.n	81023e2 <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81023ce:	4b77      	ldr	r3, [pc, #476]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 81023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023d2:	f023 0207 	bic.w	r2, r3, #7
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81023da:	4974      	ldr	r1, [pc, #464]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 81023dc:	4313      	orrs	r3, r2
 81023de:	654b      	str	r3, [r1, #84]	; 0x54
 81023e0:	e001      	b.n	81023e6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023e2:	7dfb      	ldrb	r3, [r7, #23]
 81023e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	681b      	ldr	r3, [r3, #0]
 81023ea:	f003 0304 	and.w	r3, r3, #4
 81023ee:	2b00      	cmp	r3, #0
 81023f0:	d03a      	beq.n	8102468 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81023f8:	2b05      	cmp	r3, #5
 81023fa:	d821      	bhi.n	8102440 <HAL_RCCEx_PeriphCLKConfig+0x984>
 81023fc:	a201      	add	r2, pc, #4	; (adr r2, 8102404 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 81023fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102402:	bf00      	nop
 8102404:	08102447 	.word	0x08102447
 8102408:	0810241d 	.word	0x0810241d
 810240c:	0810242f 	.word	0x0810242f
 8102410:	08102447 	.word	0x08102447
 8102414:	08102447 	.word	0x08102447
 8102418:	08102447 	.word	0x08102447
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	3304      	adds	r3, #4
 8102420:	2101      	movs	r1, #1
 8102422:	4618      	mov	r0, r3
 8102424:	f000 fd76 	bl	8102f14 <RCCEx_PLL2_Config>
 8102428:	4603      	mov	r3, r0
 810242a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810242c:	e00c      	b.n	8102448 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	3324      	adds	r3, #36	; 0x24
 8102432:	2101      	movs	r1, #1
 8102434:	4618      	mov	r0, r3
 8102436:	f000 fe1f 	bl	8103078 <RCCEx_PLL3_Config>
 810243a:	4603      	mov	r3, r0
 810243c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810243e:	e003      	b.n	8102448 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102440:	2301      	movs	r3, #1
 8102442:	75fb      	strb	r3, [r7, #23]
      break;
 8102444:	e000      	b.n	8102448 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 8102446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102448:	7dfb      	ldrb	r3, [r7, #23]
 810244a:	2b00      	cmp	r3, #0
 810244c:	d10a      	bne.n	8102464 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810244e:	4b57      	ldr	r3, [pc, #348]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8102450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102452:	f023 0207 	bic.w	r2, r3, #7
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810245c:	4953      	ldr	r1, [pc, #332]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 810245e:	4313      	orrs	r3, r2
 8102460:	658b      	str	r3, [r1, #88]	; 0x58
 8102462:	e001      	b.n	8102468 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102464:	7dfb      	ldrb	r3, [r7, #23]
 8102466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	681b      	ldr	r3, [r3, #0]
 810246c:	f003 0320 	and.w	r3, r3, #32
 8102470:	2b00      	cmp	r3, #0
 8102472:	d04b      	beq.n	810250c <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810247a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810247e:	d02e      	beq.n	81024de <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8102480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102484:	d828      	bhi.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8102486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810248a:	d02a      	beq.n	81024e2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 810248c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102490:	d822      	bhi.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8102492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102496:	d026      	beq.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8102498:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810249c:	d81c      	bhi.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 810249e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81024a2:	d010      	beq.n	81024c6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 81024a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81024a8:	d816      	bhi.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 81024aa:	2b00      	cmp	r3, #0
 81024ac:	d01d      	beq.n	81024ea <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 81024ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81024b2:	d111      	bne.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	3304      	adds	r3, #4
 81024b8:	2100      	movs	r1, #0
 81024ba:	4618      	mov	r0, r3
 81024bc:	f000 fd2a 	bl	8102f14 <RCCEx_PLL2_Config>
 81024c0:	4603      	mov	r3, r0
 81024c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81024c4:	e012      	b.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	3324      	adds	r3, #36	; 0x24
 81024ca:	2102      	movs	r1, #2
 81024cc:	4618      	mov	r0, r3
 81024ce:	f000 fdd3 	bl	8103078 <RCCEx_PLL3_Config>
 81024d2:	4603      	mov	r3, r0
 81024d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81024d6:	e009      	b.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81024d8:	2301      	movs	r3, #1
 81024da:	75fb      	strb	r3, [r7, #23]
      break;
 81024dc:	e006      	b.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 81024de:	bf00      	nop
 81024e0:	e004      	b.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 81024e2:	bf00      	nop
 81024e4:	e002      	b.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 81024e6:	bf00      	nop
 81024e8:	e000      	b.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 81024ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81024ec:	7dfb      	ldrb	r3, [r7, #23]
 81024ee:	2b00      	cmp	r3, #0
 81024f0:	d10a      	bne.n	8102508 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81024f2:	4b2e      	ldr	r3, [pc, #184]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 81024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102500:	492a      	ldr	r1, [pc, #168]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8102502:	4313      	orrs	r3, r2
 8102504:	654b      	str	r3, [r1, #84]	; 0x54
 8102506:	e001      	b.n	810250c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102508:	7dfb      	ldrb	r3, [r7, #23]
 810250a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102514:	2b00      	cmp	r3, #0
 8102516:	d04d      	beq.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810251e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102522:	d02e      	beq.n	8102582 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8102524:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102528:	d828      	bhi.n	810257c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 810252a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810252e:	d02a      	beq.n	8102586 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8102530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102534:	d822      	bhi.n	810257c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8102536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810253a:	d026      	beq.n	810258a <HAL_RCCEx_PeriphCLKConfig+0xace>
 810253c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102540:	d81c      	bhi.n	810257c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8102542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102546:	d010      	beq.n	810256a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8102548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810254c:	d816      	bhi.n	810257c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 810254e:	2b00      	cmp	r3, #0
 8102550:	d01d      	beq.n	810258e <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8102552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102556:	d111      	bne.n	810257c <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	3304      	adds	r3, #4
 810255c:	2100      	movs	r1, #0
 810255e:	4618      	mov	r0, r3
 8102560:	f000 fcd8 	bl	8102f14 <RCCEx_PLL2_Config>
 8102564:	4603      	mov	r3, r0
 8102566:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102568:	e012      	b.n	8102590 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	3324      	adds	r3, #36	; 0x24
 810256e:	2102      	movs	r1, #2
 8102570:	4618      	mov	r0, r3
 8102572:	f000 fd81 	bl	8103078 <RCCEx_PLL3_Config>
 8102576:	4603      	mov	r3, r0
 8102578:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810257a:	e009      	b.n	8102590 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810257c:	2301      	movs	r3, #1
 810257e:	75fb      	strb	r3, [r7, #23]
      break;
 8102580:	e006      	b.n	8102590 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8102582:	bf00      	nop
 8102584:	e004      	b.n	8102590 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8102586:	bf00      	nop
 8102588:	e002      	b.n	8102590 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 810258a:	bf00      	nop
 810258c:	e000      	b.n	8102590 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 810258e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102590:	7dfb      	ldrb	r3, [r7, #23]
 8102592:	2b00      	cmp	r3, #0
 8102594:	d10c      	bne.n	81025b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102596:	4b05      	ldr	r3, [pc, #20]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8102598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810259a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81025a4:	4901      	ldr	r1, [pc, #4]	; (81025ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 81025a6:	4313      	orrs	r3, r2
 81025a8:	658b      	str	r3, [r1, #88]	; 0x58
 81025aa:	e003      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 81025ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025b0:	7dfb      	ldrb	r3, [r7, #23]
 81025b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81025bc:	2b00      	cmp	r3, #0
 81025be:	d04b      	beq.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81025c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81025ca:	d02e      	beq.n	810262a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 81025cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81025d0:	d828      	bhi.n	8102624 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 81025d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81025d6:	d02a      	beq.n	810262e <HAL_RCCEx_PeriphCLKConfig+0xb72>
 81025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81025dc:	d822      	bhi.n	8102624 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 81025de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81025e2:	d026      	beq.n	8102632 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 81025e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81025e8:	d81c      	bhi.n	8102624 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 81025ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81025ee:	d010      	beq.n	8102612 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 81025f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81025f4:	d816      	bhi.n	8102624 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d01d      	beq.n	8102636 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 81025fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81025fe:	d111      	bne.n	8102624 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	3304      	adds	r3, #4
 8102604:	2100      	movs	r1, #0
 8102606:	4618      	mov	r0, r3
 8102608:	f000 fc84 	bl	8102f14 <RCCEx_PLL2_Config>
 810260c:	4603      	mov	r3, r0
 810260e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102610:	e012      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	3324      	adds	r3, #36	; 0x24
 8102616:	2102      	movs	r1, #2
 8102618:	4618      	mov	r0, r3
 810261a:	f000 fd2d 	bl	8103078 <RCCEx_PLL3_Config>
 810261e:	4603      	mov	r3, r0
 8102620:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102622:	e009      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102624:	2301      	movs	r3, #1
 8102626:	75fb      	strb	r3, [r7, #23]
      break;
 8102628:	e006      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 810262a:	bf00      	nop
 810262c:	e004      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 810262e:	bf00      	nop
 8102630:	e002      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8102632:	bf00      	nop
 8102634:	e000      	b.n	8102638 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8102636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102638:	7dfb      	ldrb	r3, [r7, #23]
 810263a:	2b00      	cmp	r3, #0
 810263c:	d10a      	bne.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810263e:	4b9e      	ldr	r3, [pc, #632]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810264c:	499a      	ldr	r1, [pc, #616]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810264e:	4313      	orrs	r3, r2
 8102650:	658b      	str	r3, [r1, #88]	; 0x58
 8102652:	e001      	b.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102654:	7dfb      	ldrb	r3, [r7, #23]
 8102656:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	f003 0308 	and.w	r3, r3, #8
 8102660:	2b00      	cmp	r3, #0
 8102662:	d01a      	beq.n	810269a <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810266e:	d10a      	bne.n	8102686 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	3324      	adds	r3, #36	; 0x24
 8102674:	2102      	movs	r1, #2
 8102676:	4618      	mov	r0, r3
 8102678:	f000 fcfe 	bl	8103078 <RCCEx_PLL3_Config>
 810267c:	4603      	mov	r3, r0
 810267e:	2b00      	cmp	r3, #0
 8102680:	d001      	beq.n	8102686 <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 8102682:	2301      	movs	r3, #1
 8102684:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102686:	4b8c      	ldr	r3, [pc, #560]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810268a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102694:	4988      	ldr	r1, [pc, #544]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102696:	4313      	orrs	r3, r2
 8102698:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	681b      	ldr	r3, [r3, #0]
 810269e:	f003 0310 	and.w	r3, r3, #16
 81026a2:	2b00      	cmp	r3, #0
 81026a4:	d01a      	beq.n	81026dc <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81026ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81026b0:	d10a      	bne.n	81026c8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	3324      	adds	r3, #36	; 0x24
 81026b6:	2102      	movs	r1, #2
 81026b8:	4618      	mov	r0, r3
 81026ba:	f000 fcdd 	bl	8103078 <RCCEx_PLL3_Config>
 81026be:	4603      	mov	r3, r0
 81026c0:	2b00      	cmp	r3, #0
 81026c2:	d001      	beq.n	81026c8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 81026c4:	2301      	movs	r3, #1
 81026c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81026c8:	4b7b      	ldr	r3, [pc, #492]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81026cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81026d6:	4978      	ldr	r1, [pc, #480]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81026d8:	4313      	orrs	r3, r2
 81026da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81026e4:	2b00      	cmp	r3, #0
 81026e6:	d034      	beq.n	8102752 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81026ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81026f2:	d01d      	beq.n	8102730 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 81026f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81026f8:	d817      	bhi.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d003      	beq.n	8102706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 81026fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102702:	d009      	beq.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8102704:	e011      	b.n	810272a <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	3304      	adds	r3, #4
 810270a:	2100      	movs	r1, #0
 810270c:	4618      	mov	r0, r3
 810270e:	f000 fc01 	bl	8102f14 <RCCEx_PLL2_Config>
 8102712:	4603      	mov	r3, r0
 8102714:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102716:	e00c      	b.n	8102732 <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	3324      	adds	r3, #36	; 0x24
 810271c:	2102      	movs	r1, #2
 810271e:	4618      	mov	r0, r3
 8102720:	f000 fcaa 	bl	8103078 <RCCEx_PLL3_Config>
 8102724:	4603      	mov	r3, r0
 8102726:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102728:	e003      	b.n	8102732 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810272a:	2301      	movs	r3, #1
 810272c:	75fb      	strb	r3, [r7, #23]
      break;
 810272e:	e000      	b.n	8102732 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 8102730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102732:	7dfb      	ldrb	r3, [r7, #23]
 8102734:	2b00      	cmp	r3, #0
 8102736:	d10a      	bne.n	810274e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102738:	4b5f      	ldr	r3, [pc, #380]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810273c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102746:	495c      	ldr	r1, [pc, #368]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102748:	4313      	orrs	r3, r2
 810274a:	658b      	str	r3, [r1, #88]	; 0x58
 810274c:	e001      	b.n	8102752 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810274e:	7dfb      	ldrb	r3, [r7, #23]
 8102750:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	681b      	ldr	r3, [r3, #0]
 8102756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810275a:	2b00      	cmp	r3, #0
 810275c:	d033      	beq.n	81027c6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102768:	d01c      	beq.n	81027a4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 810276a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810276e:	d816      	bhi.n	810279e <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8102770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102774:	d003      	beq.n	810277e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8102776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810277a:	d007      	beq.n	810278c <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 810277c:	e00f      	b.n	810279e <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810277e:	4b4e      	ldr	r3, [pc, #312]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102782:	4a4d      	ldr	r2, [pc, #308]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810278a:	e00c      	b.n	81027a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	3324      	adds	r3, #36	; 0x24
 8102790:	2101      	movs	r1, #1
 8102792:	4618      	mov	r0, r3
 8102794:	f000 fc70 	bl	8103078 <RCCEx_PLL3_Config>
 8102798:	4603      	mov	r3, r0
 810279a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810279c:	e003      	b.n	81027a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810279e:	2301      	movs	r3, #1
 81027a0:	75fb      	strb	r3, [r7, #23]
      break;
 81027a2:	e000      	b.n	81027a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 81027a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81027a6:	7dfb      	ldrb	r3, [r7, #23]
 81027a8:	2b00      	cmp	r3, #0
 81027aa:	d10a      	bne.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81027ac:	4b42      	ldr	r3, [pc, #264]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81027ba:	493f      	ldr	r1, [pc, #252]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81027bc:	4313      	orrs	r3, r2
 81027be:	654b      	str	r3, [r1, #84]	; 0x54
 81027c0:	e001      	b.n	81027c6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027c2:	7dfb      	ldrb	r3, [r7, #23]
 81027c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81027ce:	2b00      	cmp	r3, #0
 81027d0:	d029      	beq.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81027d6:	2b00      	cmp	r3, #0
 81027d8:	d003      	beq.n	81027e2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
 81027da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81027de:	d007      	beq.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 81027e0:	e00f      	b.n	8102802 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027e2:	4b35      	ldr	r3, [pc, #212]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027e6:	4a34      	ldr	r2, [pc, #208]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81027ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81027ee:	e00b      	b.n	8102808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	3304      	adds	r3, #4
 81027f4:	2102      	movs	r1, #2
 81027f6:	4618      	mov	r0, r3
 81027f8:	f000 fb8c 	bl	8102f14 <RCCEx_PLL2_Config>
 81027fc:	4603      	mov	r3, r0
 81027fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102800:	e002      	b.n	8102808 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8102802:	2301      	movs	r3, #1
 8102804:	75fb      	strb	r3, [r7, #23]
      break;
 8102806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102808:	7dfb      	ldrb	r3, [r7, #23]
 810280a:	2b00      	cmp	r3, #0
 810280c:	d109      	bne.n	8102822 <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810280e:	4b2a      	ldr	r3, [pc, #168]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102812:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810281a:	4927      	ldr	r1, [pc, #156]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810281c:	4313      	orrs	r3, r2
 810281e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102820:	e001      	b.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102822:	7dfb      	ldrb	r3, [r7, #23]
 8102824:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102826:	687b      	ldr	r3, [r7, #4]
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810282e:	2b00      	cmp	r3, #0
 8102830:	d00a      	beq.n	8102848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	3324      	adds	r3, #36	; 0x24
 8102836:	2102      	movs	r1, #2
 8102838:	4618      	mov	r0, r3
 810283a:	f000 fc1d 	bl	8103078 <RCCEx_PLL3_Config>
 810283e:	4603      	mov	r3, r0
 8102840:	2b00      	cmp	r3, #0
 8102842:	d001      	beq.n	8102848 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 8102844:	2301      	movs	r3, #1
 8102846:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102850:	2b00      	cmp	r3, #0
 8102852:	d035      	beq.n	81028c0 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810285a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810285e:	d017      	beq.n	8102890 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 8102860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102864:	d811      	bhi.n	810288a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8102866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810286a:	d013      	beq.n	8102894 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 810286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102870:	d80b      	bhi.n	810288a <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8102872:	2b00      	cmp	r3, #0
 8102874:	d010      	beq.n	8102898 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8102876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810287a:	d106      	bne.n	810288a <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810287c:	4b0e      	ldr	r3, [pc, #56]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 810287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102880:	4a0d      	ldr	r2, [pc, #52]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8102882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102888:	e007      	b.n	810289a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810288a:	2301      	movs	r3, #1
 810288c:	75fb      	strb	r3, [r7, #23]
      break;
 810288e:	e004      	b.n	810289a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8102890:	bf00      	nop
 8102892:	e002      	b.n	810289a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8102894:	bf00      	nop
 8102896:	e000      	b.n	810289a <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8102898:	bf00      	nop
    }

    if(ret == HAL_OK)
 810289a:	7dfb      	ldrb	r3, [r7, #23]
 810289c:	2b00      	cmp	r3, #0
 810289e:	d10d      	bne.n	81028bc <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81028a0:	4b05      	ldr	r3, [pc, #20]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81028a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81028ae:	4902      	ldr	r1, [pc, #8]	; (81028b8 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 81028b0:	4313      	orrs	r3, r2
 81028b2:	654b      	str	r3, [r1, #84]	; 0x54
 81028b4:	e004      	b.n	81028c0 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 81028b6:	bf00      	nop
 81028b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028bc:	7dfb      	ldrb	r3, [r7, #23]
 81028be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81028c8:	2b00      	cmp	r3, #0
 81028ca:	d008      	beq.n	81028de <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81028cc:	4b31      	ldr	r3, [pc, #196]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81028ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81028d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81028d4:	687b      	ldr	r3, [r7, #4]
 81028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81028d8:	492e      	ldr	r1, [pc, #184]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81028da:	4313      	orrs	r3, r2
 81028dc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	d009      	beq.n	81028fe <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81028ea:	4b2a      	ldr	r3, [pc, #168]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81028ec:	691b      	ldr	r3, [r3, #16]
 81028ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81028f8:	4926      	ldr	r1, [pc, #152]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 81028fa:	4313      	orrs	r3, r2
 81028fc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102906:	2b00      	cmp	r3, #0
 8102908:	d008      	beq.n	810291c <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810290a:	4b22      	ldr	r3, [pc, #136]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810290c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810290e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102916:	491f      	ldr	r1, [pc, #124]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8102918:	4313      	orrs	r3, r2
 810291a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102924:	2b00      	cmp	r3, #0
 8102926:	d00d      	beq.n	8102944 <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102928:	4b1a      	ldr	r3, [pc, #104]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810292a:	691b      	ldr	r3, [r3, #16]
 810292c:	4a19      	ldr	r2, [pc, #100]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810292e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102932:	6113      	str	r3, [r2, #16]
 8102934:	4b17      	ldr	r3, [pc, #92]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8102936:	691a      	ldr	r2, [r3, #16]
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810293e:	4915      	ldr	r1, [pc, #84]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8102940:	4313      	orrs	r3, r2
 8102942:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	2b00      	cmp	r3, #0
 810294a:	da08      	bge.n	810295e <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810294c:	4b11      	ldr	r3, [pc, #68]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102950:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102958:	490e      	ldr	r1, [pc, #56]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810295a:	4313      	orrs	r3, r2
 810295c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102966:	2b00      	cmp	r3, #0
 8102968:	d009      	beq.n	810297e <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810296a:	4b0a      	ldr	r3, [pc, #40]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810296e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102972:	687b      	ldr	r3, [r7, #4]
 8102974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102978:	4906      	ldr	r1, [pc, #24]	; (8102994 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 810297a:	4313      	orrs	r3, r2
 810297c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810297e:	7dbb      	ldrb	r3, [r7, #22]
 8102980:	2b00      	cmp	r3, #0
 8102982:	d101      	bne.n	8102988 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 8102984:	2300      	movs	r3, #0
 8102986:	e000      	b.n	810298a <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 8102988:	2301      	movs	r3, #1
}
 810298a:	4618      	mov	r0, r3
 810298c:	3718      	adds	r7, #24
 810298e:	46bd      	mov	sp, r7
 8102990:	bd80      	pop	{r7, pc}
 8102992:	bf00      	nop
 8102994:	58024400 	.word	0x58024400

08102998 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102998:	b580      	push	{r7, lr}
 810299a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810299c:	f7ff f830 	bl	8101a00 <HAL_RCC_GetHCLKFreq>
 81029a0:	4602      	mov	r2, r0
 81029a2:	4b06      	ldr	r3, [pc, #24]	; (81029bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81029a4:	6a1b      	ldr	r3, [r3, #32]
 81029a6:	091b      	lsrs	r3, r3, #4
 81029a8:	f003 0307 	and.w	r3, r3, #7
 81029ac:	4904      	ldr	r1, [pc, #16]	; (81029c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81029ae:	5ccb      	ldrb	r3, [r1, r3]
 81029b0:	f003 031f 	and.w	r3, r3, #31
 81029b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81029b8:	4618      	mov	r0, r3
 81029ba:	bd80      	pop	{r7, pc}
 81029bc:	58024400 	.word	0x58024400
 81029c0:	08108144 	.word	0x08108144

081029c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81029c4:	b480      	push	{r7}
 81029c6:	b089      	sub	sp, #36	; 0x24
 81029c8:	af00      	add	r7, sp, #0
 81029ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81029cc:	4ba1      	ldr	r3, [pc, #644]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029d0:	f003 0303 	and.w	r3, r3, #3
 81029d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81029d6:	4b9f      	ldr	r3, [pc, #636]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029da:	0b1b      	lsrs	r3, r3, #12
 81029dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81029e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81029e2:	4b9c      	ldr	r3, [pc, #624]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029e6:	091b      	lsrs	r3, r3, #4
 81029e8:	f003 0301 	and.w	r3, r3, #1
 81029ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81029ee:	4b99      	ldr	r3, [pc, #612]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81029f2:	08db      	lsrs	r3, r3, #3
 81029f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81029f8:	693a      	ldr	r2, [r7, #16]
 81029fa:	fb02 f303 	mul.w	r3, r2, r3
 81029fe:	ee07 3a90 	vmov	s15, r3
 8102a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102a0a:	697b      	ldr	r3, [r7, #20]
 8102a0c:	2b00      	cmp	r3, #0
 8102a0e:	f000 8111 	beq.w	8102c34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102a12:	69bb      	ldr	r3, [r7, #24]
 8102a14:	2b02      	cmp	r3, #2
 8102a16:	f000 8083 	beq.w	8102b20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102a1a:	69bb      	ldr	r3, [r7, #24]
 8102a1c:	2b02      	cmp	r3, #2
 8102a1e:	f200 80a1 	bhi.w	8102b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102a22:	69bb      	ldr	r3, [r7, #24]
 8102a24:	2b00      	cmp	r3, #0
 8102a26:	d003      	beq.n	8102a30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102a28:	69bb      	ldr	r3, [r7, #24]
 8102a2a:	2b01      	cmp	r3, #1
 8102a2c:	d056      	beq.n	8102adc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102a2e:	e099      	b.n	8102b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102a30:	4b88      	ldr	r3, [pc, #544]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	f003 0320 	and.w	r3, r3, #32
 8102a38:	2b00      	cmp	r3, #0
 8102a3a:	d02d      	beq.n	8102a98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102a3c:	4b85      	ldr	r3, [pc, #532]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	08db      	lsrs	r3, r3, #3
 8102a42:	f003 0303 	and.w	r3, r3, #3
 8102a46:	4a84      	ldr	r2, [pc, #528]	; (8102c58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8102a48:	fa22 f303 	lsr.w	r3, r2, r3
 8102a4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102a4e:	68bb      	ldr	r3, [r7, #8]
 8102a50:	ee07 3a90 	vmov	s15, r3
 8102a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a58:	697b      	ldr	r3, [r7, #20]
 8102a5a:	ee07 3a90 	vmov	s15, r3
 8102a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a66:	4b7b      	ldr	r3, [pc, #492]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a6e:	ee07 3a90 	vmov	s15, r3
 8102a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8102a7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102a96:	e087      	b.n	8102ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102a98:	697b      	ldr	r3, [r7, #20]
 8102a9a:	ee07 3a90 	vmov	s15, r3
 8102a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102aa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102c60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8102aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102aaa:	4b6a      	ldr	r3, [pc, #424]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ab2:	ee07 3a90 	vmov	s15, r3
 8102ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8102abe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102ada:	e065      	b.n	8102ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102adc:	697b      	ldr	r3, [r7, #20]
 8102ade:	ee07 3a90 	vmov	s15, r3
 8102ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102aee:	4b59      	ldr	r3, [pc, #356]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102af6:	ee07 3a90 	vmov	s15, r3
 8102afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102b1e:	e043      	b.n	8102ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102b20:	697b      	ldr	r3, [r7, #20]
 8102b22:	ee07 3a90 	vmov	s15, r3
 8102b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b32:	4b48      	ldr	r3, [pc, #288]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b3a:	ee07 3a90 	vmov	s15, r3
 8102b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102b62:	e021      	b.n	8102ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102b64:	697b      	ldr	r3, [r7, #20]
 8102b66:	ee07 3a90 	vmov	s15, r3
 8102b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b76:	4b37      	ldr	r3, [pc, #220]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b7e:	ee07 3a90 	vmov	s15, r3
 8102b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102c5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102ba6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8102ba8:	4b2a      	ldr	r3, [pc, #168]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102bac:	0a5b      	lsrs	r3, r3, #9
 8102bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102bb2:	ee07 3a90 	vmov	s15, r3
 8102bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bce:	ee17 2a90 	vmov	r2, s15
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8102bd6:	4b1f      	ldr	r3, [pc, #124]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102bda:	0c1b      	lsrs	r3, r3, #16
 8102bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102be0:	ee07 3a90 	vmov	s15, r3
 8102be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bfc:	ee17 2a90 	vmov	r2, s15
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8102c04:	4b13      	ldr	r3, [pc, #76]	; (8102c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102c08:	0e1b      	lsrs	r3, r3, #24
 8102c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102c0e:	ee07 3a90 	vmov	s15, r3
 8102c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102c2a:	ee17 2a90 	vmov	r2, s15
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102c32:	e008      	b.n	8102c46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	2200      	movs	r2, #0
 8102c38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8102c3a:	687b      	ldr	r3, [r7, #4]
 8102c3c:	2200      	movs	r2, #0
 8102c3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	2200      	movs	r2, #0
 8102c44:	609a      	str	r2, [r3, #8]
}
 8102c46:	bf00      	nop
 8102c48:	3724      	adds	r7, #36	; 0x24
 8102c4a:	46bd      	mov	sp, r7
 8102c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c50:	4770      	bx	lr
 8102c52:	bf00      	nop
 8102c54:	58024400 	.word	0x58024400
 8102c58:	03d09000 	.word	0x03d09000
 8102c5c:	46000000 	.word	0x46000000
 8102c60:	4c742400 	.word	0x4c742400
 8102c64:	4a742400 	.word	0x4a742400
 8102c68:	4bbebc20 	.word	0x4bbebc20

08102c6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8102c6c:	b480      	push	{r7}
 8102c6e:	b089      	sub	sp, #36	; 0x24
 8102c70:	af00      	add	r7, sp, #0
 8102c72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c74:	4ba1      	ldr	r3, [pc, #644]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c78:	f003 0303 	and.w	r3, r3, #3
 8102c7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8102c7e:	4b9f      	ldr	r3, [pc, #636]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c82:	0d1b      	lsrs	r3, r3, #20
 8102c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102c88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8102c8a:	4b9c      	ldr	r3, [pc, #624]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c8e:	0a1b      	lsrs	r3, r3, #8
 8102c90:	f003 0301 	and.w	r3, r3, #1
 8102c94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8102c96:	4b99      	ldr	r3, [pc, #612]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c9a:	08db      	lsrs	r3, r3, #3
 8102c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102ca0:	693a      	ldr	r2, [r7, #16]
 8102ca2:	fb02 f303 	mul.w	r3, r2, r3
 8102ca6:	ee07 3a90 	vmov	s15, r3
 8102caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102cb2:	697b      	ldr	r3, [r7, #20]
 8102cb4:	2b00      	cmp	r3, #0
 8102cb6:	f000 8111 	beq.w	8102edc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8102cba:	69bb      	ldr	r3, [r7, #24]
 8102cbc:	2b02      	cmp	r3, #2
 8102cbe:	f000 8083 	beq.w	8102dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8102cc2:	69bb      	ldr	r3, [r7, #24]
 8102cc4:	2b02      	cmp	r3, #2
 8102cc6:	f200 80a1 	bhi.w	8102e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8102cca:	69bb      	ldr	r3, [r7, #24]
 8102ccc:	2b00      	cmp	r3, #0
 8102cce:	d003      	beq.n	8102cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102cd0:	69bb      	ldr	r3, [r7, #24]
 8102cd2:	2b01      	cmp	r3, #1
 8102cd4:	d056      	beq.n	8102d84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8102cd6:	e099      	b.n	8102e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102cd8:	4b88      	ldr	r3, [pc, #544]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	f003 0320 	and.w	r3, r3, #32
 8102ce0:	2b00      	cmp	r3, #0
 8102ce2:	d02d      	beq.n	8102d40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102ce4:	4b85      	ldr	r3, [pc, #532]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ce6:	681b      	ldr	r3, [r3, #0]
 8102ce8:	08db      	lsrs	r3, r3, #3
 8102cea:	f003 0303 	and.w	r3, r3, #3
 8102cee:	4a84      	ldr	r2, [pc, #528]	; (8102f00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8102cf4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102cf6:	68bb      	ldr	r3, [r7, #8]
 8102cf8:	ee07 3a90 	vmov	s15, r3
 8102cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d00:	697b      	ldr	r3, [r7, #20]
 8102d02:	ee07 3a90 	vmov	s15, r3
 8102d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d0e:	4b7b      	ldr	r3, [pc, #492]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d16:	ee07 3a90 	vmov	s15, r3
 8102d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102d3e:	e087      	b.n	8102e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102d40:	697b      	ldr	r3, [r7, #20]
 8102d42:	ee07 3a90 	vmov	s15, r3
 8102d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102f08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d52:	4b6a      	ldr	r3, [pc, #424]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d5a:	ee07 3a90 	vmov	s15, r3
 8102d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102d82:	e065      	b.n	8102e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102d84:	697b      	ldr	r3, [r7, #20]
 8102d86:	ee07 3a90 	vmov	s15, r3
 8102d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d96:	4b59      	ldr	r3, [pc, #356]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d9e:	ee07 3a90 	vmov	s15, r3
 8102da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102daa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102dc6:	e043      	b.n	8102e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102dc8:	697b      	ldr	r3, [r7, #20]
 8102dca:	ee07 3a90 	vmov	s15, r3
 8102dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8102dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102dda:	4b48      	ldr	r3, [pc, #288]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102de2:	ee07 3a90 	vmov	s15, r3
 8102de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8102dee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102e0a:	e021      	b.n	8102e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102e0c:	697b      	ldr	r3, [r7, #20]
 8102e0e:	ee07 3a90 	vmov	s15, r3
 8102e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e1e:	4b37      	ldr	r3, [pc, #220]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e26:	ee07 3a90 	vmov	s15, r3
 8102e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102e32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102f04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102e4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8102e50:	4b2a      	ldr	r3, [pc, #168]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e54:	0a5b      	lsrs	r3, r3, #9
 8102e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102e5a:	ee07 3a90 	vmov	s15, r3
 8102e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e76:	ee17 2a90 	vmov	r2, s15
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8102e7e:	4b1f      	ldr	r3, [pc, #124]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e82:	0c1b      	lsrs	r3, r3, #16
 8102e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102e88:	ee07 3a90 	vmov	s15, r3
 8102e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102e94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ea4:	ee17 2a90 	vmov	r2, s15
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8102eac:	4b13      	ldr	r3, [pc, #76]	; (8102efc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102eb0:	0e1b      	lsrs	r3, r3, #24
 8102eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102eb6:	ee07 3a90 	vmov	s15, r3
 8102eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8102eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ed2:	ee17 2a90 	vmov	r2, s15
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102eda:	e008      	b.n	8102eee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	2200      	movs	r2, #0
 8102ee0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	2200      	movs	r2, #0
 8102ee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	2200      	movs	r2, #0
 8102eec:	609a      	str	r2, [r3, #8]
}
 8102eee:	bf00      	nop
 8102ef0:	3724      	adds	r7, #36	; 0x24
 8102ef2:	46bd      	mov	sp, r7
 8102ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ef8:	4770      	bx	lr
 8102efa:	bf00      	nop
 8102efc:	58024400 	.word	0x58024400
 8102f00:	03d09000 	.word	0x03d09000
 8102f04:	46000000 	.word	0x46000000
 8102f08:	4c742400 	.word	0x4c742400
 8102f0c:	4a742400 	.word	0x4a742400
 8102f10:	4bbebc20 	.word	0x4bbebc20

08102f14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102f14:	b580      	push	{r7, lr}
 8102f16:	b084      	sub	sp, #16
 8102f18:	af00      	add	r7, sp, #0
 8102f1a:	6078      	str	r0, [r7, #4]
 8102f1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102f1e:	2300      	movs	r3, #0
 8102f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102f22:	4b54      	ldr	r3, [pc, #336]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f26:	f003 0303 	and.w	r3, r3, #3
 8102f2a:	2b03      	cmp	r3, #3
 8102f2c:	d101      	bne.n	8102f32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102f2e:	2301      	movs	r3, #1
 8102f30:	e09b      	b.n	810306a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102f32:	4b50      	ldr	r3, [pc, #320]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	4a4f      	ldr	r2, [pc, #316]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102f3e:	f7fd ffef 	bl	8100f20 <HAL_GetTick>
 8102f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102f44:	e008      	b.n	8102f58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102f46:	f7fd ffeb 	bl	8100f20 <HAL_GetTick>
 8102f4a:	4602      	mov	r2, r0
 8102f4c:	68bb      	ldr	r3, [r7, #8]
 8102f4e:	1ad3      	subs	r3, r2, r3
 8102f50:	2b02      	cmp	r3, #2
 8102f52:	d901      	bls.n	8102f58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102f54:	2303      	movs	r3, #3
 8102f56:	e088      	b.n	810306a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102f58:	4b46      	ldr	r3, [pc, #280]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	d1f0      	bne.n	8102f46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102f64:	4b43      	ldr	r3, [pc, #268]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	031b      	lsls	r3, r3, #12
 8102f72:	4940      	ldr	r1, [pc, #256]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102f74:	4313      	orrs	r3, r2
 8102f76:	628b      	str	r3, [r1, #40]	; 0x28
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	685b      	ldr	r3, [r3, #4]
 8102f7c:	3b01      	subs	r3, #1
 8102f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	689b      	ldr	r3, [r3, #8]
 8102f86:	3b01      	subs	r3, #1
 8102f88:	025b      	lsls	r3, r3, #9
 8102f8a:	b29b      	uxth	r3, r3
 8102f8c:	431a      	orrs	r2, r3
 8102f8e:	687b      	ldr	r3, [r7, #4]
 8102f90:	68db      	ldr	r3, [r3, #12]
 8102f92:	3b01      	subs	r3, #1
 8102f94:	041b      	lsls	r3, r3, #16
 8102f96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102f9a:	431a      	orrs	r2, r3
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	691b      	ldr	r3, [r3, #16]
 8102fa0:	3b01      	subs	r3, #1
 8102fa2:	061b      	lsls	r3, r3, #24
 8102fa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102fa8:	4932      	ldr	r1, [pc, #200]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102faa:	4313      	orrs	r3, r2
 8102fac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102fae:	4b31      	ldr	r3, [pc, #196]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	695b      	ldr	r3, [r3, #20]
 8102fba:	492e      	ldr	r1, [pc, #184]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102fbc:	4313      	orrs	r3, r2
 8102fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102fc0:	4b2c      	ldr	r3, [pc, #176]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fc4:	f023 0220 	bic.w	r2, r3, #32
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	699b      	ldr	r3, [r3, #24]
 8102fcc:	4929      	ldr	r1, [pc, #164]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102fce:	4313      	orrs	r3, r2
 8102fd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102fd2:	4b28      	ldr	r3, [pc, #160]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fd6:	4a27      	ldr	r2, [pc, #156]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102fd8:	f023 0310 	bic.w	r3, r3, #16
 8102fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102fde:	4b25      	ldr	r3, [pc, #148]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102fe6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102fea:	687a      	ldr	r2, [r7, #4]
 8102fec:	69d2      	ldr	r2, [r2, #28]
 8102fee:	00d2      	lsls	r2, r2, #3
 8102ff0:	4920      	ldr	r1, [pc, #128]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102ff2:	4313      	orrs	r3, r2
 8102ff4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102ff6:	4b1f      	ldr	r3, [pc, #124]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ffa:	4a1e      	ldr	r2, [pc, #120]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8102ffc:	f043 0310 	orr.w	r3, r3, #16
 8103000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103002:	683b      	ldr	r3, [r7, #0]
 8103004:	2b00      	cmp	r3, #0
 8103006:	d106      	bne.n	8103016 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103008:	4b1a      	ldr	r3, [pc, #104]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 810300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810300c:	4a19      	ldr	r2, [pc, #100]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 810300e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103012:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103014:	e00f      	b.n	8103036 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103016:	683b      	ldr	r3, [r7, #0]
 8103018:	2b01      	cmp	r3, #1
 810301a:	d106      	bne.n	810302a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810301c:	4b15      	ldr	r3, [pc, #84]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 810301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103020:	4a14      	ldr	r2, [pc, #80]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8103022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103028:	e005      	b.n	8103036 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810302a:	4b12      	ldr	r3, [pc, #72]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 810302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810302e:	4a11      	ldr	r2, [pc, #68]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8103030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103034:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103036:	4b0f      	ldr	r3, [pc, #60]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 8103038:	681b      	ldr	r3, [r3, #0]
 810303a:	4a0e      	ldr	r2, [pc, #56]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 810303c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103042:	f7fd ff6d 	bl	8100f20 <HAL_GetTick>
 8103046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103048:	e008      	b.n	810305c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810304a:	f7fd ff69 	bl	8100f20 <HAL_GetTick>
 810304e:	4602      	mov	r2, r0
 8103050:	68bb      	ldr	r3, [r7, #8]
 8103052:	1ad3      	subs	r3, r2, r3
 8103054:	2b02      	cmp	r3, #2
 8103056:	d901      	bls.n	810305c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103058:	2303      	movs	r3, #3
 810305a:	e006      	b.n	810306a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810305c:	4b05      	ldr	r3, [pc, #20]	; (8103074 <RCCEx_PLL2_Config+0x160>)
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103064:	2b00      	cmp	r3, #0
 8103066:	d0f0      	beq.n	810304a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103068:	7bfb      	ldrb	r3, [r7, #15]
}
 810306a:	4618      	mov	r0, r3
 810306c:	3710      	adds	r7, #16
 810306e:	46bd      	mov	sp, r7
 8103070:	bd80      	pop	{r7, pc}
 8103072:	bf00      	nop
 8103074:	58024400 	.word	0x58024400

08103078 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103078:	b580      	push	{r7, lr}
 810307a:	b084      	sub	sp, #16
 810307c:	af00      	add	r7, sp, #0
 810307e:	6078      	str	r0, [r7, #4]
 8103080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103082:	2300      	movs	r3, #0
 8103084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103086:	4b54      	ldr	r3, [pc, #336]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810308a:	f003 0303 	and.w	r3, r3, #3
 810308e:	2b03      	cmp	r3, #3
 8103090:	d101      	bne.n	8103096 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103092:	2301      	movs	r3, #1
 8103094:	e09b      	b.n	81031ce <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103096:	4b50      	ldr	r3, [pc, #320]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	4a4f      	ldr	r2, [pc, #316]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 810309c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81030a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81030a2:	f7fd ff3d 	bl	8100f20 <HAL_GetTick>
 81030a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81030a8:	e008      	b.n	81030bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81030aa:	f7fd ff39 	bl	8100f20 <HAL_GetTick>
 81030ae:	4602      	mov	r2, r0
 81030b0:	68bb      	ldr	r3, [r7, #8]
 81030b2:	1ad3      	subs	r3, r2, r3
 81030b4:	2b02      	cmp	r3, #2
 81030b6:	d901      	bls.n	81030bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81030b8:	2303      	movs	r3, #3
 81030ba:	e088      	b.n	81031ce <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81030bc:	4b46      	ldr	r3, [pc, #280]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81030c4:	2b00      	cmp	r3, #0
 81030c6:	d1f0      	bne.n	81030aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81030c8:	4b43      	ldr	r3, [pc, #268]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 81030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	051b      	lsls	r3, r3, #20
 81030d6:	4940      	ldr	r1, [pc, #256]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 81030d8:	4313      	orrs	r3, r2
 81030da:	628b      	str	r3, [r1, #40]	; 0x28
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	685b      	ldr	r3, [r3, #4]
 81030e0:	3b01      	subs	r3, #1
 81030e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	689b      	ldr	r3, [r3, #8]
 81030ea:	3b01      	subs	r3, #1
 81030ec:	025b      	lsls	r3, r3, #9
 81030ee:	b29b      	uxth	r3, r3
 81030f0:	431a      	orrs	r2, r3
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	68db      	ldr	r3, [r3, #12]
 81030f6:	3b01      	subs	r3, #1
 81030f8:	041b      	lsls	r3, r3, #16
 81030fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81030fe:	431a      	orrs	r2, r3
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	691b      	ldr	r3, [r3, #16]
 8103104:	3b01      	subs	r3, #1
 8103106:	061b      	lsls	r3, r3, #24
 8103108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810310c:	4932      	ldr	r1, [pc, #200]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 810310e:	4313      	orrs	r3, r2
 8103110:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103112:	4b31      	ldr	r3, [pc, #196]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	695b      	ldr	r3, [r3, #20]
 810311e:	492e      	ldr	r1, [pc, #184]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103120:	4313      	orrs	r3, r2
 8103122:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103124:	4b2c      	ldr	r3, [pc, #176]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103128:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	699b      	ldr	r3, [r3, #24]
 8103130:	4929      	ldr	r1, [pc, #164]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103132:	4313      	orrs	r3, r2
 8103134:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103136:	4b28      	ldr	r3, [pc, #160]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810313a:	4a27      	ldr	r2, [pc, #156]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 810313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103142:	4b25      	ldr	r3, [pc, #148]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810314a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810314e:	687a      	ldr	r2, [r7, #4]
 8103150:	69d2      	ldr	r2, [r2, #28]
 8103152:	00d2      	lsls	r2, r2, #3
 8103154:	4920      	ldr	r1, [pc, #128]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103156:	4313      	orrs	r3, r2
 8103158:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810315a:	4b1f      	ldr	r3, [pc, #124]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 810315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810315e:	4a1e      	ldr	r2, [pc, #120]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103166:	683b      	ldr	r3, [r7, #0]
 8103168:	2b00      	cmp	r3, #0
 810316a:	d106      	bne.n	810317a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810316c:	4b1a      	ldr	r3, [pc, #104]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 810316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103170:	4a19      	ldr	r2, [pc, #100]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103172:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103178:	e00f      	b.n	810319a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810317a:	683b      	ldr	r3, [r7, #0]
 810317c:	2b01      	cmp	r3, #1
 810317e:	d106      	bne.n	810318e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103180:	4b15      	ldr	r3, [pc, #84]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103184:	4a14      	ldr	r2, [pc, #80]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103186:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810318a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810318c:	e005      	b.n	810319a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810318e:	4b12      	ldr	r3, [pc, #72]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103192:	4a11      	ldr	r2, [pc, #68]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 8103194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103198:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810319a:	4b0f      	ldr	r3, [pc, #60]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	4a0e      	ldr	r2, [pc, #56]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 81031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81031a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81031a6:	f7fd febb 	bl	8100f20 <HAL_GetTick>
 81031aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81031ac:	e008      	b.n	81031c0 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81031ae:	f7fd feb7 	bl	8100f20 <HAL_GetTick>
 81031b2:	4602      	mov	r2, r0
 81031b4:	68bb      	ldr	r3, [r7, #8]
 81031b6:	1ad3      	subs	r3, r2, r3
 81031b8:	2b02      	cmp	r3, #2
 81031ba:	d901      	bls.n	81031c0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81031bc:	2303      	movs	r3, #3
 81031be:	e006      	b.n	81031ce <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81031c0:	4b05      	ldr	r3, [pc, #20]	; (81031d8 <RCCEx_PLL3_Config+0x160>)
 81031c2:	681b      	ldr	r3, [r3, #0]
 81031c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81031c8:	2b00      	cmp	r3, #0
 81031ca:	d0f0      	beq.n	81031ae <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 81031ce:	4618      	mov	r0, r3
 81031d0:	3710      	adds	r7, #16
 81031d2:	46bd      	mov	sp, r7
 81031d4:	bd80      	pop	{r7, pc}
 81031d6:	bf00      	nop
 81031d8:	58024400 	.word	0x58024400

081031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81031dc:	b580      	push	{r7, lr}
 81031de:	b082      	sub	sp, #8
 81031e0:	af00      	add	r7, sp, #0
 81031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	d101      	bne.n	81031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81031ea:	2301      	movs	r3, #1
 81031ec:	e049      	b.n	8103282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81031f4:	b2db      	uxtb	r3, r3
 81031f6:	2b00      	cmp	r3, #0
 81031f8:	d106      	bne.n	8103208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	2200      	movs	r2, #0
 81031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103202:	6878      	ldr	r0, [r7, #4]
 8103204:	f7fd fce0 	bl	8100bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	2202      	movs	r2, #2
 810320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103210:	687b      	ldr	r3, [r7, #4]
 8103212:	681a      	ldr	r2, [r3, #0]
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	3304      	adds	r3, #4
 8103218:	4619      	mov	r1, r3
 810321a:	4610      	mov	r0, r2
 810321c:	f000 f9f6 	bl	810360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	2201      	movs	r2, #1
 8103224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	2201      	movs	r2, #1
 810322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	2201      	movs	r2, #1
 8103234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	2201      	movs	r2, #1
 810323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	2201      	movs	r2, #1
 8103244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	2201      	movs	r2, #1
 810324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	2201      	movs	r2, #1
 8103254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	2201      	movs	r2, #1
 810325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	2201      	movs	r2, #1
 8103264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	2201      	movs	r2, #1
 810326c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	2201      	movs	r2, #1
 8103274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	2201      	movs	r2, #1
 810327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103280:	2300      	movs	r3, #0
}
 8103282:	4618      	mov	r0, r3
 8103284:	3708      	adds	r7, #8
 8103286:	46bd      	mov	sp, r7
 8103288:	bd80      	pop	{r7, pc}
	...

0810328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810328c:	b480      	push	{r7}
 810328e:	b085      	sub	sp, #20
 8103290:	af00      	add	r7, sp, #0
 8103292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810329a:	b2db      	uxtb	r3, r3
 810329c:	2b01      	cmp	r3, #1
 810329e:	d001      	beq.n	81032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81032a0:	2301      	movs	r3, #1
 81032a2:	e054      	b.n	810334e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	2202      	movs	r2, #2
 81032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81032ac:	687b      	ldr	r3, [r7, #4]
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	68da      	ldr	r2, [r3, #12]
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	f042 0201 	orr.w	r2, r2, #1
 81032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	4a26      	ldr	r2, [pc, #152]	; (810335c <HAL_TIM_Base_Start_IT+0xd0>)
 81032c2:	4293      	cmp	r3, r2
 81032c4:	d022      	beq.n	810330c <HAL_TIM_Base_Start_IT+0x80>
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	681b      	ldr	r3, [r3, #0]
 81032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81032ce:	d01d      	beq.n	810330c <HAL_TIM_Base_Start_IT+0x80>
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	4a22      	ldr	r2, [pc, #136]	; (8103360 <HAL_TIM_Base_Start_IT+0xd4>)
 81032d6:	4293      	cmp	r3, r2
 81032d8:	d018      	beq.n	810330c <HAL_TIM_Base_Start_IT+0x80>
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	4a21      	ldr	r2, [pc, #132]	; (8103364 <HAL_TIM_Base_Start_IT+0xd8>)
 81032e0:	4293      	cmp	r3, r2
 81032e2:	d013      	beq.n	810330c <HAL_TIM_Base_Start_IT+0x80>
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	4a1f      	ldr	r2, [pc, #124]	; (8103368 <HAL_TIM_Base_Start_IT+0xdc>)
 81032ea:	4293      	cmp	r3, r2
 81032ec:	d00e      	beq.n	810330c <HAL_TIM_Base_Start_IT+0x80>
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	4a1e      	ldr	r2, [pc, #120]	; (810336c <HAL_TIM_Base_Start_IT+0xe0>)
 81032f4:	4293      	cmp	r3, r2
 81032f6:	d009      	beq.n	810330c <HAL_TIM_Base_Start_IT+0x80>
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	4a1c      	ldr	r2, [pc, #112]	; (8103370 <HAL_TIM_Base_Start_IT+0xe4>)
 81032fe:	4293      	cmp	r3, r2
 8103300:	d004      	beq.n	810330c <HAL_TIM_Base_Start_IT+0x80>
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	4a1b      	ldr	r2, [pc, #108]	; (8103374 <HAL_TIM_Base_Start_IT+0xe8>)
 8103308:	4293      	cmp	r3, r2
 810330a:	d115      	bne.n	8103338 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	689a      	ldr	r2, [r3, #8]
 8103312:	4b19      	ldr	r3, [pc, #100]	; (8103378 <HAL_TIM_Base_Start_IT+0xec>)
 8103314:	4013      	ands	r3, r2
 8103316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103318:	68fb      	ldr	r3, [r7, #12]
 810331a:	2b06      	cmp	r3, #6
 810331c:	d015      	beq.n	810334a <HAL_TIM_Base_Start_IT+0xbe>
 810331e:	68fb      	ldr	r3, [r7, #12]
 8103320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103324:	d011      	beq.n	810334a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	681a      	ldr	r2, [r3, #0]
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	f042 0201 	orr.w	r2, r2, #1
 8103334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103336:	e008      	b.n	810334a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	681a      	ldr	r2, [r3, #0]
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	f042 0201 	orr.w	r2, r2, #1
 8103346:	601a      	str	r2, [r3, #0]
 8103348:	e000      	b.n	810334c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810334a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810334c:	2300      	movs	r3, #0
}
 810334e:	4618      	mov	r0, r3
 8103350:	3714      	adds	r7, #20
 8103352:	46bd      	mov	sp, r7
 8103354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103358:	4770      	bx	lr
 810335a:	bf00      	nop
 810335c:	40010000 	.word	0x40010000
 8103360:	40000400 	.word	0x40000400
 8103364:	40000800 	.word	0x40000800
 8103368:	40000c00 	.word	0x40000c00
 810336c:	40010400 	.word	0x40010400
 8103370:	40001800 	.word	0x40001800
 8103374:	40014000 	.word	0x40014000
 8103378:	00010007 	.word	0x00010007

0810337c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810337c:	b580      	push	{r7, lr}
 810337e:	b082      	sub	sp, #8
 8103380:	af00      	add	r7, sp, #0
 8103382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	691b      	ldr	r3, [r3, #16]
 810338a:	f003 0302 	and.w	r3, r3, #2
 810338e:	2b02      	cmp	r3, #2
 8103390:	d122      	bne.n	81033d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	68db      	ldr	r3, [r3, #12]
 8103398:	f003 0302 	and.w	r3, r3, #2
 810339c:	2b02      	cmp	r3, #2
 810339e:	d11b      	bne.n	81033d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	f06f 0202 	mvn.w	r2, #2
 81033a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	2201      	movs	r2, #1
 81033ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	699b      	ldr	r3, [r3, #24]
 81033b6:	f003 0303 	and.w	r3, r3, #3
 81033ba:	2b00      	cmp	r3, #0
 81033bc:	d003      	beq.n	81033c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81033be:	6878      	ldr	r0, [r7, #4]
 81033c0:	f000 f905 	bl	81035ce <HAL_TIM_IC_CaptureCallback>
 81033c4:	e005      	b.n	81033d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81033c6:	6878      	ldr	r0, [r7, #4]
 81033c8:	f000 f8f7 	bl	81035ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81033cc:	6878      	ldr	r0, [r7, #4]
 81033ce:	f000 f908 	bl	81035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81033d2:	687b      	ldr	r3, [r7, #4]
 81033d4:	2200      	movs	r2, #0
 81033d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	691b      	ldr	r3, [r3, #16]
 81033de:	f003 0304 	and.w	r3, r3, #4
 81033e2:	2b04      	cmp	r3, #4
 81033e4:	d122      	bne.n	810342c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	681b      	ldr	r3, [r3, #0]
 81033ea:	68db      	ldr	r3, [r3, #12]
 81033ec:	f003 0304 	and.w	r3, r3, #4
 81033f0:	2b04      	cmp	r3, #4
 81033f2:	d11b      	bne.n	810342c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	f06f 0204 	mvn.w	r2, #4
 81033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	2202      	movs	r2, #2
 8103402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	699b      	ldr	r3, [r3, #24]
 810340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810340e:	2b00      	cmp	r3, #0
 8103410:	d003      	beq.n	810341a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103412:	6878      	ldr	r0, [r7, #4]
 8103414:	f000 f8db 	bl	81035ce <HAL_TIM_IC_CaptureCallback>
 8103418:	e005      	b.n	8103426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810341a:	6878      	ldr	r0, [r7, #4]
 810341c:	f000 f8cd 	bl	81035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103420:	6878      	ldr	r0, [r7, #4]
 8103422:	f000 f8de 	bl	81035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	2200      	movs	r2, #0
 810342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	691b      	ldr	r3, [r3, #16]
 8103432:	f003 0308 	and.w	r3, r3, #8
 8103436:	2b08      	cmp	r3, #8
 8103438:	d122      	bne.n	8103480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	681b      	ldr	r3, [r3, #0]
 810343e:	68db      	ldr	r3, [r3, #12]
 8103440:	f003 0308 	and.w	r3, r3, #8
 8103444:	2b08      	cmp	r3, #8
 8103446:	d11b      	bne.n	8103480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	f06f 0208 	mvn.w	r2, #8
 8103450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	2204      	movs	r2, #4
 8103456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	69db      	ldr	r3, [r3, #28]
 810345e:	f003 0303 	and.w	r3, r3, #3
 8103462:	2b00      	cmp	r3, #0
 8103464:	d003      	beq.n	810346e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103466:	6878      	ldr	r0, [r7, #4]
 8103468:	f000 f8b1 	bl	81035ce <HAL_TIM_IC_CaptureCallback>
 810346c:	e005      	b.n	810347a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810346e:	6878      	ldr	r0, [r7, #4]
 8103470:	f000 f8a3 	bl	81035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103474:	6878      	ldr	r0, [r7, #4]
 8103476:	f000 f8b4 	bl	81035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	2200      	movs	r2, #0
 810347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	691b      	ldr	r3, [r3, #16]
 8103486:	f003 0310 	and.w	r3, r3, #16
 810348a:	2b10      	cmp	r3, #16
 810348c:	d122      	bne.n	81034d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	68db      	ldr	r3, [r3, #12]
 8103494:	f003 0310 	and.w	r3, r3, #16
 8103498:	2b10      	cmp	r3, #16
 810349a:	d11b      	bne.n	81034d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	681b      	ldr	r3, [r3, #0]
 81034a0:	f06f 0210 	mvn.w	r2, #16
 81034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	2208      	movs	r2, #8
 81034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	681b      	ldr	r3, [r3, #0]
 81034b0:	69db      	ldr	r3, [r3, #28]
 81034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81034b6:	2b00      	cmp	r3, #0
 81034b8:	d003      	beq.n	81034c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81034ba:	6878      	ldr	r0, [r7, #4]
 81034bc:	f000 f887 	bl	81035ce <HAL_TIM_IC_CaptureCallback>
 81034c0:	e005      	b.n	81034ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81034c2:	6878      	ldr	r0, [r7, #4]
 81034c4:	f000 f879 	bl	81035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81034c8:	6878      	ldr	r0, [r7, #4]
 81034ca:	f000 f88a 	bl	81035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	2200      	movs	r2, #0
 81034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	681b      	ldr	r3, [r3, #0]
 81034d8:	691b      	ldr	r3, [r3, #16]
 81034da:	f003 0301 	and.w	r3, r3, #1
 81034de:	2b01      	cmp	r3, #1
 81034e0:	d10e      	bne.n	8103500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	681b      	ldr	r3, [r3, #0]
 81034e6:	68db      	ldr	r3, [r3, #12]
 81034e8:	f003 0301 	and.w	r3, r3, #1
 81034ec:	2b01      	cmp	r3, #1
 81034ee:	d107      	bne.n	8103500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	f06f 0201 	mvn.w	r2, #1
 81034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81034fa:	6878      	ldr	r0, [r7, #4]
 81034fc:	f7fd f9b0 	bl	8100860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8103500:	687b      	ldr	r3, [r7, #4]
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	691b      	ldr	r3, [r3, #16]
 8103506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810350a:	2b80      	cmp	r3, #128	; 0x80
 810350c:	d10e      	bne.n	810352c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	68db      	ldr	r3, [r3, #12]
 8103514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103518:	2b80      	cmp	r3, #128	; 0x80
 810351a:	d107      	bne.n	810352c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8103524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103526:	6878      	ldr	r0, [r7, #4]
 8103528:	f000 f914 	bl	8103754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	691b      	ldr	r3, [r3, #16]
 8103532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810353a:	d10e      	bne.n	810355a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	68db      	ldr	r3, [r3, #12]
 8103542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103546:	2b80      	cmp	r3, #128	; 0x80
 8103548:	d107      	bne.n	810355a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8103552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103554:	6878      	ldr	r0, [r7, #4]
 8103556:	f000 f907 	bl	8103768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	691b      	ldr	r3, [r3, #16]
 8103560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103564:	2b40      	cmp	r3, #64	; 0x40
 8103566:	d10e      	bne.n	8103586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	68db      	ldr	r3, [r3, #12]
 810356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103572:	2b40      	cmp	r3, #64	; 0x40
 8103574:	d107      	bne.n	8103586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	681b      	ldr	r3, [r3, #0]
 810357a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103580:	6878      	ldr	r0, [r7, #4]
 8103582:	f000 f838 	bl	81035f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	691b      	ldr	r3, [r3, #16]
 810358c:	f003 0320 	and.w	r3, r3, #32
 8103590:	2b20      	cmp	r3, #32
 8103592:	d10e      	bne.n	81035b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	68db      	ldr	r3, [r3, #12]
 810359a:	f003 0320 	and.w	r3, r3, #32
 810359e:	2b20      	cmp	r3, #32
 81035a0:	d107      	bne.n	81035b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	f06f 0220 	mvn.w	r2, #32
 81035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81035ac:	6878      	ldr	r0, [r7, #4]
 81035ae:	f000 f8c7 	bl	8103740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81035b2:	bf00      	nop
 81035b4:	3708      	adds	r7, #8
 81035b6:	46bd      	mov	sp, r7
 81035b8:	bd80      	pop	{r7, pc}

081035ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81035ba:	b480      	push	{r7}
 81035bc:	b083      	sub	sp, #12
 81035be:	af00      	add	r7, sp, #0
 81035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81035c2:	bf00      	nop
 81035c4:	370c      	adds	r7, #12
 81035c6:	46bd      	mov	sp, r7
 81035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035cc:	4770      	bx	lr

081035ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81035ce:	b480      	push	{r7}
 81035d0:	b083      	sub	sp, #12
 81035d2:	af00      	add	r7, sp, #0
 81035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81035d6:	bf00      	nop
 81035d8:	370c      	adds	r7, #12
 81035da:	46bd      	mov	sp, r7
 81035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035e0:	4770      	bx	lr

081035e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81035e2:	b480      	push	{r7}
 81035e4:	b083      	sub	sp, #12
 81035e6:	af00      	add	r7, sp, #0
 81035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81035ea:	bf00      	nop
 81035ec:	370c      	adds	r7, #12
 81035ee:	46bd      	mov	sp, r7
 81035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035f4:	4770      	bx	lr

081035f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81035f6:	b480      	push	{r7}
 81035f8:	b083      	sub	sp, #12
 81035fa:	af00      	add	r7, sp, #0
 81035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81035fe:	bf00      	nop
 8103600:	370c      	adds	r7, #12
 8103602:	46bd      	mov	sp, r7
 8103604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103608:	4770      	bx	lr
	...

0810360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810360c:	b480      	push	{r7}
 810360e:	b085      	sub	sp, #20
 8103610:	af00      	add	r7, sp, #0
 8103612:	6078      	str	r0, [r7, #4]
 8103614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	4a40      	ldr	r2, [pc, #256]	; (8103720 <TIM_Base_SetConfig+0x114>)
 8103620:	4293      	cmp	r3, r2
 8103622:	d013      	beq.n	810364c <TIM_Base_SetConfig+0x40>
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810362a:	d00f      	beq.n	810364c <TIM_Base_SetConfig+0x40>
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	4a3d      	ldr	r2, [pc, #244]	; (8103724 <TIM_Base_SetConfig+0x118>)
 8103630:	4293      	cmp	r3, r2
 8103632:	d00b      	beq.n	810364c <TIM_Base_SetConfig+0x40>
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	4a3c      	ldr	r2, [pc, #240]	; (8103728 <TIM_Base_SetConfig+0x11c>)
 8103638:	4293      	cmp	r3, r2
 810363a:	d007      	beq.n	810364c <TIM_Base_SetConfig+0x40>
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	4a3b      	ldr	r2, [pc, #236]	; (810372c <TIM_Base_SetConfig+0x120>)
 8103640:	4293      	cmp	r3, r2
 8103642:	d003      	beq.n	810364c <TIM_Base_SetConfig+0x40>
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	4a3a      	ldr	r2, [pc, #232]	; (8103730 <TIM_Base_SetConfig+0x124>)
 8103648:	4293      	cmp	r3, r2
 810364a:	d108      	bne.n	810365e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810364c:	68fb      	ldr	r3, [r7, #12]
 810364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103654:	683b      	ldr	r3, [r7, #0]
 8103656:	685b      	ldr	r3, [r3, #4]
 8103658:	68fa      	ldr	r2, [r7, #12]
 810365a:	4313      	orrs	r3, r2
 810365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	4a2f      	ldr	r2, [pc, #188]	; (8103720 <TIM_Base_SetConfig+0x114>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d01f      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810366c:	d01b      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	4a2c      	ldr	r2, [pc, #176]	; (8103724 <TIM_Base_SetConfig+0x118>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d017      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	4a2b      	ldr	r2, [pc, #172]	; (8103728 <TIM_Base_SetConfig+0x11c>)
 810367a:	4293      	cmp	r3, r2
 810367c:	d013      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	4a2a      	ldr	r2, [pc, #168]	; (810372c <TIM_Base_SetConfig+0x120>)
 8103682:	4293      	cmp	r3, r2
 8103684:	d00f      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	4a29      	ldr	r2, [pc, #164]	; (8103730 <TIM_Base_SetConfig+0x124>)
 810368a:	4293      	cmp	r3, r2
 810368c:	d00b      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	4a28      	ldr	r2, [pc, #160]	; (8103734 <TIM_Base_SetConfig+0x128>)
 8103692:	4293      	cmp	r3, r2
 8103694:	d007      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	4a27      	ldr	r2, [pc, #156]	; (8103738 <TIM_Base_SetConfig+0x12c>)
 810369a:	4293      	cmp	r3, r2
 810369c:	d003      	beq.n	81036a6 <TIM_Base_SetConfig+0x9a>
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	4a26      	ldr	r2, [pc, #152]	; (810373c <TIM_Base_SetConfig+0x130>)
 81036a2:	4293      	cmp	r3, r2
 81036a4:	d108      	bne.n	81036b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81036a6:	68fb      	ldr	r3, [r7, #12]
 81036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81036ae:	683b      	ldr	r3, [r7, #0]
 81036b0:	68db      	ldr	r3, [r3, #12]
 81036b2:	68fa      	ldr	r2, [r7, #12]
 81036b4:	4313      	orrs	r3, r2
 81036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81036b8:	68fb      	ldr	r3, [r7, #12]
 81036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81036be:	683b      	ldr	r3, [r7, #0]
 81036c0:	695b      	ldr	r3, [r3, #20]
 81036c2:	4313      	orrs	r3, r2
 81036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	68fa      	ldr	r2, [r7, #12]
 81036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81036cc:	683b      	ldr	r3, [r7, #0]
 81036ce:	689a      	ldr	r2, [r3, #8]
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81036d4:	683b      	ldr	r3, [r7, #0]
 81036d6:	681a      	ldr	r2, [r3, #0]
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	4a10      	ldr	r2, [pc, #64]	; (8103720 <TIM_Base_SetConfig+0x114>)
 81036e0:	4293      	cmp	r3, r2
 81036e2:	d00f      	beq.n	8103704 <TIM_Base_SetConfig+0xf8>
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	4a12      	ldr	r2, [pc, #72]	; (8103730 <TIM_Base_SetConfig+0x124>)
 81036e8:	4293      	cmp	r3, r2
 81036ea:	d00b      	beq.n	8103704 <TIM_Base_SetConfig+0xf8>
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	4a11      	ldr	r2, [pc, #68]	; (8103734 <TIM_Base_SetConfig+0x128>)
 81036f0:	4293      	cmp	r3, r2
 81036f2:	d007      	beq.n	8103704 <TIM_Base_SetConfig+0xf8>
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	4a10      	ldr	r2, [pc, #64]	; (8103738 <TIM_Base_SetConfig+0x12c>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d003      	beq.n	8103704 <TIM_Base_SetConfig+0xf8>
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	4a0f      	ldr	r2, [pc, #60]	; (810373c <TIM_Base_SetConfig+0x130>)
 8103700:	4293      	cmp	r3, r2
 8103702:	d103      	bne.n	810370c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103704:	683b      	ldr	r3, [r7, #0]
 8103706:	691a      	ldr	r2, [r3, #16]
 8103708:	687b      	ldr	r3, [r7, #4]
 810370a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	2201      	movs	r2, #1
 8103710:	615a      	str	r2, [r3, #20]
}
 8103712:	bf00      	nop
 8103714:	3714      	adds	r7, #20
 8103716:	46bd      	mov	sp, r7
 8103718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810371c:	4770      	bx	lr
 810371e:	bf00      	nop
 8103720:	40010000 	.word	0x40010000
 8103724:	40000400 	.word	0x40000400
 8103728:	40000800 	.word	0x40000800
 810372c:	40000c00 	.word	0x40000c00
 8103730:	40010400 	.word	0x40010400
 8103734:	40014000 	.word	0x40014000
 8103738:	40014400 	.word	0x40014400
 810373c:	40014800 	.word	0x40014800

08103740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103740:	b480      	push	{r7}
 8103742:	b083      	sub	sp, #12
 8103744:	af00      	add	r7, sp, #0
 8103746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8103748:	bf00      	nop
 810374a:	370c      	adds	r7, #12
 810374c:	46bd      	mov	sp, r7
 810374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103752:	4770      	bx	lr

08103754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103754:	b480      	push	{r7}
 8103756:	b083      	sub	sp, #12
 8103758:	af00      	add	r7, sp, #0
 810375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810375c:	bf00      	nop
 810375e:	370c      	adds	r7, #12
 8103760:	46bd      	mov	sp, r7
 8103762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103766:	4770      	bx	lr

08103768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8103768:	b480      	push	{r7}
 810376a:	b083      	sub	sp, #12
 810376c:	af00      	add	r7, sp, #0
 810376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103770:	bf00      	nop
 8103772:	370c      	adds	r7, #12
 8103774:	46bd      	mov	sp, r7
 8103776:	f85d 7b04 	ldr.w	r7, [sp], #4
 810377a:	4770      	bx	lr

0810377c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810377c:	b580      	push	{r7, lr}
 810377e:	b082      	sub	sp, #8
 8103780:	af00      	add	r7, sp, #0
 8103782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	2b00      	cmp	r3, #0
 8103788:	d101      	bne.n	810378e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810378a:	2301      	movs	r3, #1
 810378c:	e042      	b.n	8103814 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103794:	2b00      	cmp	r3, #0
 8103796:	d106      	bne.n	81037a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	2200      	movs	r2, #0
 810379c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81037a0:	6878      	ldr	r0, [r7, #4]
 81037a2:	f7fd fa85 	bl	8100cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	2224      	movs	r2, #36	; 0x24
 81037aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	681a      	ldr	r2, [r3, #0]
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	f022 0201 	bic.w	r2, r2, #1
 81037bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81037be:	6878      	ldr	r0, [r7, #4]
 81037c0:	f000 f82c 	bl	810381c <UART_SetConfig>
 81037c4:	4603      	mov	r3, r0
 81037c6:	2b01      	cmp	r3, #1
 81037c8:	d101      	bne.n	81037ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81037ca:	2301      	movs	r3, #1
 81037cc:	e022      	b.n	8103814 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037d2:	2b00      	cmp	r3, #0
 81037d4:	d002      	beq.n	81037dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81037d6:	6878      	ldr	r0, [r7, #4]
 81037d8:	f000 fd88 	bl	81042ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	685a      	ldr	r2, [r3, #4]
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81037ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	689a      	ldr	r2, [r3, #8]
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	681b      	ldr	r3, [r3, #0]
 81037f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81037fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	681a      	ldr	r2, [r3, #0]
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	681b      	ldr	r3, [r3, #0]
 8103806:	f042 0201 	orr.w	r2, r2, #1
 810380a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810380c:	6878      	ldr	r0, [r7, #4]
 810380e:	f000 fe0f 	bl	8104430 <UART_CheckIdleState>
 8103812:	4603      	mov	r3, r0
}
 8103814:	4618      	mov	r0, r3
 8103816:	3708      	adds	r7, #8
 8103818:	46bd      	mov	sp, r7
 810381a:	bd80      	pop	{r7, pc}

0810381c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103820:	b092      	sub	sp, #72	; 0x48
 8103822:	af00      	add	r7, sp, #0
 8103824:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8103826:	2300      	movs	r3, #0
 8103828:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810382c:	697b      	ldr	r3, [r7, #20]
 810382e:	689a      	ldr	r2, [r3, #8]
 8103830:	697b      	ldr	r3, [r7, #20]
 8103832:	691b      	ldr	r3, [r3, #16]
 8103834:	431a      	orrs	r2, r3
 8103836:	697b      	ldr	r3, [r7, #20]
 8103838:	695b      	ldr	r3, [r3, #20]
 810383a:	431a      	orrs	r2, r3
 810383c:	697b      	ldr	r3, [r7, #20]
 810383e:	69db      	ldr	r3, [r3, #28]
 8103840:	4313      	orrs	r3, r2
 8103842:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8103844:	697b      	ldr	r3, [r7, #20]
 8103846:	681b      	ldr	r3, [r3, #0]
 8103848:	681a      	ldr	r2, [r3, #0]
 810384a:	4bbd      	ldr	r3, [pc, #756]	; (8103b40 <UART_SetConfig+0x324>)
 810384c:	4013      	ands	r3, r2
 810384e:	697a      	ldr	r2, [r7, #20]
 8103850:	6812      	ldr	r2, [r2, #0]
 8103852:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103854:	430b      	orrs	r3, r1
 8103856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103858:	697b      	ldr	r3, [r7, #20]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	685b      	ldr	r3, [r3, #4]
 810385e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8103862:	697b      	ldr	r3, [r7, #20]
 8103864:	68da      	ldr	r2, [r3, #12]
 8103866:	697b      	ldr	r3, [r7, #20]
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	430a      	orrs	r2, r1
 810386c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810386e:	697b      	ldr	r3, [r7, #20]
 8103870:	699b      	ldr	r3, [r3, #24]
 8103872:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8103874:	697b      	ldr	r3, [r7, #20]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	4ab2      	ldr	r2, [pc, #712]	; (8103b44 <UART_SetConfig+0x328>)
 810387a:	4293      	cmp	r3, r2
 810387c:	d004      	beq.n	8103888 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810387e:	697b      	ldr	r3, [r7, #20]
 8103880:	6a1b      	ldr	r3, [r3, #32]
 8103882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8103884:	4313      	orrs	r3, r2
 8103886:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8103888:	697b      	ldr	r3, [r7, #20]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	689b      	ldr	r3, [r3, #8]
 810388e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8103892:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8103896:	697a      	ldr	r2, [r7, #20]
 8103898:	6812      	ldr	r2, [r2, #0]
 810389a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810389c:	430b      	orrs	r3, r1
 810389e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81038a0:	697b      	ldr	r3, [r7, #20]
 81038a2:	681b      	ldr	r3, [r3, #0]
 81038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038a6:	f023 010f 	bic.w	r1, r3, #15
 81038aa:	697b      	ldr	r3, [r7, #20]
 81038ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81038ae:	697b      	ldr	r3, [r7, #20]
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	430a      	orrs	r2, r1
 81038b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81038b6:	697b      	ldr	r3, [r7, #20]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	4aa3      	ldr	r2, [pc, #652]	; (8103b48 <UART_SetConfig+0x32c>)
 81038bc:	4293      	cmp	r3, r2
 81038be:	d177      	bne.n	81039b0 <UART_SetConfig+0x194>
 81038c0:	4ba2      	ldr	r3, [pc, #648]	; (8103b4c <UART_SetConfig+0x330>)
 81038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81038c8:	2b28      	cmp	r3, #40	; 0x28
 81038ca:	d86d      	bhi.n	81039a8 <UART_SetConfig+0x18c>
 81038cc:	a201      	add	r2, pc, #4	; (adr r2, 81038d4 <UART_SetConfig+0xb8>)
 81038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038d2:	bf00      	nop
 81038d4:	08103979 	.word	0x08103979
 81038d8:	081039a9 	.word	0x081039a9
 81038dc:	081039a9 	.word	0x081039a9
 81038e0:	081039a9 	.word	0x081039a9
 81038e4:	081039a9 	.word	0x081039a9
 81038e8:	081039a9 	.word	0x081039a9
 81038ec:	081039a9 	.word	0x081039a9
 81038f0:	081039a9 	.word	0x081039a9
 81038f4:	08103981 	.word	0x08103981
 81038f8:	081039a9 	.word	0x081039a9
 81038fc:	081039a9 	.word	0x081039a9
 8103900:	081039a9 	.word	0x081039a9
 8103904:	081039a9 	.word	0x081039a9
 8103908:	081039a9 	.word	0x081039a9
 810390c:	081039a9 	.word	0x081039a9
 8103910:	081039a9 	.word	0x081039a9
 8103914:	08103989 	.word	0x08103989
 8103918:	081039a9 	.word	0x081039a9
 810391c:	081039a9 	.word	0x081039a9
 8103920:	081039a9 	.word	0x081039a9
 8103924:	081039a9 	.word	0x081039a9
 8103928:	081039a9 	.word	0x081039a9
 810392c:	081039a9 	.word	0x081039a9
 8103930:	081039a9 	.word	0x081039a9
 8103934:	08103991 	.word	0x08103991
 8103938:	081039a9 	.word	0x081039a9
 810393c:	081039a9 	.word	0x081039a9
 8103940:	081039a9 	.word	0x081039a9
 8103944:	081039a9 	.word	0x081039a9
 8103948:	081039a9 	.word	0x081039a9
 810394c:	081039a9 	.word	0x081039a9
 8103950:	081039a9 	.word	0x081039a9
 8103954:	08103999 	.word	0x08103999
 8103958:	081039a9 	.word	0x081039a9
 810395c:	081039a9 	.word	0x081039a9
 8103960:	081039a9 	.word	0x081039a9
 8103964:	081039a9 	.word	0x081039a9
 8103968:	081039a9 	.word	0x081039a9
 810396c:	081039a9 	.word	0x081039a9
 8103970:	081039a9 	.word	0x081039a9
 8103974:	081039a1 	.word	0x081039a1
 8103978:	2301      	movs	r3, #1
 810397a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810397e:	e220      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103980:	2304      	movs	r3, #4
 8103982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103986:	e21c      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103988:	2308      	movs	r3, #8
 810398a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810398e:	e218      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103990:	2310      	movs	r3, #16
 8103992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103996:	e214      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103998:	2320      	movs	r3, #32
 810399a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810399e:	e210      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 81039a0:	2340      	movs	r3, #64	; 0x40
 81039a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81039a6:	e20c      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 81039a8:	2380      	movs	r3, #128	; 0x80
 81039aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81039ae:	e208      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 81039b0:	697b      	ldr	r3, [r7, #20]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	4a66      	ldr	r2, [pc, #408]	; (8103b50 <UART_SetConfig+0x334>)
 81039b6:	4293      	cmp	r3, r2
 81039b8:	d130      	bne.n	8103a1c <UART_SetConfig+0x200>
 81039ba:	4b64      	ldr	r3, [pc, #400]	; (8103b4c <UART_SetConfig+0x330>)
 81039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039be:	f003 0307 	and.w	r3, r3, #7
 81039c2:	2b05      	cmp	r3, #5
 81039c4:	d826      	bhi.n	8103a14 <UART_SetConfig+0x1f8>
 81039c6:	a201      	add	r2, pc, #4	; (adr r2, 81039cc <UART_SetConfig+0x1b0>)
 81039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039cc:	081039e5 	.word	0x081039e5
 81039d0:	081039ed 	.word	0x081039ed
 81039d4:	081039f5 	.word	0x081039f5
 81039d8:	081039fd 	.word	0x081039fd
 81039dc:	08103a05 	.word	0x08103a05
 81039e0:	08103a0d 	.word	0x08103a0d
 81039e4:	2300      	movs	r3, #0
 81039e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81039ea:	e1ea      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 81039ec:	2304      	movs	r3, #4
 81039ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81039f2:	e1e6      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 81039f4:	2308      	movs	r3, #8
 81039f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81039fa:	e1e2      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 81039fc:	2310      	movs	r3, #16
 81039fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a02:	e1de      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a04:	2320      	movs	r3, #32
 8103a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a0a:	e1da      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a0c:	2340      	movs	r3, #64	; 0x40
 8103a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a12:	e1d6      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a14:	2380      	movs	r3, #128	; 0x80
 8103a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a1a:	e1d2      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a1c:	697b      	ldr	r3, [r7, #20]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	4a4c      	ldr	r2, [pc, #304]	; (8103b54 <UART_SetConfig+0x338>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d130      	bne.n	8103a88 <UART_SetConfig+0x26c>
 8103a26:	4b49      	ldr	r3, [pc, #292]	; (8103b4c <UART_SetConfig+0x330>)
 8103a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a2a:	f003 0307 	and.w	r3, r3, #7
 8103a2e:	2b05      	cmp	r3, #5
 8103a30:	d826      	bhi.n	8103a80 <UART_SetConfig+0x264>
 8103a32:	a201      	add	r2, pc, #4	; (adr r2, 8103a38 <UART_SetConfig+0x21c>)
 8103a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a38:	08103a51 	.word	0x08103a51
 8103a3c:	08103a59 	.word	0x08103a59
 8103a40:	08103a61 	.word	0x08103a61
 8103a44:	08103a69 	.word	0x08103a69
 8103a48:	08103a71 	.word	0x08103a71
 8103a4c:	08103a79 	.word	0x08103a79
 8103a50:	2300      	movs	r3, #0
 8103a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a56:	e1b4      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a58:	2304      	movs	r3, #4
 8103a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a5e:	e1b0      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a60:	2308      	movs	r3, #8
 8103a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a66:	e1ac      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a68:	2310      	movs	r3, #16
 8103a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a6e:	e1a8      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a70:	2320      	movs	r3, #32
 8103a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a76:	e1a4      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a78:	2340      	movs	r3, #64	; 0x40
 8103a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a7e:	e1a0      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a80:	2380      	movs	r3, #128	; 0x80
 8103a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103a86:	e19c      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103a88:	697b      	ldr	r3, [r7, #20]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	4a32      	ldr	r2, [pc, #200]	; (8103b58 <UART_SetConfig+0x33c>)
 8103a8e:	4293      	cmp	r3, r2
 8103a90:	d130      	bne.n	8103af4 <UART_SetConfig+0x2d8>
 8103a92:	4b2e      	ldr	r3, [pc, #184]	; (8103b4c <UART_SetConfig+0x330>)
 8103a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a96:	f003 0307 	and.w	r3, r3, #7
 8103a9a:	2b05      	cmp	r3, #5
 8103a9c:	d826      	bhi.n	8103aec <UART_SetConfig+0x2d0>
 8103a9e:	a201      	add	r2, pc, #4	; (adr r2, 8103aa4 <UART_SetConfig+0x288>)
 8103aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103aa4:	08103abd 	.word	0x08103abd
 8103aa8:	08103ac5 	.word	0x08103ac5
 8103aac:	08103acd 	.word	0x08103acd
 8103ab0:	08103ad5 	.word	0x08103ad5
 8103ab4:	08103add 	.word	0x08103add
 8103ab8:	08103ae5 	.word	0x08103ae5
 8103abc:	2300      	movs	r3, #0
 8103abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103ac2:	e17e      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103ac4:	2304      	movs	r3, #4
 8103ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103aca:	e17a      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103acc:	2308      	movs	r3, #8
 8103ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103ad2:	e176      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103ad4:	2310      	movs	r3, #16
 8103ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103ada:	e172      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103adc:	2320      	movs	r3, #32
 8103ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103ae2:	e16e      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103ae4:	2340      	movs	r3, #64	; 0x40
 8103ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103aea:	e16a      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103aec:	2380      	movs	r3, #128	; 0x80
 8103aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103af2:	e166      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103af4:	697b      	ldr	r3, [r7, #20]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	4a18      	ldr	r2, [pc, #96]	; (8103b5c <UART_SetConfig+0x340>)
 8103afa:	4293      	cmp	r3, r2
 8103afc:	d140      	bne.n	8103b80 <UART_SetConfig+0x364>
 8103afe:	4b13      	ldr	r3, [pc, #76]	; (8103b4c <UART_SetConfig+0x330>)
 8103b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b02:	f003 0307 	and.w	r3, r3, #7
 8103b06:	2b05      	cmp	r3, #5
 8103b08:	d836      	bhi.n	8103b78 <UART_SetConfig+0x35c>
 8103b0a:	a201      	add	r2, pc, #4	; (adr r2, 8103b10 <UART_SetConfig+0x2f4>)
 8103b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b10:	08103b29 	.word	0x08103b29
 8103b14:	08103b31 	.word	0x08103b31
 8103b18:	08103b39 	.word	0x08103b39
 8103b1c:	08103b61 	.word	0x08103b61
 8103b20:	08103b69 	.word	0x08103b69
 8103b24:	08103b71 	.word	0x08103b71
 8103b28:	2300      	movs	r3, #0
 8103b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103b2e:	e148      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103b30:	2304      	movs	r3, #4
 8103b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103b36:	e144      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103b38:	2308      	movs	r3, #8
 8103b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103b3e:	e140      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103b40:	cfff69f3 	.word	0xcfff69f3
 8103b44:	58000c00 	.word	0x58000c00
 8103b48:	40011000 	.word	0x40011000
 8103b4c:	58024400 	.word	0x58024400
 8103b50:	40004400 	.word	0x40004400
 8103b54:	40004800 	.word	0x40004800
 8103b58:	40004c00 	.word	0x40004c00
 8103b5c:	40005000 	.word	0x40005000
 8103b60:	2310      	movs	r3, #16
 8103b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103b66:	e12c      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103b68:	2320      	movs	r3, #32
 8103b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103b6e:	e128      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103b70:	2340      	movs	r3, #64	; 0x40
 8103b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103b76:	e124      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103b78:	2380      	movs	r3, #128	; 0x80
 8103b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103b7e:	e120      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103b80:	697b      	ldr	r3, [r7, #20]
 8103b82:	681b      	ldr	r3, [r3, #0]
 8103b84:	4acb      	ldr	r2, [pc, #812]	; (8103eb4 <UART_SetConfig+0x698>)
 8103b86:	4293      	cmp	r3, r2
 8103b88:	d176      	bne.n	8103c78 <UART_SetConfig+0x45c>
 8103b8a:	4bcb      	ldr	r3, [pc, #812]	; (8103eb8 <UART_SetConfig+0x69c>)
 8103b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103b92:	2b28      	cmp	r3, #40	; 0x28
 8103b94:	d86c      	bhi.n	8103c70 <UART_SetConfig+0x454>
 8103b96:	a201      	add	r2, pc, #4	; (adr r2, 8103b9c <UART_SetConfig+0x380>)
 8103b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b9c:	08103c41 	.word	0x08103c41
 8103ba0:	08103c71 	.word	0x08103c71
 8103ba4:	08103c71 	.word	0x08103c71
 8103ba8:	08103c71 	.word	0x08103c71
 8103bac:	08103c71 	.word	0x08103c71
 8103bb0:	08103c71 	.word	0x08103c71
 8103bb4:	08103c71 	.word	0x08103c71
 8103bb8:	08103c71 	.word	0x08103c71
 8103bbc:	08103c49 	.word	0x08103c49
 8103bc0:	08103c71 	.word	0x08103c71
 8103bc4:	08103c71 	.word	0x08103c71
 8103bc8:	08103c71 	.word	0x08103c71
 8103bcc:	08103c71 	.word	0x08103c71
 8103bd0:	08103c71 	.word	0x08103c71
 8103bd4:	08103c71 	.word	0x08103c71
 8103bd8:	08103c71 	.word	0x08103c71
 8103bdc:	08103c51 	.word	0x08103c51
 8103be0:	08103c71 	.word	0x08103c71
 8103be4:	08103c71 	.word	0x08103c71
 8103be8:	08103c71 	.word	0x08103c71
 8103bec:	08103c71 	.word	0x08103c71
 8103bf0:	08103c71 	.word	0x08103c71
 8103bf4:	08103c71 	.word	0x08103c71
 8103bf8:	08103c71 	.word	0x08103c71
 8103bfc:	08103c59 	.word	0x08103c59
 8103c00:	08103c71 	.word	0x08103c71
 8103c04:	08103c71 	.word	0x08103c71
 8103c08:	08103c71 	.word	0x08103c71
 8103c0c:	08103c71 	.word	0x08103c71
 8103c10:	08103c71 	.word	0x08103c71
 8103c14:	08103c71 	.word	0x08103c71
 8103c18:	08103c71 	.word	0x08103c71
 8103c1c:	08103c61 	.word	0x08103c61
 8103c20:	08103c71 	.word	0x08103c71
 8103c24:	08103c71 	.word	0x08103c71
 8103c28:	08103c71 	.word	0x08103c71
 8103c2c:	08103c71 	.word	0x08103c71
 8103c30:	08103c71 	.word	0x08103c71
 8103c34:	08103c71 	.word	0x08103c71
 8103c38:	08103c71 	.word	0x08103c71
 8103c3c:	08103c69 	.word	0x08103c69
 8103c40:	2301      	movs	r3, #1
 8103c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103c46:	e0bc      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103c48:	2304      	movs	r3, #4
 8103c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103c4e:	e0b8      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103c50:	2308      	movs	r3, #8
 8103c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103c56:	e0b4      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103c58:	2310      	movs	r3, #16
 8103c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103c5e:	e0b0      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103c60:	2320      	movs	r3, #32
 8103c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103c66:	e0ac      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103c68:	2340      	movs	r3, #64	; 0x40
 8103c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103c6e:	e0a8      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103c70:	2380      	movs	r3, #128	; 0x80
 8103c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103c76:	e0a4      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103c78:	697b      	ldr	r3, [r7, #20]
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	4a8f      	ldr	r2, [pc, #572]	; (8103ebc <UART_SetConfig+0x6a0>)
 8103c7e:	4293      	cmp	r3, r2
 8103c80:	d130      	bne.n	8103ce4 <UART_SetConfig+0x4c8>
 8103c82:	4b8d      	ldr	r3, [pc, #564]	; (8103eb8 <UART_SetConfig+0x69c>)
 8103c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c86:	f003 0307 	and.w	r3, r3, #7
 8103c8a:	2b05      	cmp	r3, #5
 8103c8c:	d826      	bhi.n	8103cdc <UART_SetConfig+0x4c0>
 8103c8e:	a201      	add	r2, pc, #4	; (adr r2, 8103c94 <UART_SetConfig+0x478>)
 8103c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c94:	08103cad 	.word	0x08103cad
 8103c98:	08103cb5 	.word	0x08103cb5
 8103c9c:	08103cbd 	.word	0x08103cbd
 8103ca0:	08103cc5 	.word	0x08103cc5
 8103ca4:	08103ccd 	.word	0x08103ccd
 8103ca8:	08103cd5 	.word	0x08103cd5
 8103cac:	2300      	movs	r3, #0
 8103cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103cb2:	e086      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103cb4:	2304      	movs	r3, #4
 8103cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103cba:	e082      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103cbc:	2308      	movs	r3, #8
 8103cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103cc2:	e07e      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103cc4:	2310      	movs	r3, #16
 8103cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103cca:	e07a      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103ccc:	2320      	movs	r3, #32
 8103cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103cd2:	e076      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103cd4:	2340      	movs	r3, #64	; 0x40
 8103cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103cda:	e072      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103cdc:	2380      	movs	r3, #128	; 0x80
 8103cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103ce2:	e06e      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103ce4:	697b      	ldr	r3, [r7, #20]
 8103ce6:	681b      	ldr	r3, [r3, #0]
 8103ce8:	4a75      	ldr	r2, [pc, #468]	; (8103ec0 <UART_SetConfig+0x6a4>)
 8103cea:	4293      	cmp	r3, r2
 8103cec:	d130      	bne.n	8103d50 <UART_SetConfig+0x534>
 8103cee:	4b72      	ldr	r3, [pc, #456]	; (8103eb8 <UART_SetConfig+0x69c>)
 8103cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cf2:	f003 0307 	and.w	r3, r3, #7
 8103cf6:	2b05      	cmp	r3, #5
 8103cf8:	d826      	bhi.n	8103d48 <UART_SetConfig+0x52c>
 8103cfa:	a201      	add	r2, pc, #4	; (adr r2, 8103d00 <UART_SetConfig+0x4e4>)
 8103cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d00:	08103d19 	.word	0x08103d19
 8103d04:	08103d21 	.word	0x08103d21
 8103d08:	08103d29 	.word	0x08103d29
 8103d0c:	08103d31 	.word	0x08103d31
 8103d10:	08103d39 	.word	0x08103d39
 8103d14:	08103d41 	.word	0x08103d41
 8103d18:	2300      	movs	r3, #0
 8103d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d1e:	e050      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d20:	2304      	movs	r3, #4
 8103d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d26:	e04c      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d28:	2308      	movs	r3, #8
 8103d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d2e:	e048      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d30:	2310      	movs	r3, #16
 8103d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d36:	e044      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d38:	2320      	movs	r3, #32
 8103d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d3e:	e040      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d40:	2340      	movs	r3, #64	; 0x40
 8103d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d46:	e03c      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d48:	2380      	movs	r3, #128	; 0x80
 8103d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d4e:	e038      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d50:	697b      	ldr	r3, [r7, #20]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	4a5b      	ldr	r2, [pc, #364]	; (8103ec4 <UART_SetConfig+0x6a8>)
 8103d56:	4293      	cmp	r3, r2
 8103d58:	d130      	bne.n	8103dbc <UART_SetConfig+0x5a0>
 8103d5a:	4b57      	ldr	r3, [pc, #348]	; (8103eb8 <UART_SetConfig+0x69c>)
 8103d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d5e:	f003 0307 	and.w	r3, r3, #7
 8103d62:	2b05      	cmp	r3, #5
 8103d64:	d826      	bhi.n	8103db4 <UART_SetConfig+0x598>
 8103d66:	a201      	add	r2, pc, #4	; (adr r2, 8103d6c <UART_SetConfig+0x550>)
 8103d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d6c:	08103d85 	.word	0x08103d85
 8103d70:	08103d8d 	.word	0x08103d8d
 8103d74:	08103d95 	.word	0x08103d95
 8103d78:	08103d9d 	.word	0x08103d9d
 8103d7c:	08103da5 	.word	0x08103da5
 8103d80:	08103dad 	.word	0x08103dad
 8103d84:	2302      	movs	r3, #2
 8103d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d8a:	e01a      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d8c:	2304      	movs	r3, #4
 8103d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d92:	e016      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d94:	2308      	movs	r3, #8
 8103d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103d9a:	e012      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103d9c:	2310      	movs	r3, #16
 8103d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103da2:	e00e      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103da4:	2320      	movs	r3, #32
 8103da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103daa:	e00a      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103dac:	2340      	movs	r3, #64	; 0x40
 8103dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103db2:	e006      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103db4:	2380      	movs	r3, #128	; 0x80
 8103db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8103dba:	e002      	b.n	8103dc2 <UART_SetConfig+0x5a6>
 8103dbc:	2380      	movs	r3, #128	; 0x80
 8103dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8103dc2:	697b      	ldr	r3, [r7, #20]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	4a3f      	ldr	r2, [pc, #252]	; (8103ec4 <UART_SetConfig+0x6a8>)
 8103dc8:	4293      	cmp	r3, r2
 8103dca:	f040 80f8 	bne.w	8103fbe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8103dce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8103dd2:	2b20      	cmp	r3, #32
 8103dd4:	dc46      	bgt.n	8103e64 <UART_SetConfig+0x648>
 8103dd6:	2b02      	cmp	r3, #2
 8103dd8:	f2c0 8082 	blt.w	8103ee0 <UART_SetConfig+0x6c4>
 8103ddc:	3b02      	subs	r3, #2
 8103dde:	2b1e      	cmp	r3, #30
 8103de0:	d87e      	bhi.n	8103ee0 <UART_SetConfig+0x6c4>
 8103de2:	a201      	add	r2, pc, #4	; (adr r2, 8103de8 <UART_SetConfig+0x5cc>)
 8103de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103de8:	08103e6b 	.word	0x08103e6b
 8103dec:	08103ee1 	.word	0x08103ee1
 8103df0:	08103e73 	.word	0x08103e73
 8103df4:	08103ee1 	.word	0x08103ee1
 8103df8:	08103ee1 	.word	0x08103ee1
 8103dfc:	08103ee1 	.word	0x08103ee1
 8103e00:	08103e83 	.word	0x08103e83
 8103e04:	08103ee1 	.word	0x08103ee1
 8103e08:	08103ee1 	.word	0x08103ee1
 8103e0c:	08103ee1 	.word	0x08103ee1
 8103e10:	08103ee1 	.word	0x08103ee1
 8103e14:	08103ee1 	.word	0x08103ee1
 8103e18:	08103ee1 	.word	0x08103ee1
 8103e1c:	08103ee1 	.word	0x08103ee1
 8103e20:	08103e93 	.word	0x08103e93
 8103e24:	08103ee1 	.word	0x08103ee1
 8103e28:	08103ee1 	.word	0x08103ee1
 8103e2c:	08103ee1 	.word	0x08103ee1
 8103e30:	08103ee1 	.word	0x08103ee1
 8103e34:	08103ee1 	.word	0x08103ee1
 8103e38:	08103ee1 	.word	0x08103ee1
 8103e3c:	08103ee1 	.word	0x08103ee1
 8103e40:	08103ee1 	.word	0x08103ee1
 8103e44:	08103ee1 	.word	0x08103ee1
 8103e48:	08103ee1 	.word	0x08103ee1
 8103e4c:	08103ee1 	.word	0x08103ee1
 8103e50:	08103ee1 	.word	0x08103ee1
 8103e54:	08103ee1 	.word	0x08103ee1
 8103e58:	08103ee1 	.word	0x08103ee1
 8103e5c:	08103ee1 	.word	0x08103ee1
 8103e60:	08103ed3 	.word	0x08103ed3
 8103e64:	2b40      	cmp	r3, #64	; 0x40
 8103e66:	d037      	beq.n	8103ed8 <UART_SetConfig+0x6bc>
 8103e68:	e03a      	b.n	8103ee0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103e6a:	f7fe fd95 	bl	8102998 <HAL_RCCEx_GetD3PCLK1Freq>
 8103e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8103e70:	e03c      	b.n	8103eec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8103e76:	4618      	mov	r0, r3
 8103e78:	f7fe fda4 	bl	81029c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103e80:	e034      	b.n	8103eec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103e82:	f107 0318 	add.w	r3, r7, #24
 8103e86:	4618      	mov	r0, r3
 8103e88:	f7fe fef0 	bl	8102c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103e8c:	69fb      	ldr	r3, [r7, #28]
 8103e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103e90:	e02c      	b.n	8103eec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103e92:	4b09      	ldr	r3, [pc, #36]	; (8103eb8 <UART_SetConfig+0x69c>)
 8103e94:	681b      	ldr	r3, [r3, #0]
 8103e96:	f003 0320 	and.w	r3, r3, #32
 8103e9a:	2b00      	cmp	r3, #0
 8103e9c:	d016      	beq.n	8103ecc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103e9e:	4b06      	ldr	r3, [pc, #24]	; (8103eb8 <UART_SetConfig+0x69c>)
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	08db      	lsrs	r3, r3, #3
 8103ea4:	f003 0303 	and.w	r3, r3, #3
 8103ea8:	4a07      	ldr	r2, [pc, #28]	; (8103ec8 <UART_SetConfig+0x6ac>)
 8103eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8103eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103eb0:	e01c      	b.n	8103eec <UART_SetConfig+0x6d0>
 8103eb2:	bf00      	nop
 8103eb4:	40011400 	.word	0x40011400
 8103eb8:	58024400 	.word	0x58024400
 8103ebc:	40007800 	.word	0x40007800
 8103ec0:	40007c00 	.word	0x40007c00
 8103ec4:	58000c00 	.word	0x58000c00
 8103ec8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8103ecc:	4b9d      	ldr	r3, [pc, #628]	; (8104144 <UART_SetConfig+0x928>)
 8103ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103ed0:	e00c      	b.n	8103eec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103ed2:	4b9d      	ldr	r3, [pc, #628]	; (8104148 <UART_SetConfig+0x92c>)
 8103ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103ed6:	e009      	b.n	8103eec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8103ede:	e005      	b.n	8103eec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8103ee0:	2300      	movs	r3, #0
 8103ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8103ee4:	2301      	movs	r3, #1
 8103ee6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8103eea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103eee:	2b00      	cmp	r3, #0
 8103ef0:	f000 81de 	beq.w	81042b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8103ef4:	697b      	ldr	r3, [r7, #20]
 8103ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ef8:	4a94      	ldr	r2, [pc, #592]	; (810414c <UART_SetConfig+0x930>)
 8103efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103efe:	461a      	mov	r2, r3
 8103f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103f02:	fbb3 f3f2 	udiv	r3, r3, r2
 8103f06:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103f08:	697b      	ldr	r3, [r7, #20]
 8103f0a:	685a      	ldr	r2, [r3, #4]
 8103f0c:	4613      	mov	r3, r2
 8103f0e:	005b      	lsls	r3, r3, #1
 8103f10:	4413      	add	r3, r2
 8103f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103f14:	429a      	cmp	r2, r3
 8103f16:	d305      	bcc.n	8103f24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103f18:	697b      	ldr	r3, [r7, #20]
 8103f1a:	685b      	ldr	r3, [r3, #4]
 8103f1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103f20:	429a      	cmp	r2, r3
 8103f22:	d903      	bls.n	8103f2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8103f24:	2301      	movs	r3, #1
 8103f26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8103f2a:	e1c1      	b.n	81042b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103f2e:	2200      	movs	r2, #0
 8103f30:	60bb      	str	r3, [r7, #8]
 8103f32:	60fa      	str	r2, [r7, #12]
 8103f34:	697b      	ldr	r3, [r7, #20]
 8103f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f38:	4a84      	ldr	r2, [pc, #528]	; (810414c <UART_SetConfig+0x930>)
 8103f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103f3e:	b29b      	uxth	r3, r3
 8103f40:	2200      	movs	r2, #0
 8103f42:	603b      	str	r3, [r7, #0]
 8103f44:	607a      	str	r2, [r7, #4]
 8103f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103f4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103f4e:	f7fc fa27 	bl	81003a0 <__aeabi_uldivmod>
 8103f52:	4602      	mov	r2, r0
 8103f54:	460b      	mov	r3, r1
 8103f56:	4610      	mov	r0, r2
 8103f58:	4619      	mov	r1, r3
 8103f5a:	f04f 0200 	mov.w	r2, #0
 8103f5e:	f04f 0300 	mov.w	r3, #0
 8103f62:	020b      	lsls	r3, r1, #8
 8103f64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103f68:	0202      	lsls	r2, r0, #8
 8103f6a:	6979      	ldr	r1, [r7, #20]
 8103f6c:	6849      	ldr	r1, [r1, #4]
 8103f6e:	0849      	lsrs	r1, r1, #1
 8103f70:	2000      	movs	r0, #0
 8103f72:	460c      	mov	r4, r1
 8103f74:	4605      	mov	r5, r0
 8103f76:	eb12 0804 	adds.w	r8, r2, r4
 8103f7a:	eb43 0905 	adc.w	r9, r3, r5
 8103f7e:	697b      	ldr	r3, [r7, #20]
 8103f80:	685b      	ldr	r3, [r3, #4]
 8103f82:	2200      	movs	r2, #0
 8103f84:	469a      	mov	sl, r3
 8103f86:	4693      	mov	fp, r2
 8103f88:	4652      	mov	r2, sl
 8103f8a:	465b      	mov	r3, fp
 8103f8c:	4640      	mov	r0, r8
 8103f8e:	4649      	mov	r1, r9
 8103f90:	f7fc fa06 	bl	81003a0 <__aeabi_uldivmod>
 8103f94:	4602      	mov	r2, r0
 8103f96:	460b      	mov	r3, r1
 8103f98:	4613      	mov	r3, r2
 8103f9a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103fa2:	d308      	bcc.n	8103fb6 <UART_SetConfig+0x79a>
 8103fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103faa:	d204      	bcs.n	8103fb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8103fac:	697b      	ldr	r3, [r7, #20]
 8103fae:	681b      	ldr	r3, [r3, #0]
 8103fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8103fb2:	60da      	str	r2, [r3, #12]
 8103fb4:	e17c      	b.n	81042b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8103fb6:	2301      	movs	r3, #1
 8103fb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8103fbc:	e178      	b.n	81042b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103fbe:	697b      	ldr	r3, [r7, #20]
 8103fc0:	69db      	ldr	r3, [r3, #28]
 8103fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103fc6:	f040 80c5 	bne.w	8104154 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8103fca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8103fce:	2b20      	cmp	r3, #32
 8103fd0:	dc48      	bgt.n	8104064 <UART_SetConfig+0x848>
 8103fd2:	2b00      	cmp	r3, #0
 8103fd4:	db7b      	blt.n	81040ce <UART_SetConfig+0x8b2>
 8103fd6:	2b20      	cmp	r3, #32
 8103fd8:	d879      	bhi.n	81040ce <UART_SetConfig+0x8b2>
 8103fda:	a201      	add	r2, pc, #4	; (adr r2, 8103fe0 <UART_SetConfig+0x7c4>)
 8103fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fe0:	0810406b 	.word	0x0810406b
 8103fe4:	08104073 	.word	0x08104073
 8103fe8:	081040cf 	.word	0x081040cf
 8103fec:	081040cf 	.word	0x081040cf
 8103ff0:	0810407b 	.word	0x0810407b
 8103ff4:	081040cf 	.word	0x081040cf
 8103ff8:	081040cf 	.word	0x081040cf
 8103ffc:	081040cf 	.word	0x081040cf
 8104000:	0810408b 	.word	0x0810408b
 8104004:	081040cf 	.word	0x081040cf
 8104008:	081040cf 	.word	0x081040cf
 810400c:	081040cf 	.word	0x081040cf
 8104010:	081040cf 	.word	0x081040cf
 8104014:	081040cf 	.word	0x081040cf
 8104018:	081040cf 	.word	0x081040cf
 810401c:	081040cf 	.word	0x081040cf
 8104020:	0810409b 	.word	0x0810409b
 8104024:	081040cf 	.word	0x081040cf
 8104028:	081040cf 	.word	0x081040cf
 810402c:	081040cf 	.word	0x081040cf
 8104030:	081040cf 	.word	0x081040cf
 8104034:	081040cf 	.word	0x081040cf
 8104038:	081040cf 	.word	0x081040cf
 810403c:	081040cf 	.word	0x081040cf
 8104040:	081040cf 	.word	0x081040cf
 8104044:	081040cf 	.word	0x081040cf
 8104048:	081040cf 	.word	0x081040cf
 810404c:	081040cf 	.word	0x081040cf
 8104050:	081040cf 	.word	0x081040cf
 8104054:	081040cf 	.word	0x081040cf
 8104058:	081040cf 	.word	0x081040cf
 810405c:	081040cf 	.word	0x081040cf
 8104060:	081040c1 	.word	0x081040c1
 8104064:	2b40      	cmp	r3, #64	; 0x40
 8104066:	d02e      	beq.n	81040c6 <UART_SetConfig+0x8aa>
 8104068:	e031      	b.n	81040ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810406a:	f7fd fcfb 	bl	8101a64 <HAL_RCC_GetPCLK1Freq>
 810406e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104070:	e033      	b.n	81040da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104072:	f7fd fd0d 	bl	8101a90 <HAL_RCC_GetPCLK2Freq>
 8104076:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104078:	e02f      	b.n	81040da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810407a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810407e:	4618      	mov	r0, r3
 8104080:	f7fe fca0 	bl	81029c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104088:	e027      	b.n	81040da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810408a:	f107 0318 	add.w	r3, r7, #24
 810408e:	4618      	mov	r0, r3
 8104090:	f7fe fdec 	bl	8102c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104094:	69fb      	ldr	r3, [r7, #28]
 8104096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104098:	e01f      	b.n	81040da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810409a:	4b2d      	ldr	r3, [pc, #180]	; (8104150 <UART_SetConfig+0x934>)
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	f003 0320 	and.w	r3, r3, #32
 81040a2:	2b00      	cmp	r3, #0
 81040a4:	d009      	beq.n	81040ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81040a6:	4b2a      	ldr	r3, [pc, #168]	; (8104150 <UART_SetConfig+0x934>)
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	08db      	lsrs	r3, r3, #3
 81040ac:	f003 0303 	and.w	r3, r3, #3
 81040b0:	4a24      	ldr	r2, [pc, #144]	; (8104144 <UART_SetConfig+0x928>)
 81040b2:	fa22 f303 	lsr.w	r3, r2, r3
 81040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81040b8:	e00f      	b.n	81040da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81040ba:	4b22      	ldr	r3, [pc, #136]	; (8104144 <UART_SetConfig+0x928>)
 81040bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81040be:	e00c      	b.n	81040da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81040c0:	4b21      	ldr	r3, [pc, #132]	; (8104148 <UART_SetConfig+0x92c>)
 81040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81040c4:	e009      	b.n	81040da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81040c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81040cc:	e005      	b.n	81040da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81040ce:	2300      	movs	r3, #0
 81040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81040d2:	2301      	movs	r3, #1
 81040d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81040d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81040da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81040dc:	2b00      	cmp	r3, #0
 81040de:	f000 80e7 	beq.w	81042b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81040e2:	697b      	ldr	r3, [r7, #20]
 81040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040e6:	4a19      	ldr	r2, [pc, #100]	; (810414c <UART_SetConfig+0x930>)
 81040e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81040ec:	461a      	mov	r2, r3
 81040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81040f0:	fbb3 f3f2 	udiv	r3, r3, r2
 81040f4:	005a      	lsls	r2, r3, #1
 81040f6:	697b      	ldr	r3, [r7, #20]
 81040f8:	685b      	ldr	r3, [r3, #4]
 81040fa:	085b      	lsrs	r3, r3, #1
 81040fc:	441a      	add	r2, r3
 81040fe:	697b      	ldr	r3, [r7, #20]
 8104100:	685b      	ldr	r3, [r3, #4]
 8104102:	fbb2 f3f3 	udiv	r3, r2, r3
 8104106:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810410a:	2b0f      	cmp	r3, #15
 810410c:	d916      	bls.n	810413c <UART_SetConfig+0x920>
 810410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104114:	d212      	bcs.n	810413c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8104116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104118:	b29b      	uxth	r3, r3
 810411a:	f023 030f 	bic.w	r3, r3, #15
 810411e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8104120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104122:	085b      	lsrs	r3, r3, #1
 8104124:	b29b      	uxth	r3, r3
 8104126:	f003 0307 	and.w	r3, r3, #7
 810412a:	b29a      	uxth	r2, r3
 810412c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810412e:	4313      	orrs	r3, r2
 8104130:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8104132:	697b      	ldr	r3, [r7, #20]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8104138:	60da      	str	r2, [r3, #12]
 810413a:	e0b9      	b.n	81042b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810413c:	2301      	movs	r3, #1
 810413e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8104142:	e0b5      	b.n	81042b0 <UART_SetConfig+0xa94>
 8104144:	03d09000 	.word	0x03d09000
 8104148:	003d0900 	.word	0x003d0900
 810414c:	08108154 	.word	0x08108154
 8104150:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8104154:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8104158:	2b20      	cmp	r3, #32
 810415a:	dc49      	bgt.n	81041f0 <UART_SetConfig+0x9d4>
 810415c:	2b00      	cmp	r3, #0
 810415e:	db7c      	blt.n	810425a <UART_SetConfig+0xa3e>
 8104160:	2b20      	cmp	r3, #32
 8104162:	d87a      	bhi.n	810425a <UART_SetConfig+0xa3e>
 8104164:	a201      	add	r2, pc, #4	; (adr r2, 810416c <UART_SetConfig+0x950>)
 8104166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810416a:	bf00      	nop
 810416c:	081041f7 	.word	0x081041f7
 8104170:	081041ff 	.word	0x081041ff
 8104174:	0810425b 	.word	0x0810425b
 8104178:	0810425b 	.word	0x0810425b
 810417c:	08104207 	.word	0x08104207
 8104180:	0810425b 	.word	0x0810425b
 8104184:	0810425b 	.word	0x0810425b
 8104188:	0810425b 	.word	0x0810425b
 810418c:	08104217 	.word	0x08104217
 8104190:	0810425b 	.word	0x0810425b
 8104194:	0810425b 	.word	0x0810425b
 8104198:	0810425b 	.word	0x0810425b
 810419c:	0810425b 	.word	0x0810425b
 81041a0:	0810425b 	.word	0x0810425b
 81041a4:	0810425b 	.word	0x0810425b
 81041a8:	0810425b 	.word	0x0810425b
 81041ac:	08104227 	.word	0x08104227
 81041b0:	0810425b 	.word	0x0810425b
 81041b4:	0810425b 	.word	0x0810425b
 81041b8:	0810425b 	.word	0x0810425b
 81041bc:	0810425b 	.word	0x0810425b
 81041c0:	0810425b 	.word	0x0810425b
 81041c4:	0810425b 	.word	0x0810425b
 81041c8:	0810425b 	.word	0x0810425b
 81041cc:	0810425b 	.word	0x0810425b
 81041d0:	0810425b 	.word	0x0810425b
 81041d4:	0810425b 	.word	0x0810425b
 81041d8:	0810425b 	.word	0x0810425b
 81041dc:	0810425b 	.word	0x0810425b
 81041e0:	0810425b 	.word	0x0810425b
 81041e4:	0810425b 	.word	0x0810425b
 81041e8:	0810425b 	.word	0x0810425b
 81041ec:	0810424d 	.word	0x0810424d
 81041f0:	2b40      	cmp	r3, #64	; 0x40
 81041f2:	d02e      	beq.n	8104252 <UART_SetConfig+0xa36>
 81041f4:	e031      	b.n	810425a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81041f6:	f7fd fc35 	bl	8101a64 <HAL_RCC_GetPCLK1Freq>
 81041fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81041fc:	e033      	b.n	8104266 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81041fe:	f7fd fc47 	bl	8101a90 <HAL_RCC_GetPCLK2Freq>
 8104202:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104204:	e02f      	b.n	8104266 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810420a:	4618      	mov	r0, r3
 810420c:	f7fe fbda 	bl	81029c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104214:	e027      	b.n	8104266 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104216:	f107 0318 	add.w	r3, r7, #24
 810421a:	4618      	mov	r0, r3
 810421c:	f7fe fd26 	bl	8102c6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104220:	69fb      	ldr	r3, [r7, #28]
 8104222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104224:	e01f      	b.n	8104266 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104226:	4b2d      	ldr	r3, [pc, #180]	; (81042dc <UART_SetConfig+0xac0>)
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	f003 0320 	and.w	r3, r3, #32
 810422e:	2b00      	cmp	r3, #0
 8104230:	d009      	beq.n	8104246 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104232:	4b2a      	ldr	r3, [pc, #168]	; (81042dc <UART_SetConfig+0xac0>)
 8104234:	681b      	ldr	r3, [r3, #0]
 8104236:	08db      	lsrs	r3, r3, #3
 8104238:	f003 0303 	and.w	r3, r3, #3
 810423c:	4a28      	ldr	r2, [pc, #160]	; (81042e0 <UART_SetConfig+0xac4>)
 810423e:	fa22 f303 	lsr.w	r3, r2, r3
 8104242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104244:	e00f      	b.n	8104266 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8104246:	4b26      	ldr	r3, [pc, #152]	; (81042e0 <UART_SetConfig+0xac4>)
 8104248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810424a:	e00c      	b.n	8104266 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810424c:	4b25      	ldr	r3, [pc, #148]	; (81042e4 <UART_SetConfig+0xac8>)
 810424e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104250:	e009      	b.n	8104266 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104258:	e005      	b.n	8104266 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810425a:	2300      	movs	r3, #0
 810425c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810425e:	2301      	movs	r3, #1
 8104260:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8104264:	bf00      	nop
    }

    if (pclk != 0U)
 8104266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104268:	2b00      	cmp	r3, #0
 810426a:	d021      	beq.n	81042b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810426c:	697b      	ldr	r3, [r7, #20]
 810426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104270:	4a1d      	ldr	r2, [pc, #116]	; (81042e8 <UART_SetConfig+0xacc>)
 8104272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104276:	461a      	mov	r2, r3
 8104278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810427a:	fbb3 f2f2 	udiv	r2, r3, r2
 810427e:	697b      	ldr	r3, [r7, #20]
 8104280:	685b      	ldr	r3, [r3, #4]
 8104282:	085b      	lsrs	r3, r3, #1
 8104284:	441a      	add	r2, r3
 8104286:	697b      	ldr	r3, [r7, #20]
 8104288:	685b      	ldr	r3, [r3, #4]
 810428a:	fbb2 f3f3 	udiv	r3, r2, r3
 810428e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104292:	2b0f      	cmp	r3, #15
 8104294:	d909      	bls.n	81042aa <UART_SetConfig+0xa8e>
 8104296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810429c:	d205      	bcs.n	81042aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81042a0:	b29a      	uxth	r2, r3
 81042a2:	697b      	ldr	r3, [r7, #20]
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	60da      	str	r2, [r3, #12]
 81042a8:	e002      	b.n	81042b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81042aa:	2301      	movs	r3, #1
 81042ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81042b0:	697b      	ldr	r3, [r7, #20]
 81042b2:	2201      	movs	r2, #1
 81042b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81042b8:	697b      	ldr	r3, [r7, #20]
 81042ba:	2201      	movs	r2, #1
 81042bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81042c0:	697b      	ldr	r3, [r7, #20]
 81042c2:	2200      	movs	r2, #0
 81042c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81042c6:	697b      	ldr	r3, [r7, #20]
 81042c8:	2200      	movs	r2, #0
 81042ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81042cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81042d0:	4618      	mov	r0, r3
 81042d2:	3748      	adds	r7, #72	; 0x48
 81042d4:	46bd      	mov	sp, r7
 81042d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81042da:	bf00      	nop
 81042dc:	58024400 	.word	0x58024400
 81042e0:	03d09000 	.word	0x03d09000
 81042e4:	003d0900 	.word	0x003d0900
 81042e8:	08108154 	.word	0x08108154

081042ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81042ec:	b480      	push	{r7}
 81042ee:	b083      	sub	sp, #12
 81042f0:	af00      	add	r7, sp, #0
 81042f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81042f8:	f003 0301 	and.w	r3, r3, #1
 81042fc:	2b00      	cmp	r3, #0
 81042fe:	d00a      	beq.n	8104316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	685b      	ldr	r3, [r3, #4]
 8104306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	430a      	orrs	r2, r1
 8104314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810431a:	f003 0302 	and.w	r3, r3, #2
 810431e:	2b00      	cmp	r3, #0
 8104320:	d00a      	beq.n	8104338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	685b      	ldr	r3, [r3, #4]
 8104328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8104330:	687b      	ldr	r3, [r7, #4]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	430a      	orrs	r2, r1
 8104336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810433c:	f003 0304 	and.w	r3, r3, #4
 8104340:	2b00      	cmp	r3, #0
 8104342:	d00a      	beq.n	810435a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	685b      	ldr	r3, [r3, #4]
 810434a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	430a      	orrs	r2, r1
 8104358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810435e:	f003 0308 	and.w	r3, r3, #8
 8104362:	2b00      	cmp	r3, #0
 8104364:	d00a      	beq.n	810437c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	685b      	ldr	r3, [r3, #4]
 810436c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	430a      	orrs	r2, r1
 810437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104380:	f003 0310 	and.w	r3, r3, #16
 8104384:	2b00      	cmp	r3, #0
 8104386:	d00a      	beq.n	810439e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	689b      	ldr	r3, [r3, #8]
 810438e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	430a      	orrs	r2, r1
 810439c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81043a2:	f003 0320 	and.w	r3, r3, #32
 81043a6:	2b00      	cmp	r3, #0
 81043a8:	d00a      	beq.n	81043c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	689b      	ldr	r3, [r3, #8]
 81043b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	430a      	orrs	r2, r1
 81043be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81043c8:	2b00      	cmp	r3, #0
 81043ca:	d01a      	beq.n	8104402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	685b      	ldr	r3, [r3, #4]
 81043d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	430a      	orrs	r2, r1
 81043e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81043e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81043ea:	d10a      	bne.n	8104402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	685b      	ldr	r3, [r3, #4]
 81043f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	430a      	orrs	r2, r1
 8104400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810440a:	2b00      	cmp	r3, #0
 810440c:	d00a      	beq.n	8104424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	681b      	ldr	r3, [r3, #0]
 8104412:	685b      	ldr	r3, [r3, #4]
 8104414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	430a      	orrs	r2, r1
 8104422:	605a      	str	r2, [r3, #4]
  }
}
 8104424:	bf00      	nop
 8104426:	370c      	adds	r7, #12
 8104428:	46bd      	mov	sp, r7
 810442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810442e:	4770      	bx	lr

08104430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8104430:	b580      	push	{r7, lr}
 8104432:	b086      	sub	sp, #24
 8104434:	af02      	add	r7, sp, #8
 8104436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	2200      	movs	r2, #0
 810443c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8104440:	f7fc fd6e 	bl	8100f20 <HAL_GetTick>
 8104444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	f003 0308 	and.w	r3, r3, #8
 8104450:	2b08      	cmp	r3, #8
 8104452:	d10e      	bne.n	8104472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8104458:	9300      	str	r3, [sp, #0]
 810445a:	68fb      	ldr	r3, [r7, #12]
 810445c:	2200      	movs	r2, #0
 810445e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8104462:	6878      	ldr	r0, [r7, #4]
 8104464:	f000 f82f 	bl	81044c6 <UART_WaitOnFlagUntilTimeout>
 8104468:	4603      	mov	r3, r0
 810446a:	2b00      	cmp	r3, #0
 810446c:	d001      	beq.n	8104472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810446e:	2303      	movs	r3, #3
 8104470:	e025      	b.n	81044be <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	681b      	ldr	r3, [r3, #0]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	f003 0304 	and.w	r3, r3, #4
 810447c:	2b04      	cmp	r3, #4
 810447e:	d10e      	bne.n	810449e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8104484:	9300      	str	r3, [sp, #0]
 8104486:	68fb      	ldr	r3, [r7, #12]
 8104488:	2200      	movs	r2, #0
 810448a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810448e:	6878      	ldr	r0, [r7, #4]
 8104490:	f000 f819 	bl	81044c6 <UART_WaitOnFlagUntilTimeout>
 8104494:	4603      	mov	r3, r0
 8104496:	2b00      	cmp	r3, #0
 8104498:	d001      	beq.n	810449e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810449a:	2303      	movs	r3, #3
 810449c:	e00f      	b.n	81044be <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	2220      	movs	r2, #32
 81044a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	2220      	movs	r2, #32
 81044aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	2200      	movs	r2, #0
 81044b2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	2200      	movs	r2, #0
 81044b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81044bc:	2300      	movs	r3, #0
}
 81044be:	4618      	mov	r0, r3
 81044c0:	3710      	adds	r7, #16
 81044c2:	46bd      	mov	sp, r7
 81044c4:	bd80      	pop	{r7, pc}

081044c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81044c6:	b580      	push	{r7, lr}
 81044c8:	b09c      	sub	sp, #112	; 0x70
 81044ca:	af00      	add	r7, sp, #0
 81044cc:	60f8      	str	r0, [r7, #12]
 81044ce:	60b9      	str	r1, [r7, #8]
 81044d0:	603b      	str	r3, [r7, #0]
 81044d2:	4613      	mov	r3, r2
 81044d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81044d6:	e0a9      	b.n	810462c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81044d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 81044de:	f000 80a5 	beq.w	810462c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81044e2:	f7fc fd1d 	bl	8100f20 <HAL_GetTick>
 81044e6:	4602      	mov	r2, r0
 81044e8:	683b      	ldr	r3, [r7, #0]
 81044ea:	1ad3      	subs	r3, r2, r3
 81044ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81044ee:	429a      	cmp	r2, r3
 81044f0:	d302      	bcc.n	81044f8 <UART_WaitOnFlagUntilTimeout+0x32>
 81044f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81044f4:	2b00      	cmp	r3, #0
 81044f6:	d140      	bne.n	810457a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81044fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8104500:	e853 3f00 	ldrex	r3, [r3]
 8104504:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8104506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104508:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810450c:	667b      	str	r3, [r7, #100]	; 0x64
 810450e:	68fb      	ldr	r3, [r7, #12]
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	461a      	mov	r2, r3
 8104514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8104516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8104518:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810451a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810451c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810451e:	e841 2300 	strex	r3, r2, [r1]
 8104522:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8104524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8104526:	2b00      	cmp	r3, #0
 8104528:	d1e6      	bne.n	81044f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	3308      	adds	r3, #8
 8104530:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104534:	e853 3f00 	ldrex	r3, [r3]
 8104538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810453c:	f023 0301 	bic.w	r3, r3, #1
 8104540:	663b      	str	r3, [r7, #96]	; 0x60
 8104542:	68fb      	ldr	r3, [r7, #12]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	3308      	adds	r3, #8
 8104548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810454a:	64ba      	str	r2, [r7, #72]	; 0x48
 810454c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810454e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8104550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8104552:	e841 2300 	strex	r3, r2, [r1]
 8104556:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8104558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810455a:	2b00      	cmp	r3, #0
 810455c:	d1e5      	bne.n	810452a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	2220      	movs	r2, #32
 8104562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8104566:	68fb      	ldr	r3, [r7, #12]
 8104568:	2220      	movs	r2, #32
 810456a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810456e:	68fb      	ldr	r3, [r7, #12]
 8104570:	2200      	movs	r2, #0
 8104572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8104576:	2303      	movs	r3, #3
 8104578:	e069      	b.n	810464e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810457a:	68fb      	ldr	r3, [r7, #12]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	f003 0304 	and.w	r3, r3, #4
 8104584:	2b00      	cmp	r3, #0
 8104586:	d051      	beq.n	810462c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8104588:	68fb      	ldr	r3, [r7, #12]
 810458a:	681b      	ldr	r3, [r3, #0]
 810458c:	69db      	ldr	r3, [r3, #28]
 810458e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104596:	d149      	bne.n	810462c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8104598:	68fb      	ldr	r3, [r7, #12]
 810459a:	681b      	ldr	r3, [r3, #0]
 810459c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81045a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81045a2:	68fb      	ldr	r3, [r7, #12]
 81045a4:	681b      	ldr	r3, [r3, #0]
 81045a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81045aa:	e853 3f00 	ldrex	r3, [r3]
 81045ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81045b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81045b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 81045b8:	68fb      	ldr	r3, [r7, #12]
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	461a      	mov	r2, r3
 81045be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81045c0:	637b      	str	r3, [r7, #52]	; 0x34
 81045c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81045c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81045c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81045c8:	e841 2300 	strex	r3, r2, [r1]
 81045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81045d0:	2b00      	cmp	r3, #0
 81045d2:	d1e6      	bne.n	81045a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81045d4:	68fb      	ldr	r3, [r7, #12]
 81045d6:	681b      	ldr	r3, [r3, #0]
 81045d8:	3308      	adds	r3, #8
 81045da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81045dc:	697b      	ldr	r3, [r7, #20]
 81045de:	e853 3f00 	ldrex	r3, [r3]
 81045e2:	613b      	str	r3, [r7, #16]
   return(result);
 81045e4:	693b      	ldr	r3, [r7, #16]
 81045e6:	f023 0301 	bic.w	r3, r3, #1
 81045ea:	66bb      	str	r3, [r7, #104]	; 0x68
 81045ec:	68fb      	ldr	r3, [r7, #12]
 81045ee:	681b      	ldr	r3, [r3, #0]
 81045f0:	3308      	adds	r3, #8
 81045f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81045f4:	623a      	str	r2, [r7, #32]
 81045f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81045f8:	69f9      	ldr	r1, [r7, #28]
 81045fa:	6a3a      	ldr	r2, [r7, #32]
 81045fc:	e841 2300 	strex	r3, r2, [r1]
 8104600:	61bb      	str	r3, [r7, #24]
   return(result);
 8104602:	69bb      	ldr	r3, [r7, #24]
 8104604:	2b00      	cmp	r3, #0
 8104606:	d1e5      	bne.n	81045d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8104608:	68fb      	ldr	r3, [r7, #12]
 810460a:	2220      	movs	r2, #32
 810460c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8104610:	68fb      	ldr	r3, [r7, #12]
 8104612:	2220      	movs	r2, #32
 8104614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8104618:	68fb      	ldr	r3, [r7, #12]
 810461a:	2220      	movs	r2, #32
 810461c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104620:	68fb      	ldr	r3, [r7, #12]
 8104622:	2200      	movs	r2, #0
 8104624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8104628:	2303      	movs	r3, #3
 810462a:	e010      	b.n	810464e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810462c:	68fb      	ldr	r3, [r7, #12]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	69da      	ldr	r2, [r3, #28]
 8104632:	68bb      	ldr	r3, [r7, #8]
 8104634:	4013      	ands	r3, r2
 8104636:	68ba      	ldr	r2, [r7, #8]
 8104638:	429a      	cmp	r2, r3
 810463a:	bf0c      	ite	eq
 810463c:	2301      	moveq	r3, #1
 810463e:	2300      	movne	r3, #0
 8104640:	b2db      	uxtb	r3, r3
 8104642:	461a      	mov	r2, r3
 8104644:	79fb      	ldrb	r3, [r7, #7]
 8104646:	429a      	cmp	r2, r3
 8104648:	f43f af46 	beq.w	81044d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810464c:	2300      	movs	r3, #0
}
 810464e:	4618      	mov	r0, r3
 8104650:	3770      	adds	r7, #112	; 0x70
 8104652:	46bd      	mov	sp, r7
 8104654:	bd80      	pop	{r7, pc}

08104656 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8104656:	b480      	push	{r7}
 8104658:	b085      	sub	sp, #20
 810465a:	af00      	add	r7, sp, #0
 810465c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104664:	2b01      	cmp	r3, #1
 8104666:	d101      	bne.n	810466c <HAL_UARTEx_DisableFifoMode+0x16>
 8104668:	2302      	movs	r3, #2
 810466a:	e027      	b.n	81046bc <HAL_UARTEx_DisableFifoMode+0x66>
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	2201      	movs	r2, #1
 8104670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	2224      	movs	r2, #36	; 0x24
 8104678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	681a      	ldr	r2, [r3, #0]
 810468a:	687b      	ldr	r3, [r7, #4]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	f022 0201 	bic.w	r2, r2, #1
 8104692:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8104694:	68fb      	ldr	r3, [r7, #12]
 8104696:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810469a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	2200      	movs	r2, #0
 81046a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	68fa      	ldr	r2, [r7, #12]
 81046a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	2220      	movs	r2, #32
 81046ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	2200      	movs	r2, #0
 81046b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81046ba:	2300      	movs	r3, #0
}
 81046bc:	4618      	mov	r0, r3
 81046be:	3714      	adds	r7, #20
 81046c0:	46bd      	mov	sp, r7
 81046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046c6:	4770      	bx	lr

081046c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81046c8:	b580      	push	{r7, lr}
 81046ca:	b084      	sub	sp, #16
 81046cc:	af00      	add	r7, sp, #0
 81046ce:	6078      	str	r0, [r7, #4]
 81046d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81046d8:	2b01      	cmp	r3, #1
 81046da:	d101      	bne.n	81046e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81046dc:	2302      	movs	r3, #2
 81046de:	e02d      	b.n	810473c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	2201      	movs	r2, #1
 81046e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	2224      	movs	r2, #36	; 0x24
 81046ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	681b      	ldr	r3, [r3, #0]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	681b      	ldr	r3, [r3, #0]
 81046fc:	681a      	ldr	r2, [r3, #0]
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	f022 0201 	bic.w	r2, r2, #1
 8104706:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	689b      	ldr	r3, [r3, #8]
 810470e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	683a      	ldr	r2, [r7, #0]
 8104718:	430a      	orrs	r2, r1
 810471a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810471c:	6878      	ldr	r0, [r7, #4]
 810471e:	f000 f84f 	bl	81047c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	68fa      	ldr	r2, [r7, #12]
 8104728:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	2220      	movs	r2, #32
 810472e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	2200      	movs	r2, #0
 8104736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810473a:	2300      	movs	r3, #0
}
 810473c:	4618      	mov	r0, r3
 810473e:	3710      	adds	r7, #16
 8104740:	46bd      	mov	sp, r7
 8104742:	bd80      	pop	{r7, pc}

08104744 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104744:	b580      	push	{r7, lr}
 8104746:	b084      	sub	sp, #16
 8104748:	af00      	add	r7, sp, #0
 810474a:	6078      	str	r0, [r7, #4]
 810474c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104754:	2b01      	cmp	r3, #1
 8104756:	d101      	bne.n	810475c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8104758:	2302      	movs	r3, #2
 810475a:	e02d      	b.n	81047b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	2201      	movs	r2, #1
 8104760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	2224      	movs	r2, #36	; 0x24
 8104768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810476c:	687b      	ldr	r3, [r7, #4]
 810476e:	681b      	ldr	r3, [r3, #0]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	681b      	ldr	r3, [r3, #0]
 8104778:	681a      	ldr	r2, [r3, #0]
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	f022 0201 	bic.w	r2, r2, #1
 8104782:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	681b      	ldr	r3, [r3, #0]
 8104788:	689b      	ldr	r3, [r3, #8]
 810478a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	681b      	ldr	r3, [r3, #0]
 8104792:	683a      	ldr	r2, [r7, #0]
 8104794:	430a      	orrs	r2, r1
 8104796:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104798:	6878      	ldr	r0, [r7, #4]
 810479a:	f000 f811 	bl	81047c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810479e:	687b      	ldr	r3, [r7, #4]
 81047a0:	681b      	ldr	r3, [r3, #0]
 81047a2:	68fa      	ldr	r2, [r7, #12]
 81047a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	2220      	movs	r2, #32
 81047aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	2200      	movs	r2, #0
 81047b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81047b6:	2300      	movs	r3, #0
}
 81047b8:	4618      	mov	r0, r3
 81047ba:	3710      	adds	r7, #16
 81047bc:	46bd      	mov	sp, r7
 81047be:	bd80      	pop	{r7, pc}

081047c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81047c0:	b480      	push	{r7}
 81047c2:	b085      	sub	sp, #20
 81047c4:	af00      	add	r7, sp, #0
 81047c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047cc:	2b00      	cmp	r3, #0
 81047ce:	d108      	bne.n	81047e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81047d0:	687b      	ldr	r3, [r7, #4]
 81047d2:	2201      	movs	r2, #1
 81047d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	2201      	movs	r2, #1
 81047dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81047e0:	e031      	b.n	8104846 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81047e2:	2310      	movs	r3, #16
 81047e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81047e6:	2310      	movs	r3, #16
 81047e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	689b      	ldr	r3, [r3, #8]
 81047f0:	0e5b      	lsrs	r3, r3, #25
 81047f2:	b2db      	uxtb	r3, r3
 81047f4:	f003 0307 	and.w	r3, r3, #7
 81047f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	689b      	ldr	r3, [r3, #8]
 8104800:	0f5b      	lsrs	r3, r3, #29
 8104802:	b2db      	uxtb	r3, r3
 8104804:	f003 0307 	and.w	r3, r3, #7
 8104808:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810480a:	7bbb      	ldrb	r3, [r7, #14]
 810480c:	7b3a      	ldrb	r2, [r7, #12]
 810480e:	4911      	ldr	r1, [pc, #68]	; (8104854 <UARTEx_SetNbDataToProcess+0x94>)
 8104810:	5c8a      	ldrb	r2, [r1, r2]
 8104812:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8104816:	7b3a      	ldrb	r2, [r7, #12]
 8104818:	490f      	ldr	r1, [pc, #60]	; (8104858 <UARTEx_SetNbDataToProcess+0x98>)
 810481a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810481c:	fb93 f3f2 	sdiv	r3, r3, r2
 8104820:	b29a      	uxth	r2, r3
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104828:	7bfb      	ldrb	r3, [r7, #15]
 810482a:	7b7a      	ldrb	r2, [r7, #13]
 810482c:	4909      	ldr	r1, [pc, #36]	; (8104854 <UARTEx_SetNbDataToProcess+0x94>)
 810482e:	5c8a      	ldrb	r2, [r1, r2]
 8104830:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8104834:	7b7a      	ldrb	r2, [r7, #13]
 8104836:	4908      	ldr	r1, [pc, #32]	; (8104858 <UARTEx_SetNbDataToProcess+0x98>)
 8104838:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810483a:	fb93 f3f2 	sdiv	r3, r3, r2
 810483e:	b29a      	uxth	r2, r3
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8104846:	bf00      	nop
 8104848:	3714      	adds	r7, #20
 810484a:	46bd      	mov	sp, r7
 810484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104850:	4770      	bx	lr
 8104852:	bf00      	nop
 8104854:	0810816c 	.word	0x0810816c
 8104858:	08108174 	.word	0x08108174

0810485c <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 810485c:	b480      	push	{r7}
 810485e:	b083      	sub	sp, #12
 8104860:	af00      	add	r7, sp, #0
 8104862:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	687a      	ldr	r2, [r7, #4]
 8104868:	605a      	str	r2, [r3, #4]
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	685a      	ldr	r2, [r3, #4]
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	601a      	str	r2, [r3, #0]
}
 8104872:	bf00      	nop
 8104874:	370c      	adds	r7, #12
 8104876:	46bd      	mov	sp, r7
 8104878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810487c:	4770      	bx	lr

0810487e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 810487e:	b480      	push	{r7}
 8104880:	b083      	sub	sp, #12
 8104882:	af00      	add	r7, sp, #0
 8104884:	6078      	str	r0, [r7, #4]
 8104886:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	685a      	ldr	r2, [r3, #4]
 810488c:	683b      	ldr	r3, [r7, #0]
 810488e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8104890:	683b      	ldr	r3, [r7, #0]
 8104892:	687a      	ldr	r2, [r7, #4]
 8104894:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8104896:	683b      	ldr	r3, [r7, #0]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	683a      	ldr	r2, [r7, #0]
 810489c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 810489e:	683b      	ldr	r3, [r7, #0]
 81048a0:	685b      	ldr	r3, [r3, #4]
 81048a2:	683a      	ldr	r2, [r7, #0]
 81048a4:	601a      	str	r2, [r3, #0]
}
 81048a6:	bf00      	nop
 81048a8:	370c      	adds	r7, #12
 81048aa:	46bd      	mov	sp, r7
 81048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048b0:	4770      	bx	lr

081048b2 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 81048b2:	b580      	push	{r7, lr}
 81048b4:	b082      	sub	sp, #8
 81048b6:	af00      	add	r7, sp, #0
 81048b8:	6078      	str	r0, [r7, #4]
 81048ba:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 81048bc:	6839      	ldr	r1, [r7, #0]
 81048be:	6878      	ldr	r0, [r7, #4]
 81048c0:	f7ff ffdd 	bl	810487e <metal_list_add_before>
}
 81048c4:	bf00      	nop
 81048c6:	3708      	adds	r7, #8
 81048c8:	46bd      	mov	sp, r7
 81048ca:	bd80      	pop	{r7, pc}

081048cc <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 81048cc:	b580      	push	{r7, lr}
 81048ce:	b082      	sub	sp, #8
 81048d0:	af00      	add	r7, sp, #0
 81048d2:	6078      	str	r0, [r7, #4]
 81048d4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 81048d6:	6839      	ldr	r1, [r7, #0]
 81048d8:	6878      	ldr	r0, [r7, #4]
 81048da:	f001 fdbd 	bl	8106458 <metal_machine_cache_flush>
}
 81048de:	bf00      	nop
 81048e0:	3708      	adds	r7, #8
 81048e2:	46bd      	mov	sp, r7
 81048e4:	bd80      	pop	{r7, pc}

081048e6 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 81048e6:	b580      	push	{r7, lr}
 81048e8:	b082      	sub	sp, #8
 81048ea:	af00      	add	r7, sp, #0
 81048ec:	6078      	str	r0, [r7, #4]
 81048ee:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 81048f0:	6839      	ldr	r1, [r7, #0]
 81048f2:	6878      	ldr	r0, [r7, #4]
 81048f4:	f001 fdbb 	bl	810646e <metal_machine_cache_invalidate>
}
 81048f8:	bf00      	nop
 81048fa:	3708      	adds	r7, #8
 81048fc:	46bd      	mov	sp, r7
 81048fe:	bd80      	pop	{r7, pc}

08104900 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8104900:	b580      	push	{r7, lr}
 8104902:	b082      	sub	sp, #8
 8104904:	af00      	add	r7, sp, #0
 8104906:	6078      	str	r0, [r7, #4]
 8104908:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 810490a:	6839      	ldr	r1, [r7, #0]
 810490c:	6878      	ldr	r0, [r7, #4]
 810490e:	f7ff ffdd 	bl	81048cc <__metal_cache_flush>
}
 8104912:	bf00      	nop
 8104914:	3708      	adds	r7, #8
 8104916:	46bd      	mov	sp, r7
 8104918:	bd80      	pop	{r7, pc}

0810491a <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 810491a:	b580      	push	{r7, lr}
 810491c:	b082      	sub	sp, #8
 810491e:	af00      	add	r7, sp, #0
 8104920:	6078      	str	r0, [r7, #4]
 8104922:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8104924:	6839      	ldr	r1, [r7, #0]
 8104926:	6878      	ldr	r0, [r7, #4]
 8104928:	f7ff ffdd 	bl	81048e6 <__metal_cache_invalidate>
}
 810492c:	bf00      	nop
 810492e:	3708      	adds	r7, #8
 8104930:	46bd      	mov	sp, r7
 8104932:	bd80      	pop	{r7, pc}

08104934 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8104934:	b580      	push	{r7, lr}
 8104936:	b082      	sub	sp, #8
 8104938:	af00      	add	r7, sp, #0
 810493a:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	2b00      	cmp	r3, #0
 8104940:	d008      	beq.n	8104954 <metal_bus_register+0x20>
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	2b00      	cmp	r3, #0
 8104948:	d004      	beq.n	8104954 <metal_bus_register+0x20>
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	781b      	ldrb	r3, [r3, #0]
 8104950:	2b00      	cmp	r3, #0
 8104952:	d102      	bne.n	810495a <metal_bus_register+0x26>
		return -EINVAL;
 8104954:	f06f 0315 	mvn.w	r3, #21
 8104958:	e026      	b.n	81049a8 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	681b      	ldr	r3, [r3, #0]
 810495e:	2100      	movs	r1, #0
 8104960:	4618      	mov	r0, r3
 8104962:	f000 f82b 	bl	81049bc <metal_bus_find>
 8104966:	4603      	mov	r3, r0
 8104968:	2b00      	cmp	r3, #0
 810496a:	d102      	bne.n	8104972 <metal_bus_register+0x3e>
		return -EEXIST;
 810496c:	f06f 0310 	mvn.w	r3, #16
 8104970:	e01a      	b.n	81049a8 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	331c      	adds	r3, #28
 8104976:	4618      	mov	r0, r3
 8104978:	f7ff ff70 	bl	810485c <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	3324      	adds	r3, #36	; 0x24
 8104980:	4619      	mov	r1, r3
 8104982:	480b      	ldr	r0, [pc, #44]	; (81049b0 <metal_bus_register+0x7c>)
 8104984:	f7ff ff95 	bl	81048b2 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8104988:	4b0a      	ldr	r3, [pc, #40]	; (81049b4 <metal_bus_register+0x80>)
 810498a:	781b      	ldrb	r3, [r3, #0]
 810498c:	2b06      	cmp	r3, #6
 810498e:	d90a      	bls.n	81049a6 <metal_bus_register+0x72>
 8104990:	4b08      	ldr	r3, [pc, #32]	; (81049b4 <metal_bus_register+0x80>)
 8104992:	685b      	ldr	r3, [r3, #4]
 8104994:	2b00      	cmp	r3, #0
 8104996:	d006      	beq.n	81049a6 <metal_bus_register+0x72>
 8104998:	4b06      	ldr	r3, [pc, #24]	; (81049b4 <metal_bus_register+0x80>)
 810499a:	685b      	ldr	r3, [r3, #4]
 810499c:	687a      	ldr	r2, [r7, #4]
 810499e:	6812      	ldr	r2, [r2, #0]
 81049a0:	4905      	ldr	r1, [pc, #20]	; (81049b8 <metal_bus_register+0x84>)
 81049a2:	2007      	movs	r0, #7
 81049a4:	4798      	blx	r3
	return 0;
 81049a6:	2300      	movs	r3, #0
}
 81049a8:	4618      	mov	r0, r3
 81049aa:	3708      	adds	r7, #8
 81049ac:	46bd      	mov	sp, r7
 81049ae:	bd80      	pop	{r7, pc}
 81049b0:	100002a4 	.word	0x100002a4
 81049b4:	1000029c 	.word	0x1000029c
 81049b8:	08107f64 	.word	0x08107f64

081049bc <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 81049bc:	b580      	push	{r7, lr}
 81049be:	b084      	sub	sp, #16
 81049c0:	af00      	add	r7, sp, #0
 81049c2:	6078      	str	r0, [r7, #4]
 81049c4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 81049c6:	4b13      	ldr	r3, [pc, #76]	; (8104a14 <metal_bus_find+0x58>)
 81049c8:	689b      	ldr	r3, [r3, #8]
 81049ca:	60fb      	str	r3, [r7, #12]
 81049cc:	e017      	b.n	81049fe <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 81049ce:	68fb      	ldr	r3, [r7, #12]
 81049d0:	3b24      	subs	r3, #36	; 0x24
 81049d2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 81049d4:	68bb      	ldr	r3, [r7, #8]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	6879      	ldr	r1, [r7, #4]
 81049da:	4618      	mov	r0, r3
 81049dc:	f7fb fc80 	bl	81002e0 <strcmp>
 81049e0:	4603      	mov	r3, r0
 81049e2:	2b00      	cmp	r3, #0
 81049e4:	d003      	beq.n	81049ee <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	60fb      	str	r3, [r7, #12]
 81049ec:	e007      	b.n	81049fe <metal_bus_find+0x42>
			continue;
		if (result)
 81049ee:	683b      	ldr	r3, [r7, #0]
 81049f0:	2b00      	cmp	r3, #0
 81049f2:	d002      	beq.n	81049fa <metal_bus_find+0x3e>
			*result = bus;
 81049f4:	683b      	ldr	r3, [r7, #0]
 81049f6:	68ba      	ldr	r2, [r7, #8]
 81049f8:	601a      	str	r2, [r3, #0]
		return 0;
 81049fa:	2300      	movs	r3, #0
 81049fc:	e005      	b.n	8104a0a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 81049fe:	68fb      	ldr	r3, [r7, #12]
 8104a00:	4a05      	ldr	r2, [pc, #20]	; (8104a18 <metal_bus_find+0x5c>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d1e3      	bne.n	81049ce <metal_bus_find+0x12>
	}
	return -ENOENT;
 8104a06:	f06f 0301 	mvn.w	r3, #1
}
 8104a0a:	4618      	mov	r0, r3
 8104a0c:	3710      	adds	r7, #16
 8104a0e:	46bd      	mov	sp, r7
 8104a10:	bd80      	pop	{r7, pc}
 8104a12:	bf00      	nop
 8104a14:	1000029c 	.word	0x1000029c
 8104a18:	100002a4 	.word	0x100002a4

08104a1c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8104a1c:	b580      	push	{r7, lr}
 8104a1e:	b086      	sub	sp, #24
 8104a20:	af00      	add	r7, sp, #0
 8104a22:	60f8      	str	r0, [r7, #12]
 8104a24:	60b9      	str	r1, [r7, #8]
 8104a26:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d00d      	beq.n	8104a4a <metal_device_open+0x2e>
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	781b      	ldrb	r3, [r3, #0]
 8104a32:	2b00      	cmp	r3, #0
 8104a34:	d009      	beq.n	8104a4a <metal_device_open+0x2e>
 8104a36:	68bb      	ldr	r3, [r7, #8]
 8104a38:	2b00      	cmp	r3, #0
 8104a3a:	d006      	beq.n	8104a4a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8104a3c:	68bb      	ldr	r3, [r7, #8]
 8104a3e:	781b      	ldrb	r3, [r3, #0]
 8104a40:	2b00      	cmp	r3, #0
 8104a42:	d002      	beq.n	8104a4a <metal_device_open+0x2e>
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	2b00      	cmp	r3, #0
 8104a48:	d102      	bne.n	8104a50 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8104a4a:	f06f 0315 	mvn.w	r3, #21
 8104a4e:	e01f      	b.n	8104a90 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8104a50:	f107 0310 	add.w	r3, r7, #16
 8104a54:	4619      	mov	r1, r3
 8104a56:	68f8      	ldr	r0, [r7, #12]
 8104a58:	f7ff ffb0 	bl	81049bc <metal_bus_find>
 8104a5c:	6178      	str	r0, [r7, #20]
	if (error)
 8104a5e:	697b      	ldr	r3, [r7, #20]
 8104a60:	2b00      	cmp	r3, #0
 8104a62:	d001      	beq.n	8104a68 <metal_device_open+0x4c>
		return error;
 8104a64:	697b      	ldr	r3, [r7, #20]
 8104a66:	e013      	b.n	8104a90 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8104a68:	693b      	ldr	r3, [r7, #16]
 8104a6a:	689b      	ldr	r3, [r3, #8]
 8104a6c:	2b00      	cmp	r3, #0
 8104a6e:	d102      	bne.n	8104a76 <metal_device_open+0x5a>
		return -ENODEV;
 8104a70:	f06f 0312 	mvn.w	r3, #18
 8104a74:	e00c      	b.n	8104a90 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8104a76:	693b      	ldr	r3, [r7, #16]
 8104a78:	689b      	ldr	r3, [r3, #8]
 8104a7a:	6938      	ldr	r0, [r7, #16]
 8104a7c:	687a      	ldr	r2, [r7, #4]
 8104a7e:	68b9      	ldr	r1, [r7, #8]
 8104a80:	4798      	blx	r3
 8104a82:	6178      	str	r0, [r7, #20]
	if (error)
 8104a84:	697b      	ldr	r3, [r7, #20]
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	d001      	beq.n	8104a8e <metal_device_open+0x72>
		return error;
 8104a8a:	697b      	ldr	r3, [r7, #20]
 8104a8c:	e000      	b.n	8104a90 <metal_device_open+0x74>

	return 0;
 8104a8e:	2300      	movs	r3, #0
}
 8104a90:	4618      	mov	r0, r3
 8104a92:	3718      	adds	r7, #24
 8104a94:	46bd      	mov	sp, r7
 8104a96:	bd80      	pop	{r7, pc}

08104a98 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8104a98:	b580      	push	{r7, lr}
 8104a9a:	b082      	sub	sp, #8
 8104a9c:	af00      	add	r7, sp, #0
 8104a9e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	681b      	ldr	r3, [r3, #0]
 8104aa4:	2b00      	cmp	r3, #0
 8104aa6:	d008      	beq.n	8104aba <metal_register_generic_device+0x22>
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	681b      	ldr	r3, [r3, #0]
 8104aac:	781b      	ldrb	r3, [r3, #0]
 8104aae:	2b00      	cmp	r3, #0
 8104ab0:	d003      	beq.n	8104aba <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8104ab6:	2b02      	cmp	r3, #2
 8104ab8:	d902      	bls.n	8104ac0 <metal_register_generic_device+0x28>
		return -EINVAL;
 8104aba:	f06f 0315 	mvn.w	r3, #21
 8104abe:	e009      	b.n	8104ad4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	4a06      	ldr	r2, [pc, #24]	; (8104adc <metal_register_generic_device+0x44>)
 8104ac4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	336c      	adds	r3, #108	; 0x6c
 8104aca:	4619      	mov	r1, r3
 8104acc:	4804      	ldr	r0, [pc, #16]	; (8104ae0 <metal_register_generic_device+0x48>)
 8104ace:	f7ff fef0 	bl	81048b2 <metal_list_add_tail>
			    &device->node);
	return 0;
 8104ad2:	2300      	movs	r3, #0
}
 8104ad4:	4618      	mov	r0, r3
 8104ad6:	3708      	adds	r7, #8
 8104ad8:	46bd      	mov	sp, r7
 8104ada:	bd80      	pop	{r7, pc}
 8104adc:	10000010 	.word	0x10000010
 8104ae0:	100002b4 	.word	0x100002b4

08104ae4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8104ae4:	b580      	push	{r7, lr}
 8104ae6:	b086      	sub	sp, #24
 8104ae8:	af00      	add	r7, sp, #0
 8104aea:	60f8      	str	r0, [r7, #12]
 8104aec:	60b9      	str	r1, [r7, #8]
 8104aee:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104af0:	4b12      	ldr	r3, [pc, #72]	; (8104b3c <metal_generic_dev_open+0x58>)
 8104af2:	699b      	ldr	r3, [r3, #24]
 8104af4:	617b      	str	r3, [r7, #20]
 8104af6:	e017      	b.n	8104b28 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8104af8:	697b      	ldr	r3, [r7, #20]
 8104afa:	3b6c      	subs	r3, #108	; 0x6c
 8104afc:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8104afe:	693b      	ldr	r3, [r7, #16]
 8104b00:	681b      	ldr	r3, [r3, #0]
 8104b02:	68b9      	ldr	r1, [r7, #8]
 8104b04:	4618      	mov	r0, r3
 8104b06:	f7fb fbeb 	bl	81002e0 <strcmp>
 8104b0a:	4603      	mov	r3, r0
 8104b0c:	2b00      	cmp	r3, #0
 8104b0e:	d003      	beq.n	8104b18 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104b10:	697b      	ldr	r3, [r7, #20]
 8104b12:	681b      	ldr	r3, [r3, #0]
 8104b14:	617b      	str	r3, [r7, #20]
 8104b16:	e007      	b.n	8104b28 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	693a      	ldr	r2, [r7, #16]
 8104b1c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8104b1e:	6938      	ldr	r0, [r7, #16]
 8104b20:	f000 f88c 	bl	8104c3c <metal_generic_dev_sys_open>
 8104b24:	4603      	mov	r3, r0
 8104b26:	e005      	b.n	8104b34 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8104b28:	697b      	ldr	r3, [r7, #20]
 8104b2a:	4a05      	ldr	r2, [pc, #20]	; (8104b40 <metal_generic_dev_open+0x5c>)
 8104b2c:	4293      	cmp	r3, r2
 8104b2e:	d1e3      	bne.n	8104af8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8104b30:	f06f 0312 	mvn.w	r3, #18
}
 8104b34:	4618      	mov	r0, r3
 8104b36:	3718      	adds	r7, #24
 8104b38:	46bd      	mov	sp, r7
 8104b3a:	bd80      	pop	{r7, pc}
 8104b3c:	1000029c 	.word	0x1000029c
 8104b40:	100002b4 	.word	0x100002b4

08104b44 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8104b44:	b580      	push	{r7, lr}
 8104b46:	b086      	sub	sp, #24
 8104b48:	af00      	add	r7, sp, #0
 8104b4a:	60f8      	str	r0, [r7, #12]
 8104b4c:	60b9      	str	r1, [r7, #8]
 8104b4e:	607a      	str	r2, [r7, #4]
 8104b50:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8104b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104b54:	683b      	ldr	r3, [r7, #0]
 8104b56:	429a      	cmp	r2, r3
 8104b58:	d009      	beq.n	8104b6e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8104b5a:	6a3a      	ldr	r2, [r7, #32]
 8104b5c:	4613      	mov	r3, r2
 8104b5e:	005b      	lsls	r3, r3, #1
 8104b60:	4413      	add	r3, r2
 8104b62:	009b      	lsls	r3, r3, #2
 8104b64:	461a      	mov	r2, r3
 8104b66:	6839      	ldr	r1, [r7, #0]
 8104b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8104b6a:	f002 f9cd 	bl	8106f08 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8104b6e:	2300      	movs	r3, #0
 8104b70:	617b      	str	r3, [r7, #20]
 8104b72:	e02f      	b.n	8104bd4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	2b02      	cmp	r3, #2
 8104b78:	d114      	bne.n	8104ba4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8104b7a:	697a      	ldr	r2, [r7, #20]
 8104b7c:	4613      	mov	r3, r2
 8104b7e:	005b      	lsls	r3, r3, #1
 8104b80:	4413      	add	r3, r2
 8104b82:	009b      	lsls	r3, r3, #2
 8104b84:	461a      	mov	r2, r3
 8104b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104b88:	4413      	add	r3, r2
 8104b8a:	6818      	ldr	r0, [r3, #0]
 8104b8c:	697a      	ldr	r2, [r7, #20]
 8104b8e:	4613      	mov	r3, r2
 8104b90:	005b      	lsls	r3, r3, #1
 8104b92:	4413      	add	r3, r2
 8104b94:	009b      	lsls	r3, r3, #2
 8104b96:	461a      	mov	r2, r3
 8104b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104b9a:	4413      	add	r3, r2
 8104b9c:	689b      	ldr	r3, [r3, #8]
 8104b9e:	4619      	mov	r1, r3
 8104ba0:	f7ff feae 	bl	8104900 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8104ba4:	697a      	ldr	r2, [r7, #20]
 8104ba6:	4613      	mov	r3, r2
 8104ba8:	005b      	lsls	r3, r3, #1
 8104baa:	4413      	add	r3, r2
 8104bac:	009b      	lsls	r3, r3, #2
 8104bae:	461a      	mov	r2, r3
 8104bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104bb2:	4413      	add	r3, r2
 8104bb4:	6818      	ldr	r0, [r3, #0]
 8104bb6:	697a      	ldr	r2, [r7, #20]
 8104bb8:	4613      	mov	r3, r2
 8104bba:	005b      	lsls	r3, r3, #1
 8104bbc:	4413      	add	r3, r2
 8104bbe:	009b      	lsls	r3, r3, #2
 8104bc0:	461a      	mov	r2, r3
 8104bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104bc4:	4413      	add	r3, r2
 8104bc6:	689b      	ldr	r3, [r3, #8]
 8104bc8:	4619      	mov	r1, r3
 8104bca:	f7ff fea6 	bl	810491a <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8104bce:	697b      	ldr	r3, [r7, #20]
 8104bd0:	3301      	adds	r3, #1
 8104bd2:	617b      	str	r3, [r7, #20]
 8104bd4:	697a      	ldr	r2, [r7, #20]
 8104bd6:	6a3b      	ldr	r3, [r7, #32]
 8104bd8:	429a      	cmp	r2, r3
 8104bda:	dbcb      	blt.n	8104b74 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8104bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8104bde:	4618      	mov	r0, r3
 8104be0:	3718      	adds	r7, #24
 8104be2:	46bd      	mov	sp, r7
 8104be4:	bd80      	pop	{r7, pc}

08104be6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8104be6:	b580      	push	{r7, lr}
 8104be8:	b086      	sub	sp, #24
 8104bea:	af00      	add	r7, sp, #0
 8104bec:	60f8      	str	r0, [r7, #12]
 8104bee:	60b9      	str	r1, [r7, #8]
 8104bf0:	607a      	str	r2, [r7, #4]
 8104bf2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8104bf4:	2300      	movs	r3, #0
 8104bf6:	617b      	str	r3, [r7, #20]
 8104bf8:	e017      	b.n	8104c2a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8104bfa:	697a      	ldr	r2, [r7, #20]
 8104bfc:	4613      	mov	r3, r2
 8104bfe:	005b      	lsls	r3, r3, #1
 8104c00:	4413      	add	r3, r2
 8104c02:	009b      	lsls	r3, r3, #2
 8104c04:	461a      	mov	r2, r3
 8104c06:	683b      	ldr	r3, [r7, #0]
 8104c08:	4413      	add	r3, r2
 8104c0a:	6818      	ldr	r0, [r3, #0]
 8104c0c:	697a      	ldr	r2, [r7, #20]
 8104c0e:	4613      	mov	r3, r2
 8104c10:	005b      	lsls	r3, r3, #1
 8104c12:	4413      	add	r3, r2
 8104c14:	009b      	lsls	r3, r3, #2
 8104c16:	461a      	mov	r2, r3
 8104c18:	683b      	ldr	r3, [r7, #0]
 8104c1a:	4413      	add	r3, r2
 8104c1c:	689b      	ldr	r3, [r3, #8]
 8104c1e:	4619      	mov	r1, r3
 8104c20:	f7ff fe7b 	bl	810491a <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8104c24:	697b      	ldr	r3, [r7, #20]
 8104c26:	3301      	adds	r3, #1
 8104c28:	617b      	str	r3, [r7, #20]
 8104c2a:	697a      	ldr	r2, [r7, #20]
 8104c2c:	6a3b      	ldr	r3, [r7, #32]
 8104c2e:	429a      	cmp	r2, r3
 8104c30:	dbe3      	blt.n	8104bfa <metal_generic_dev_dma_unmap+0x14>
	}
}
 8104c32:	bf00      	nop
 8104c34:	bf00      	nop
 8104c36:	3718      	adds	r7, #24
 8104c38:	46bd      	mov	sp, r7
 8104c3a:	bd80      	pop	{r7, pc}

08104c3c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8104c3c:	b580      	push	{r7, lr}
 8104c3e:	b084      	sub	sp, #16
 8104c40:	af00      	add	r7, sp, #0
 8104c42:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8104c44:	2300      	movs	r3, #0
 8104c46:	60fb      	str	r3, [r7, #12]
 8104c48:	e013      	b.n	8104c72 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8104c4a:	68fa      	ldr	r2, [r7, #12]
 8104c4c:	4613      	mov	r3, r2
 8104c4e:	005b      	lsls	r3, r3, #1
 8104c50:	4413      	add	r3, r2
 8104c52:	011b      	lsls	r3, r3, #4
 8104c54:	3308      	adds	r3, #8
 8104c56:	687a      	ldr	r2, [r7, #4]
 8104c58:	4413      	add	r3, r2
 8104c5a:	3304      	adds	r3, #4
 8104c5c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8104c5e:	68bb      	ldr	r3, [r7, #8]
 8104c60:	689b      	ldr	r3, [r3, #8]
 8104c62:	2b00      	cmp	r3, #0
 8104c64:	d00b      	beq.n	8104c7e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8104c66:	68b8      	ldr	r0, [r7, #8]
 8104c68:	f000 f81e 	bl	8104ca8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8104c6c:	68fb      	ldr	r3, [r7, #12]
 8104c6e:	3301      	adds	r3, #1
 8104c70:	60fb      	str	r3, [r7, #12]
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	689b      	ldr	r3, [r3, #8]
 8104c76:	68fa      	ldr	r2, [r7, #12]
 8104c78:	429a      	cmp	r2, r3
 8104c7a:	d3e6      	bcc.n	8104c4a <metal_generic_dev_sys_open+0xe>
 8104c7c:	e000      	b.n	8104c80 <metal_generic_dev_sys_open+0x44>
			break;
 8104c7e:	bf00      	nop
	}

	return 0;
 8104c80:	2300      	movs	r3, #0
}
 8104c82:	4618      	mov	r0, r3
 8104c84:	3710      	adds	r7, #16
 8104c86:	46bd      	mov	sp, r7
 8104c88:	bd80      	pop	{r7, pc}
	...

08104c8c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8104c8c:	b580      	push	{r7, lr}
 8104c8e:	b082      	sub	sp, #8
 8104c90:	af00      	add	r7, sp, #0
 8104c92:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8104c94:	4803      	ldr	r0, [pc, #12]	; (8104ca4 <metal_sys_init+0x18>)
 8104c96:	f7ff fe4d 	bl	8104934 <metal_bus_register>
	return 0;
 8104c9a:	2300      	movs	r3, #0
}
 8104c9c:	4618      	mov	r0, r3
 8104c9e:	3708      	adds	r7, #8
 8104ca0:	46bd      	mov	sp, r7
 8104ca2:	bd80      	pop	{r7, pc}
 8104ca4:	10000010 	.word	0x10000010

08104ca8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8104ca8:	b580      	push	{r7, lr}
 8104caa:	b086      	sub	sp, #24
 8104cac:	af00      	add	r7, sp, #0
 8104cae:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	689b      	ldr	r3, [r3, #8]
 8104cba:	613b      	str	r3, [r7, #16]
	if (psize) {
 8104cbc:	693b      	ldr	r3, [r7, #16]
 8104cbe:	2b00      	cmp	r3, #0
 8104cc0:	d02c      	beq.n	8104d1c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8104cc2:	687b      	ldr	r3, [r7, #4]
 8104cc4:	68db      	ldr	r3, [r3, #12]
 8104cc6:	693a      	ldr	r2, [r7, #16]
 8104cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8104ccc:	2b00      	cmp	r3, #0
 8104cce:	d005      	beq.n	8104cdc <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	68db      	ldr	r3, [r3, #12]
 8104cd4:	2201      	movs	r2, #1
 8104cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8104cda:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8104cdc:	2300      	movs	r3, #0
 8104cde:	617b      	str	r3, [r7, #20]
 8104ce0:	e013      	b.n	8104d0a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	685a      	ldr	r2, [r3, #4]
 8104ce6:	697b      	ldr	r3, [r7, #20]
 8104ce8:	009b      	lsls	r3, r3, #2
 8104cea:	4413      	add	r3, r2
 8104cec:	6819      	ldr	r1, [r3, #0]
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	695b      	ldr	r3, [r3, #20]
 8104cf2:	693a      	ldr	r2, [r7, #16]
 8104cf4:	68f8      	ldr	r0, [r7, #12]
 8104cf6:	f001 fbc5 	bl	8106484 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8104cfa:	693b      	ldr	r3, [r7, #16]
 8104cfc:	009b      	lsls	r3, r3, #2
 8104cfe:	68fa      	ldr	r2, [r7, #12]
 8104d00:	4413      	add	r3, r2
 8104d02:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8104d04:	697b      	ldr	r3, [r7, #20]
 8104d06:	3301      	adds	r3, #1
 8104d08:	617b      	str	r3, [r7, #20]
 8104d0a:	687b      	ldr	r3, [r7, #4]
 8104d0c:	689a      	ldr	r2, [r3, #8]
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	68db      	ldr	r3, [r3, #12]
 8104d12:	fa22 f303 	lsr.w	r3, r2, r3
 8104d16:	697a      	ldr	r2, [r7, #20]
 8104d18:	429a      	cmp	r2, r3
 8104d1a:	d9e2      	bls.n	8104ce2 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8104d1c:	bf00      	nop
 8104d1e:	3718      	adds	r7, #24
 8104d20:	46bd      	mov	sp, r7
 8104d22:	bd80      	pop	{r7, pc}

08104d24 <metal_list_init>:
{
 8104d24:	b480      	push	{r7}
 8104d26:	b083      	sub	sp, #12
 8104d28:	af00      	add	r7, sp, #0
 8104d2a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	687a      	ldr	r2, [r7, #4]
 8104d30:	605a      	str	r2, [r3, #4]
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	685a      	ldr	r2, [r3, #4]
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	601a      	str	r2, [r3, #0]
}
 8104d3a:	bf00      	nop
 8104d3c:	370c      	adds	r7, #12
 8104d3e:	46bd      	mov	sp, r7
 8104d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d44:	4770      	bx	lr
	...

08104d48 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8104d48:	b580      	push	{r7, lr}
 8104d4a:	b084      	sub	sp, #16
 8104d4c:	af00      	add	r7, sp, #0
 8104d4e:	6078      	str	r0, [r7, #4]
	int error = 0;
 8104d50:	2300      	movs	r3, #0
 8104d52:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8104d54:	2220      	movs	r2, #32
 8104d56:	2100      	movs	r1, #0
 8104d58:	4810      	ldr	r0, [pc, #64]	; (8104d9c <metal_init+0x54>)
 8104d5a:	f002 f8e3 	bl	8106f24 <memset>

	_metal.common.log_handler   = params->log_handler;
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	4a0e      	ldr	r2, [pc, #56]	; (8104d9c <metal_init+0x54>)
 8104d64:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	791a      	ldrb	r2, [r3, #4]
 8104d6a:	4b0c      	ldr	r3, [pc, #48]	; (8104d9c <metal_init+0x54>)
 8104d6c:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8104d6e:	480c      	ldr	r0, [pc, #48]	; (8104da0 <metal_init+0x58>)
 8104d70:	f7ff ffd8 	bl	8104d24 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8104d74:	480b      	ldr	r0, [pc, #44]	; (8104da4 <metal_init+0x5c>)
 8104d76:	f7ff ffd5 	bl	8104d24 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8104d7a:	480b      	ldr	r0, [pc, #44]	; (8104da8 <metal_init+0x60>)
 8104d7c:	f7ff ffd2 	bl	8104d24 <metal_list_init>

	error = metal_sys_init(params);
 8104d80:	6878      	ldr	r0, [r7, #4]
 8104d82:	f7ff ff83 	bl	8104c8c <metal_sys_init>
 8104d86:	60f8      	str	r0, [r7, #12]
	if (error)
 8104d88:	68fb      	ldr	r3, [r7, #12]
 8104d8a:	2b00      	cmp	r3, #0
 8104d8c:	d001      	beq.n	8104d92 <metal_init+0x4a>
		return error;
 8104d8e:	68fb      	ldr	r3, [r7, #12]
 8104d90:	e000      	b.n	8104d94 <metal_init+0x4c>

	return error;
 8104d92:	68fb      	ldr	r3, [r7, #12]
}
 8104d94:	4618      	mov	r0, r3
 8104d96:	3710      	adds	r7, #16
 8104d98:	46bd      	mov	sp, r7
 8104d9a:	bd80      	pop	{r7, pc}
 8104d9c:	1000029c 	.word	0x1000029c
 8104da0:	100002a4 	.word	0x100002a4
 8104da4:	100002ac 	.word	0x100002ac
 8104da8:	100002b4 	.word	0x100002b4

08104dac <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8104dac:	b480      	push	{r7}
 8104dae:	b083      	sub	sp, #12
 8104db0:	af00      	add	r7, sp, #0
 8104db2:	6078      	str	r0, [r7, #4]
 8104db4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8104dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104dbe:	d009      	beq.n	8104dd4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	689b      	ldr	r3, [r3, #8]
 8104dc4:	683a      	ldr	r2, [r7, #0]
 8104dc6:	429a      	cmp	r2, r3
 8104dc8:	d804      	bhi.n	8104dd4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8104dce:	683b      	ldr	r3, [r7, #0]
 8104dd0:	4413      	add	r3, r2
 8104dd2:	e000      	b.n	8104dd6 <metal_io_virt+0x2a>
 8104dd4:	2300      	movs	r3, #0
}
 8104dd6:	4618      	mov	r0, r3
 8104dd8:	370c      	adds	r7, #12
 8104dda:	46bd      	mov	sp, r7
 8104ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104de0:	4770      	bx	lr

08104de2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8104de2:	b5b0      	push	{r4, r5, r7, lr}
 8104de4:	b08a      	sub	sp, #40	; 0x28
 8104de6:	af00      	add	r7, sp, #0
 8104de8:	60f8      	str	r0, [r7, #12]
 8104dea:	60b9      	str	r1, [r7, #8]
 8104dec:	607a      	str	r2, [r7, #4]
 8104dee:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8104df0:	f107 0310 	add.w	r3, r7, #16
 8104df4:	2200      	movs	r2, #0
 8104df6:	601a      	str	r2, [r3, #0]
 8104df8:	605a      	str	r2, [r3, #4]
 8104dfa:	609a      	str	r2, [r3, #8]
 8104dfc:	60da      	str	r2, [r3, #12]
 8104dfe:	611a      	str	r2, [r3, #16]
 8104e00:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	68ba      	ldr	r2, [r7, #8]
 8104e06:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8104e08:	68fb      	ldr	r3, [r7, #12]
 8104e0a:	687a      	ldr	r2, [r7, #4]
 8104e0c:	605a      	str	r2, [r3, #4]
	io->size = size;
 8104e0e:	68fb      	ldr	r3, [r7, #12]
 8104e10:	683a      	ldr	r2, [r7, #0]
 8104e12:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8104e14:	68fb      	ldr	r3, [r7, #12]
 8104e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104e18:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8104e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e1c:	2b1f      	cmp	r3, #31
 8104e1e:	d904      	bls.n	8104e2a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8104e20:	68fb      	ldr	r3, [r7, #12]
 8104e22:	f04f 32ff 	mov.w	r2, #4294967295
 8104e26:	611a      	str	r2, [r3, #16]
 8104e28:	e006      	b.n	8104e38 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8104e2a:	2201      	movs	r2, #1
 8104e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8104e32:	1e5a      	subs	r2, r3, #1
 8104e34:	68fb      	ldr	r3, [r7, #12]
 8104e36:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8104e38:	68fb      	ldr	r3, [r7, #12]
 8104e3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8104e3c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8104e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8104e40:	2b00      	cmp	r3, #0
 8104e42:	d00b      	beq.n	8104e5c <metal_io_init+0x7a>
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8104e48:	f103 0418 	add.w	r4, r3, #24
 8104e4c:	4615      	mov	r5, r2
 8104e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104e52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104e56:	e884 0003 	stmia.w	r4, {r0, r1}
 8104e5a:	e00a      	b.n	8104e72 <metal_io_init+0x90>
 8104e5c:	68fb      	ldr	r3, [r7, #12]
 8104e5e:	f103 0418 	add.w	r4, r3, #24
 8104e62:	f107 0510 	add.w	r5, r7, #16
 8104e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104e6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104e6e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8104e72:	68f8      	ldr	r0, [r7, #12]
 8104e74:	f7ff ff18 	bl	8104ca8 <metal_sys_io_mem_map>
}
 8104e78:	bf00      	nop
 8104e7a:	3728      	adds	r7, #40	; 0x28
 8104e7c:	46bd      	mov	sp, r7
 8104e7e:	bdb0      	pop	{r4, r5, r7, pc}

08104e80 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8104e80:	b590      	push	{r4, r7, lr}
 8104e82:	b08b      	sub	sp, #44	; 0x2c
 8104e84:	af02      	add	r7, sp, #8
 8104e86:	60f8      	str	r0, [r7, #12]
 8104e88:	60b9      	str	r1, [r7, #8]
 8104e8a:	607a      	str	r2, [r7, #4]
 8104e8c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8104e8e:	68b9      	ldr	r1, [r7, #8]
 8104e90:	68f8      	ldr	r0, [r7, #12]
 8104e92:	f7ff ff8b 	bl	8104dac <metal_io_virt>
 8104e96:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8104e9c:	68fb      	ldr	r3, [r7, #12]
 8104e9e:	689b      	ldr	r3, [r3, #8]
 8104ea0:	68ba      	ldr	r2, [r7, #8]
 8104ea2:	429a      	cmp	r2, r3
 8104ea4:	d902      	bls.n	8104eac <metal_io_block_read+0x2c>
		return -ERANGE;
 8104ea6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8104eaa:	e05c      	b.n	8104f66 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8104eac:	683a      	ldr	r2, [r7, #0]
 8104eae:	68bb      	ldr	r3, [r7, #8]
 8104eb0:	441a      	add	r2, r3
 8104eb2:	68fb      	ldr	r3, [r7, #12]
 8104eb4:	689b      	ldr	r3, [r3, #8]
 8104eb6:	429a      	cmp	r2, r3
 8104eb8:	d904      	bls.n	8104ec4 <metal_io_block_read+0x44>
		len = io->size - offset;
 8104eba:	68fb      	ldr	r3, [r7, #12]
 8104ebc:	689a      	ldr	r2, [r3, #8]
 8104ebe:	68bb      	ldr	r3, [r7, #8]
 8104ec0:	1ad3      	subs	r3, r2, r3
 8104ec2:	603b      	str	r3, [r7, #0]
	retlen = len;
 8104ec4:	683b      	ldr	r3, [r7, #0]
 8104ec6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	6a1b      	ldr	r3, [r3, #32]
 8104ecc:	2b00      	cmp	r3, #0
 8104ece:	d00a      	beq.n	8104ee6 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	6a1c      	ldr	r4, [r3, #32]
 8104ed4:	683b      	ldr	r3, [r7, #0]
 8104ed6:	9300      	str	r3, [sp, #0]
 8104ed8:	2305      	movs	r3, #5
 8104eda:	687a      	ldr	r2, [r7, #4]
 8104edc:	68b9      	ldr	r1, [r7, #8]
 8104ede:	68f8      	ldr	r0, [r7, #12]
 8104ee0:	47a0      	blx	r4
 8104ee2:	6178      	str	r0, [r7, #20]
 8104ee4:	e03e      	b.n	8104f64 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8104ee6:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8104eea:	e00c      	b.n	8104f06 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8104eec:	69fb      	ldr	r3, [r7, #28]
 8104eee:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8104ef0:	69bb      	ldr	r3, [r7, #24]
 8104ef2:	701a      	strb	r2, [r3, #0]
			dest++;
 8104ef4:	69bb      	ldr	r3, [r7, #24]
 8104ef6:	3301      	adds	r3, #1
 8104ef8:	61bb      	str	r3, [r7, #24]
			ptr++;
 8104efa:	69fb      	ldr	r3, [r7, #28]
 8104efc:	3301      	adds	r3, #1
 8104efe:	61fb      	str	r3, [r7, #28]
			len--;
 8104f00:	683b      	ldr	r3, [r7, #0]
 8104f02:	3b01      	subs	r3, #1
 8104f04:	603b      	str	r3, [r7, #0]
		while ( len && (
 8104f06:	683b      	ldr	r3, [r7, #0]
 8104f08:	2b00      	cmp	r3, #0
 8104f0a:	d017      	beq.n	8104f3c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8104f0c:	69bb      	ldr	r3, [r7, #24]
 8104f0e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8104f12:	2b00      	cmp	r3, #0
 8104f14:	d1ea      	bne.n	8104eec <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8104f16:	69fb      	ldr	r3, [r7, #28]
 8104f18:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8104f1c:	2b00      	cmp	r3, #0
 8104f1e:	d1e5      	bne.n	8104eec <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8104f20:	e00c      	b.n	8104f3c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8104f22:	69fb      	ldr	r3, [r7, #28]
 8104f24:	681a      	ldr	r2, [r3, #0]
 8104f26:	69bb      	ldr	r3, [r7, #24]
 8104f28:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8104f2a:	69bb      	ldr	r3, [r7, #24]
 8104f2c:	3304      	adds	r3, #4
 8104f2e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8104f30:	69fb      	ldr	r3, [r7, #28]
 8104f32:	3304      	adds	r3, #4
 8104f34:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8104f36:	683b      	ldr	r3, [r7, #0]
 8104f38:	3b04      	subs	r3, #4
 8104f3a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8104f3c:	683b      	ldr	r3, [r7, #0]
 8104f3e:	2b03      	cmp	r3, #3
 8104f40:	dcef      	bgt.n	8104f22 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8104f42:	e00c      	b.n	8104f5e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8104f44:	69fb      	ldr	r3, [r7, #28]
 8104f46:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8104f48:	69bb      	ldr	r3, [r7, #24]
 8104f4a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8104f4c:	69bb      	ldr	r3, [r7, #24]
 8104f4e:	3301      	adds	r3, #1
 8104f50:	61bb      	str	r3, [r7, #24]
 8104f52:	69fb      	ldr	r3, [r7, #28]
 8104f54:	3301      	adds	r3, #1
 8104f56:	61fb      	str	r3, [r7, #28]
 8104f58:	683b      	ldr	r3, [r7, #0]
 8104f5a:	3b01      	subs	r3, #1
 8104f5c:	603b      	str	r3, [r7, #0]
 8104f5e:	683b      	ldr	r3, [r7, #0]
 8104f60:	2b00      	cmp	r3, #0
 8104f62:	d1ef      	bne.n	8104f44 <metal_io_block_read+0xc4>
	}
	return retlen;
 8104f64:	697b      	ldr	r3, [r7, #20]
}
 8104f66:	4618      	mov	r0, r3
 8104f68:	3724      	adds	r7, #36	; 0x24
 8104f6a:	46bd      	mov	sp, r7
 8104f6c:	bd90      	pop	{r4, r7, pc}

08104f6e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8104f6e:	b590      	push	{r4, r7, lr}
 8104f70:	b08b      	sub	sp, #44	; 0x2c
 8104f72:	af02      	add	r7, sp, #8
 8104f74:	60f8      	str	r0, [r7, #12]
 8104f76:	60b9      	str	r1, [r7, #8]
 8104f78:	607a      	str	r2, [r7, #4]
 8104f7a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8104f7c:	68b9      	ldr	r1, [r7, #8]
 8104f7e:	68f8      	ldr	r0, [r7, #12]
 8104f80:	f7ff ff14 	bl	8104dac <metal_io_virt>
 8104f84:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8104f8a:	68fb      	ldr	r3, [r7, #12]
 8104f8c:	689b      	ldr	r3, [r3, #8]
 8104f8e:	68ba      	ldr	r2, [r7, #8]
 8104f90:	429a      	cmp	r2, r3
 8104f92:	d902      	bls.n	8104f9a <metal_io_block_write+0x2c>
		return -ERANGE;
 8104f94:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8104f98:	e05b      	b.n	8105052 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8104f9a:	683a      	ldr	r2, [r7, #0]
 8104f9c:	68bb      	ldr	r3, [r7, #8]
 8104f9e:	441a      	add	r2, r3
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	689b      	ldr	r3, [r3, #8]
 8104fa4:	429a      	cmp	r2, r3
 8104fa6:	d904      	bls.n	8104fb2 <metal_io_block_write+0x44>
		len = io->size - offset;
 8104fa8:	68fb      	ldr	r3, [r7, #12]
 8104faa:	689a      	ldr	r2, [r3, #8]
 8104fac:	68bb      	ldr	r3, [r7, #8]
 8104fae:	1ad3      	subs	r3, r2, r3
 8104fb0:	603b      	str	r3, [r7, #0]
	retlen = len;
 8104fb2:	683b      	ldr	r3, [r7, #0]
 8104fb4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8104fb6:	68fb      	ldr	r3, [r7, #12]
 8104fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fba:	2b00      	cmp	r3, #0
 8104fbc:	d017      	beq.n	8104fee <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8104fc2:	683b      	ldr	r3, [r7, #0]
 8104fc4:	9300      	str	r3, [sp, #0]
 8104fc6:	2305      	movs	r3, #5
 8104fc8:	687a      	ldr	r2, [r7, #4]
 8104fca:	68b9      	ldr	r1, [r7, #8]
 8104fcc:	68f8      	ldr	r0, [r7, #12]
 8104fce:	47a0      	blx	r4
 8104fd0:	6178      	str	r0, [r7, #20]
 8104fd2:	e03d      	b.n	8105050 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8104fd4:	69bb      	ldr	r3, [r7, #24]
 8104fd6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8104fd8:	69fb      	ldr	r3, [r7, #28]
 8104fda:	701a      	strb	r2, [r3, #0]
			ptr++;
 8104fdc:	69fb      	ldr	r3, [r7, #28]
 8104fde:	3301      	adds	r3, #1
 8104fe0:	61fb      	str	r3, [r7, #28]
			source++;
 8104fe2:	69bb      	ldr	r3, [r7, #24]
 8104fe4:	3301      	adds	r3, #1
 8104fe6:	61bb      	str	r3, [r7, #24]
			len--;
 8104fe8:	683b      	ldr	r3, [r7, #0]
 8104fea:	3b01      	subs	r3, #1
 8104fec:	603b      	str	r3, [r7, #0]
		while ( len && (
 8104fee:	683b      	ldr	r3, [r7, #0]
 8104ff0:	2b00      	cmp	r3, #0
 8104ff2:	d017      	beq.n	8105024 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8104ff4:	69fb      	ldr	r3, [r7, #28]
 8104ff6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8104ffa:	2b00      	cmp	r3, #0
 8104ffc:	d1ea      	bne.n	8104fd4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8104ffe:	69bb      	ldr	r3, [r7, #24]
 8105000:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8105004:	2b00      	cmp	r3, #0
 8105006:	d1e5      	bne.n	8104fd4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8105008:	e00c      	b.n	8105024 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810500a:	69bb      	ldr	r3, [r7, #24]
 810500c:	681a      	ldr	r2, [r3, #0]
 810500e:	69fb      	ldr	r3, [r7, #28]
 8105010:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8105012:	69fb      	ldr	r3, [r7, #28]
 8105014:	3304      	adds	r3, #4
 8105016:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8105018:	69bb      	ldr	r3, [r7, #24]
 810501a:	3304      	adds	r3, #4
 810501c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 810501e:	683b      	ldr	r3, [r7, #0]
 8105020:	3b04      	subs	r3, #4
 8105022:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8105024:	683b      	ldr	r3, [r7, #0]
 8105026:	2b03      	cmp	r3, #3
 8105028:	dcef      	bgt.n	810500a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 810502a:	e00c      	b.n	8105046 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810502c:	69bb      	ldr	r3, [r7, #24]
 810502e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8105030:	69fb      	ldr	r3, [r7, #28]
 8105032:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8105034:	69fb      	ldr	r3, [r7, #28]
 8105036:	3301      	adds	r3, #1
 8105038:	61fb      	str	r3, [r7, #28]
 810503a:	69bb      	ldr	r3, [r7, #24]
 810503c:	3301      	adds	r3, #1
 810503e:	61bb      	str	r3, [r7, #24]
 8105040:	683b      	ldr	r3, [r7, #0]
 8105042:	3b01      	subs	r3, #1
 8105044:	603b      	str	r3, [r7, #0]
 8105046:	683b      	ldr	r3, [r7, #0]
 8105048:	2b00      	cmp	r3, #0
 810504a:	d1ef      	bne.n	810502c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 810504c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8105050:	697b      	ldr	r3, [r7, #20]
}
 8105052:	4618      	mov	r0, r3
 8105054:	3724      	adds	r7, #36	; 0x24
 8105056:	46bd      	mov	sp, r7
 8105058:	bd90      	pop	{r4, r7, pc}

0810505a <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 810505a:	b40e      	push	{r1, r2, r3}
 810505c:	b480      	push	{r7}
 810505e:	b082      	sub	sp, #8
 8105060:	af00      	add	r7, sp, #0
 8105062:	4603      	mov	r3, r0
 8105064:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8105066:	bf00      	nop
 8105068:	3708      	adds	r7, #8
 810506a:	46bd      	mov	sp, r7
 810506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105070:	b003      	add	sp, #12
 8105072:	4770      	bx	lr

08105074 <metal_io_virt>:
{
 8105074:	b480      	push	{r7}
 8105076:	b083      	sub	sp, #12
 8105078:	af00      	add	r7, sp, #0
 810507a:	6078      	str	r0, [r7, #4]
 810507c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8105082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105086:	d009      	beq.n	810509c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	689b      	ldr	r3, [r3, #8]
 810508c:	683a      	ldr	r2, [r7, #0]
 810508e:	429a      	cmp	r2, r3
 8105090:	d804      	bhi.n	810509c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8105096:	683b      	ldr	r3, [r7, #0]
 8105098:	4413      	add	r3, r2
 810509a:	e000      	b.n	810509e <metal_io_virt+0x2a>
 810509c:	2300      	movs	r3, #0
}
 810509e:	4618      	mov	r0, r3
 81050a0:	370c      	adds	r7, #12
 81050a2:	46bd      	mov	sp, r7
 81050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050a8:	4770      	bx	lr

081050aa <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 81050aa:	b480      	push	{r7}
 81050ac:	b085      	sub	sp, #20
 81050ae:	af00      	add	r7, sp, #0
 81050b0:	6078      	str	r0, [r7, #4]
 81050b2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81050b4:	687b      	ldr	r3, [r7, #4]
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	683a      	ldr	r2, [r7, #0]
 81050ba:	1ad3      	subs	r3, r2, r3
 81050bc:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81050be:	687b      	ldr	r3, [r7, #4]
 81050c0:	689b      	ldr	r3, [r3, #8]
 81050c2:	68fa      	ldr	r2, [r7, #12]
 81050c4:	429a      	cmp	r2, r3
 81050c6:	d201      	bcs.n	81050cc <metal_io_virt_to_offset+0x22>
 81050c8:	68fb      	ldr	r3, [r7, #12]
 81050ca:	e001      	b.n	81050d0 <metal_io_virt_to_offset+0x26>
 81050cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 81050d0:	4618      	mov	r0, r3
 81050d2:	3714      	adds	r7, #20
 81050d4:	46bd      	mov	sp, r7
 81050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050da:	4770      	bx	lr

081050dc <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 81050dc:	b5b0      	push	{r4, r5, r7, lr}
 81050de:	b08c      	sub	sp, #48	; 0x30
 81050e0:	af00      	add	r7, sp, #0
 81050e2:	60f8      	str	r0, [r7, #12]
 81050e4:	60b9      	str	r1, [r7, #8]
 81050e6:	603b      	str	r3, [r7, #0]
 81050e8:	4613      	mov	r3, r2
 81050ea:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 81050ec:	68b9      	ldr	r1, [r7, #8]
 81050ee:	68f8      	ldr	r0, [r7, #12]
 81050f0:	f7ff ffc0 	bl	8105074 <metal_io_virt>
 81050f4:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 81050f6:	68fb      	ldr	r3, [r7, #12]
 81050f8:	699b      	ldr	r3, [r3, #24]
 81050fa:	2b00      	cmp	r3, #0
 81050fc:	d009      	beq.n	8105112 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 81050fe:	68fb      	ldr	r3, [r7, #12]
 8105100:	699c      	ldr	r4, [r3, #24]
 8105102:	79fa      	ldrb	r2, [r7, #7]
 8105104:	683b      	ldr	r3, [r7, #0]
 8105106:	68b9      	ldr	r1, [r7, #8]
 8105108:	68f8      	ldr	r0, [r7, #12]
 810510a:	47a0      	blx	r4
 810510c:	4604      	mov	r4, r0
 810510e:	460d      	mov	r5, r1
 8105110:	e059      	b.n	81051c6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8105112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105114:	2b00      	cmp	r3, #0
 8105116:	d012      	beq.n	810513e <metal_io_read+0x62>
 8105118:	683b      	ldr	r3, [r7, #0]
 810511a:	2b01      	cmp	r3, #1
 810511c:	d10f      	bne.n	810513e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 810511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105120:	62bb      	str	r3, [r7, #40]	; 0x28
 8105122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105124:	f3bf 8f5b 	dmb	ish
 8105128:	781b      	ldrb	r3, [r3, #0]
 810512a:	f3bf 8f5b 	dmb	ish
 810512e:	b2db      	uxtb	r3, r3
 8105130:	76fb      	strb	r3, [r7, #27]
 8105132:	7efb      	ldrb	r3, [r7, #27]
 8105134:	b2db      	uxtb	r3, r3
 8105136:	2200      	movs	r2, #0
 8105138:	461c      	mov	r4, r3
 810513a:	4615      	mov	r5, r2
 810513c:	e043      	b.n	81051c6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 810513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105140:	2b00      	cmp	r3, #0
 8105142:	d012      	beq.n	810516a <metal_io_read+0x8e>
 8105144:	683b      	ldr	r3, [r7, #0]
 8105146:	2b02      	cmp	r3, #2
 8105148:	d10f      	bne.n	810516a <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 810514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810514c:	627b      	str	r3, [r7, #36]	; 0x24
 810514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105150:	f3bf 8f5b 	dmb	ish
 8105154:	881b      	ldrh	r3, [r3, #0]
 8105156:	f3bf 8f5b 	dmb	ish
 810515a:	b29b      	uxth	r3, r3
 810515c:	833b      	strh	r3, [r7, #24]
 810515e:	8b3b      	ldrh	r3, [r7, #24]
 8105160:	b29b      	uxth	r3, r3
 8105162:	2200      	movs	r2, #0
 8105164:	461c      	mov	r4, r3
 8105166:	4615      	mov	r5, r2
 8105168:	e02d      	b.n	81051c6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 810516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810516c:	2b00      	cmp	r3, #0
 810516e:	d010      	beq.n	8105192 <metal_io_read+0xb6>
 8105170:	683b      	ldr	r3, [r7, #0]
 8105172:	2b04      	cmp	r3, #4
 8105174:	d10d      	bne.n	8105192 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8105176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105178:	623b      	str	r3, [r7, #32]
 810517a:	6a3b      	ldr	r3, [r7, #32]
 810517c:	f3bf 8f5b 	dmb	ish
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	f3bf 8f5b 	dmb	ish
 8105186:	617b      	str	r3, [r7, #20]
 8105188:	697b      	ldr	r3, [r7, #20]
 810518a:	2200      	movs	r2, #0
 810518c:	461c      	mov	r4, r3
 810518e:	4615      	mov	r5, r2
 8105190:	e019      	b.n	81051c6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8105192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105194:	2b00      	cmp	r3, #0
 8105196:	d010      	beq.n	81051ba <metal_io_read+0xde>
 8105198:	683b      	ldr	r3, [r7, #0]
 810519a:	2b04      	cmp	r3, #4
 810519c:	d10d      	bne.n	81051ba <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 810519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81051a0:	61fb      	str	r3, [r7, #28]
 81051a2:	69fb      	ldr	r3, [r7, #28]
 81051a4:	f3bf 8f5b 	dmb	ish
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	f3bf 8f5b 	dmb	ish
 81051ae:	613b      	str	r3, [r7, #16]
 81051b0:	693b      	ldr	r3, [r7, #16]
 81051b2:	2200      	movs	r2, #0
 81051b4:	461c      	mov	r4, r3
 81051b6:	4615      	mov	r5, r2
 81051b8:	e005      	b.n	81051c6 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 81051ba:	4b06      	ldr	r3, [pc, #24]	; (81051d4 <metal_io_read+0xf8>)
 81051bc:	4a06      	ldr	r2, [pc, #24]	; (81051d8 <metal_io_read+0xfc>)
 81051be:	21f0      	movs	r1, #240	; 0xf0
 81051c0:	4806      	ldr	r0, [pc, #24]	; (81051dc <metal_io_read+0x100>)
 81051c2:	f001 fe3d 	bl	8106e40 <__assert_func>
	return 0; /* quiet compiler */
}
 81051c6:	4622      	mov	r2, r4
 81051c8:	462b      	mov	r3, r5
 81051ca:	4610      	mov	r0, r2
 81051cc:	4619      	mov	r1, r3
 81051ce:	3730      	adds	r7, #48	; 0x30
 81051d0:	46bd      	mov	sp, r7
 81051d2:	bdb0      	pop	{r4, r5, r7, pc}
 81051d4:	08108020 	.word	0x08108020
 81051d8:	081081c0 	.word	0x081081c0
 81051dc:	08108024 	.word	0x08108024

081051e0 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 81051e0:	b580      	push	{r7, lr}
 81051e2:	b082      	sub	sp, #8
 81051e4:	af00      	add	r7, sp, #0
 81051e6:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 81051e8:	6878      	ldr	r0, [r7, #4]
 81051ea:	f001 fe7d 	bl	8106ee8 <malloc>
 81051ee:	4603      	mov	r3, r0
}
 81051f0:	4618      	mov	r0, r3
 81051f2:	3708      	adds	r7, #8
 81051f4:	46bd      	mov	sp, r7
 81051f6:	bd80      	pop	{r7, pc}

081051f8 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 81051f8:	b580      	push	{r7, lr}
 81051fa:	b082      	sub	sp, #8
 81051fc:	af00      	add	r7, sp, #0
 81051fe:	6078      	str	r0, [r7, #4]
	free(ptr);
 8105200:	6878      	ldr	r0, [r7, #4]
 8105202:	f001 fe79 	bl	8106ef8 <free>
}
 8105206:	bf00      	nop
 8105208:	3708      	adds	r7, #8
 810520a:	46bd      	mov	sp, r7
 810520c:	bd80      	pop	{r7, pc}

0810520e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 810520e:	b580      	push	{r7, lr}
 8105210:	b084      	sub	sp, #16
 8105212:	af00      	add	r7, sp, #0
 8105214:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8105216:	687b      	ldr	r3, [r7, #4]
 8105218:	3307      	adds	r3, #7
 810521a:	00db      	lsls	r3, r3, #3
 810521c:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 810521e:	68f8      	ldr	r0, [r7, #12]
 8105220:	f7ff ffde 	bl	81051e0 <metal_allocate_memory>
 8105224:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8105226:	68bb      	ldr	r3, [r7, #8]
 8105228:	2b00      	cmp	r3, #0
 810522a:	d004      	beq.n	8105236 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 810522c:	68fa      	ldr	r2, [r7, #12]
 810522e:	2100      	movs	r1, #0
 8105230:	68b8      	ldr	r0, [r7, #8]
 8105232:	f001 fe77 	bl	8106f24 <memset>
	}

	return vqs;
 8105236:	68bb      	ldr	r3, [r7, #8]
}
 8105238:	4618      	mov	r0, r3
 810523a:	3710      	adds	r7, #16
 810523c:	46bd      	mov	sp, r7
 810523e:	bd80      	pop	{r7, pc}

08105240 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8105240:	b580      	push	{r7, lr}
 8105242:	b086      	sub	sp, #24
 8105244:	af00      	add	r7, sp, #0
 8105246:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	891b      	ldrh	r3, [r3, #8]
 810524c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8105254:	693b      	ldr	r3, [r7, #16]
 8105256:	3b18      	subs	r3, #24
 8105258:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 810525a:	693b      	ldr	r3, [r7, #16]
 810525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810525e:	697a      	ldr	r2, [r7, #20]
 8105260:	429a      	cmp	r2, r3
 8105262:	d905      	bls.n	8105270 <rproc_virtio_virtqueue_notify+0x30>
 8105264:	4b0d      	ldr	r3, [pc, #52]	; (810529c <rproc_virtio_virtqueue_notify+0x5c>)
 8105266:	4a0e      	ldr	r2, [pc, #56]	; (81052a0 <rproc_virtio_virtqueue_notify+0x60>)
 8105268:	2133      	movs	r1, #51	; 0x33
 810526a:	480e      	ldr	r0, [pc, #56]	; (81052a4 <rproc_virtio_virtqueue_notify+0x64>)
 810526c:	f001 fde8 	bl	8106e40 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8105270:	693b      	ldr	r3, [r7, #16]
 8105272:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105274:	697a      	ldr	r2, [r7, #20]
 8105276:	4613      	mov	r3, r2
 8105278:	005b      	lsls	r3, r3, #1
 810527a:	4413      	add	r3, r2
 810527c:	00db      	lsls	r3, r3, #3
 810527e:	440b      	add	r3, r1
 8105280:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8105282:	68fb      	ldr	r3, [r7, #12]
 8105284:	691b      	ldr	r3, [r3, #16]
 8105286:	68fa      	ldr	r2, [r7, #12]
 8105288:	6810      	ldr	r0, [r2, #0]
 810528a:	68ba      	ldr	r2, [r7, #8]
 810528c:	6912      	ldr	r2, [r2, #16]
 810528e:	4611      	mov	r1, r2
 8105290:	4798      	blx	r3
}
 8105292:	bf00      	nop
 8105294:	3718      	adds	r7, #24
 8105296:	46bd      	mov	sp, r7
 8105298:	bd80      	pop	{r7, pc}
 810529a:	bf00      	nop
 810529c:	0810806c 	.word	0x0810806c
 81052a0:	081081a0 	.word	0x081081a0
 81052a4:	08108088 	.word	0x08108088

081052a8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 81052a8:	b580      	push	{r7, lr}
 81052aa:	b086      	sub	sp, #24
 81052ac:	af00      	add	r7, sp, #0
 81052ae:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	3b18      	subs	r3, #24
 81052b4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81052b6:	697b      	ldr	r3, [r7, #20]
 81052b8:	689b      	ldr	r3, [r3, #8]
 81052ba:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81052bc:	697b      	ldr	r3, [r7, #20]
 81052be:	68db      	ldr	r3, [r3, #12]
 81052c0:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 81052c2:	693b      	ldr	r3, [r7, #16]
 81052c4:	3318      	adds	r3, #24
 81052c6:	4619      	mov	r1, r3
 81052c8:	68f8      	ldr	r0, [r7, #12]
 81052ca:	f7ff feee 	bl	81050aa <metal_io_virt_to_offset>
 81052ce:	4601      	mov	r1, r0
 81052d0:	2301      	movs	r3, #1
 81052d2:	2205      	movs	r2, #5
 81052d4:	68f8      	ldr	r0, [r7, #12]
 81052d6:	f7ff ff01 	bl	81050dc <metal_io_read>
 81052da:	4602      	mov	r2, r0
 81052dc:	460b      	mov	r3, r1
 81052de:	4613      	mov	r3, r2
 81052e0:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 81052e2:	7afb      	ldrb	r3, [r7, #11]
}
 81052e4:	4618      	mov	r0, r3
 81052e6:	3718      	adds	r7, #24
 81052e8:	46bd      	mov	sp, r7
 81052ea:	bd80      	pop	{r7, pc}

081052ec <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 81052ec:	b580      	push	{r7, lr}
 81052ee:	b086      	sub	sp, #24
 81052f0:	af00      	add	r7, sp, #0
 81052f2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	3b18      	subs	r3, #24
 81052f8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81052fa:	697b      	ldr	r3, [r7, #20]
 81052fc:	689b      	ldr	r3, [r3, #8]
 81052fe:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8105300:	697b      	ldr	r3, [r7, #20]
 8105302:	68db      	ldr	r3, [r3, #12]
 8105304:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8105306:	693b      	ldr	r3, [r7, #16]
 8105308:	330c      	adds	r3, #12
 810530a:	4619      	mov	r1, r3
 810530c:	68f8      	ldr	r0, [r7, #12]
 810530e:	f7ff fecc 	bl	81050aa <metal_io_virt_to_offset>
 8105312:	4601      	mov	r1, r0
 8105314:	2304      	movs	r3, #4
 8105316:	2205      	movs	r2, #5
 8105318:	68f8      	ldr	r0, [r7, #12]
 810531a:	f7ff fedf 	bl	81050dc <metal_io_read>
 810531e:	4602      	mov	r2, r0
 8105320:	460b      	mov	r3, r1
 8105322:	4613      	mov	r3, r2
 8105324:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8105326:	68bb      	ldr	r3, [r7, #8]
}
 8105328:	4618      	mov	r0, r3
 810532a:	3718      	adds	r7, #24
 810532c:	46bd      	mov	sp, r7
 810532e:	bd80      	pop	{r7, pc}

08105330 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8105330:	b480      	push	{r7}
 8105332:	b083      	sub	sp, #12
 8105334:	af00      	add	r7, sp, #0
 8105336:	6078      	str	r0, [r7, #4]
 8105338:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 810533a:	2300      	movs	r3, #0
}
 810533c:	4618      	mov	r0, r3
 810533e:	370c      	adds	r7, #12
 8105340:	46bd      	mov	sp, r7
 8105342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105346:	4770      	bx	lr

08105348 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8105348:	b480      	push	{r7}
 810534a:	b085      	sub	sp, #20
 810534c:	af00      	add	r7, sp, #0
 810534e:	60f8      	str	r0, [r7, #12]
 8105350:	60b9      	str	r1, [r7, #8]
 8105352:	607a      	str	r2, [r7, #4]
 8105354:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8105356:	bf00      	nop
 8105358:	3714      	adds	r7, #20
 810535a:	46bd      	mov	sp, r7
 810535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105360:	4770      	bx	lr
	...

08105364 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8105364:	b580      	push	{r7, lr}
 8105366:	b08e      	sub	sp, #56	; 0x38
 8105368:	af00      	add	r7, sp, #0
 810536a:	60f8      	str	r0, [r7, #12]
 810536c:	60b9      	str	r1, [r7, #8]
 810536e:	607a      	str	r2, [r7, #4]
 8105370:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8105376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105378:	7e5b      	ldrb	r3, [r3, #25]
 810537a:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 810537c:	2050      	movs	r0, #80	; 0x50
 810537e:	f7ff ff2f 	bl	81051e0 <metal_allocate_memory>
 8105382:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8105384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105386:	2b00      	cmp	r3, #0
 8105388:	d101      	bne.n	810538e <rproc_virtio_create_vdev+0x2a>
		return NULL;
 810538a:	2300      	movs	r3, #0
 810538c:	e092      	b.n	81054b4 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 810538e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105390:	4613      	mov	r3, r2
 8105392:	005b      	lsls	r3, r3, #1
 8105394:	4413      	add	r3, r2
 8105396:	00db      	lsls	r3, r3, #3
 8105398:	4618      	mov	r0, r3
 810539a:	f7ff ff21 	bl	81051e0 <metal_allocate_memory>
 810539e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 81053a0:	6a3b      	ldr	r3, [r7, #32]
 81053a2:	2b00      	cmp	r3, #0
 81053a4:	f000 8081 	beq.w	81054aa <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 81053a8:	2250      	movs	r2, #80	; 0x50
 81053aa:	2100      	movs	r1, #0
 81053ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81053ae:	f001 fdb9 	bl	8106f24 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 81053b2:	2218      	movs	r2, #24
 81053b4:	2100      	movs	r1, #0
 81053b6:	6a38      	ldr	r0, [r7, #32]
 81053b8:	f001 fdb4 	bl	8106f24 <memset>
	vdev = &rpvdev->vdev;
 81053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81053be:	3318      	adds	r3, #24
 81053c0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 81053c2:	2300      	movs	r3, #0
 81053c4:	637b      	str	r3, [r7, #52]	; 0x34
 81053c6:	e025      	b.n	8105414 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 81053c8:	2300      	movs	r3, #0
 81053ca:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 81053cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81053ce:	4613      	mov	r3, r2
 81053d0:	009b      	lsls	r3, r3, #2
 81053d2:	4413      	add	r3, r2
 81053d4:	009b      	lsls	r3, r3, #2
 81053d6:	3318      	adds	r3, #24
 81053d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81053da:	4413      	add	r3, r2
 81053dc:	3304      	adds	r3, #4
 81053de:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 81053e0:	68fb      	ldr	r3, [r7, #12]
 81053e2:	2b00      	cmp	r3, #0
 81053e4:	d102      	bne.n	81053ec <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 81053e6:	69bb      	ldr	r3, [r7, #24]
 81053e8:	689b      	ldr	r3, [r3, #8]
 81053ea:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 81053ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81053ee:	f7ff ff0e 	bl	810520e <virtqueue_allocate>
 81053f2:	6178      	str	r0, [r7, #20]
		if (!vq)
 81053f4:	697b      	ldr	r3, [r7, #20]
 81053f6:	2b00      	cmp	r3, #0
 81053f8:	d031      	beq.n	810545e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 81053fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81053fc:	4613      	mov	r3, r2
 81053fe:	005b      	lsls	r3, r3, #1
 8105400:	4413      	add	r3, r2
 8105402:	00db      	lsls	r3, r3, #3
 8105404:	461a      	mov	r2, r3
 8105406:	6a3b      	ldr	r3, [r7, #32]
 8105408:	4413      	add	r3, r2
 810540a:	697a      	ldr	r2, [r7, #20]
 810540c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 810540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105410:	3301      	adds	r3, #1
 8105412:	637b      	str	r3, [r7, #52]	; 0x34
 8105414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105418:	429a      	cmp	r2, r3
 810541a:	d3d5      	bcc.n	81053c8 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 810541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810541e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105420:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8105422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105426:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8105428:	69fb      	ldr	r3, [r7, #28]
 810542a:	6a3a      	ldr	r2, [r7, #32]
 810542c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 810542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105432:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8105434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105436:	683a      	ldr	r2, [r7, #0]
 8105438:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 810543a:	69fb      	ldr	r3, [r7, #28]
 810543c:	68ba      	ldr	r2, [r7, #8]
 810543e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8105440:	69fb      	ldr	r3, [r7, #28]
 8105442:	68fa      	ldr	r2, [r7, #12]
 8105444:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8105446:	69fb      	ldr	r3, [r7, #28]
 8105448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810544a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 810544c:	69fb      	ldr	r3, [r7, #28]
 810544e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105450:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8105452:	69fb      	ldr	r3, [r7, #28]
 8105454:	4a19      	ldr	r2, [pc, #100]	; (81054bc <rproc_virtio_create_vdev+0x158>)
 8105456:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8105458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810545a:	3318      	adds	r3, #24
 810545c:	e02a      	b.n	81054b4 <rproc_virtio_create_vdev+0x150>
			goto err1;
 810545e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8105460:	2300      	movs	r3, #0
 8105462:	637b      	str	r3, [r7, #52]	; 0x34
 8105464:	e019      	b.n	810549a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8105466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105468:	4613      	mov	r3, r2
 810546a:	005b      	lsls	r3, r3, #1
 810546c:	4413      	add	r3, r2
 810546e:	00db      	lsls	r3, r3, #3
 8105470:	461a      	mov	r2, r3
 8105472:	6a3b      	ldr	r3, [r7, #32]
 8105474:	4413      	add	r3, r2
 8105476:	681b      	ldr	r3, [r3, #0]
 8105478:	2b00      	cmp	r3, #0
 810547a:	d00b      	beq.n	8105494 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 810547c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810547e:	4613      	mov	r3, r2
 8105480:	005b      	lsls	r3, r3, #1
 8105482:	4413      	add	r3, r2
 8105484:	00db      	lsls	r3, r3, #3
 8105486:	461a      	mov	r2, r3
 8105488:	6a3b      	ldr	r3, [r7, #32]
 810548a:	4413      	add	r3, r2
 810548c:	681b      	ldr	r3, [r3, #0]
 810548e:	4618      	mov	r0, r3
 8105490:	f7ff feb2 	bl	81051f8 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8105494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105496:	3301      	adds	r3, #1
 8105498:	637b      	str	r3, [r7, #52]	; 0x34
 810549a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810549e:	429a      	cmp	r2, r3
 81054a0:	d3e1      	bcc.n	8105466 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 81054a2:	6a38      	ldr	r0, [r7, #32]
 81054a4:	f7ff fea8 	bl	81051f8 <metal_free_memory>
 81054a8:	e000      	b.n	81054ac <rproc_virtio_create_vdev+0x148>
		goto err0;
 81054aa:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 81054ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81054ae:	f7ff fea3 	bl	81051f8 <metal_free_memory>
	return NULL;
 81054b2:	2300      	movs	r3, #0
}
 81054b4:	4618      	mov	r0, r3
 81054b6:	3738      	adds	r7, #56	; 0x38
 81054b8:	46bd      	mov	sp, r7
 81054ba:	bd80      	pop	{r7, pc}
 81054bc:	0810817c 	.word	0x0810817c

081054c0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 81054c0:	b480      	push	{r7}
 81054c2:	b087      	sub	sp, #28
 81054c4:	af00      	add	r7, sp, #0
 81054c6:	60f8      	str	r0, [r7, #12]
 81054c8:	60b9      	str	r1, [r7, #8]
 81054ca:	607a      	str	r2, [r7, #4]
 81054cc:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 81054ce:	68fb      	ldr	r3, [r7, #12]
 81054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054d2:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 81054d4:	68ba      	ldr	r2, [r7, #8]
 81054d6:	697b      	ldr	r3, [r7, #20]
 81054d8:	429a      	cmp	r2, r3
 81054da:	d302      	bcc.n	81054e2 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 81054dc:	f06f 0301 	mvn.w	r3, #1
 81054e0:	e019      	b.n	8105516 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 81054e2:	68fb      	ldr	r3, [r7, #12]
 81054e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81054e6:	68ba      	ldr	r2, [r7, #8]
 81054e8:	4613      	mov	r3, r2
 81054ea:	005b      	lsls	r3, r3, #1
 81054ec:	4413      	add	r3, r2
 81054ee:	00db      	lsls	r3, r3, #3
 81054f0:	440b      	add	r3, r1
 81054f2:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 81054f4:	693b      	ldr	r3, [r7, #16]
 81054f6:	6a3a      	ldr	r2, [r7, #32]
 81054f8:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 81054fa:	693b      	ldr	r3, [r7, #16]
 81054fc:	687a      	ldr	r2, [r7, #4]
 81054fe:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8105500:	693b      	ldr	r3, [r7, #16]
 8105502:	683a      	ldr	r2, [r7, #0]
 8105504:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8105506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105508:	b29a      	uxth	r2, r3
 810550a:	693b      	ldr	r3, [r7, #16]
 810550c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 810550e:	693b      	ldr	r3, [r7, #16]
 8105510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105512:	609a      	str	r2, [r3, #8]

	return 0;
 8105514:	2300      	movs	r3, #0
}
 8105516:	4618      	mov	r0, r3
 8105518:	371c      	adds	r7, #28
 810551a:	46bd      	mov	sp, r7
 810551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105520:	4770      	bx	lr

08105522 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8105522:	b580      	push	{r7, lr}
 8105524:	b086      	sub	sp, #24
 8105526:	af00      	add	r7, sp, #0
 8105528:	6078      	str	r0, [r7, #4]
 810552a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	2b00      	cmp	r3, #0
 8105530:	d102      	bne.n	8105538 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8105532:	f06f 0315 	mvn.w	r3, #21
 8105536:	e02c      	b.n	8105592 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8105538:	687b      	ldr	r3, [r7, #4]
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	683a      	ldr	r2, [r7, #0]
 810553e:	429a      	cmp	r2, r3
 8105540:	d101      	bne.n	8105546 <rproc_virtio_notified+0x24>
		return 0;
 8105542:	2300      	movs	r3, #0
 8105544:	e025      	b.n	8105592 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810554a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 810554c:	2300      	movs	r3, #0
 810554e:	617b      	str	r3, [r7, #20]
 8105550:	e01a      	b.n	8105588 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105556:	697a      	ldr	r2, [r7, #20]
 8105558:	4613      	mov	r3, r2
 810555a:	005b      	lsls	r3, r3, #1
 810555c:	4413      	add	r3, r2
 810555e:	00db      	lsls	r3, r3, #3
 8105560:	440b      	add	r3, r1
 8105562:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	691b      	ldr	r3, [r3, #16]
 8105568:	683a      	ldr	r2, [r7, #0]
 810556a:	429a      	cmp	r2, r3
 810556c:	d003      	beq.n	8105576 <rproc_virtio_notified+0x54>
 810556e:	683b      	ldr	r3, [r7, #0]
 8105570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105574:	d105      	bne.n	8105582 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8105576:	68fb      	ldr	r3, [r7, #12]
 8105578:	681b      	ldr	r3, [r3, #0]
 810557a:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 810557c:	68b8      	ldr	r0, [r7, #8]
 810557e:	f001 fa19 	bl	81069b4 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8105582:	697b      	ldr	r3, [r7, #20]
 8105584:	3301      	adds	r3, #1
 8105586:	617b      	str	r3, [r7, #20]
 8105588:	697a      	ldr	r2, [r7, #20]
 810558a:	693b      	ldr	r3, [r7, #16]
 810558c:	429a      	cmp	r2, r3
 810558e:	d3e0      	bcc.n	8105552 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8105590:	2300      	movs	r3, #0
}
 8105592:	4618      	mov	r0, r3
 8105594:	3718      	adds	r7, #24
 8105596:	46bd      	mov	sp, r7
 8105598:	bd80      	pop	{r7, pc}

0810559a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 810559a:	b580      	push	{r7, lr}
 810559c:	b084      	sub	sp, #16
 810559e:	af00      	add	r7, sp, #0
 81055a0:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	699b      	ldr	r3, [r3, #24]
 81055a6:	2b00      	cmp	r3, #0
 81055a8:	d00a      	beq.n	81055c0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 81055aa:	6878      	ldr	r0, [r7, #4]
 81055ac:	f7ff fe7c 	bl	81052a8 <rproc_virtio_get_status>
 81055b0:	4603      	mov	r3, r0
 81055b2:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 81055b4:	7bfb      	ldrb	r3, [r7, #15]
 81055b6:	f003 0304 	and.w	r3, r3, #4
 81055ba:	2b00      	cmp	r3, #0
 81055bc:	d102      	bne.n	81055c4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 81055be:	e7f4      	b.n	81055aa <rproc_virtio_wait_remote_ready+0x10>
		return;
 81055c0:	bf00      	nop
 81055c2:	e000      	b.n	81055c6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 81055c4:	bf00      	nop
	}
}
 81055c6:	3710      	adds	r7, #16
 81055c8:	46bd      	mov	sp, r7
 81055ca:	bd80      	pop	{r7, pc}

081055cc <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 81055cc:	b480      	push	{r7}
 81055ce:	b083      	sub	sp, #12
 81055d0:	af00      	add	r7, sp, #0
 81055d2:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 81055d4:	bf00      	nop
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	2201      	movs	r2, #1
 81055da:	4611      	mov	r1, r2
 81055dc:	f3bf 8f5b 	dmb	ish
 81055e0:	e8d3 2f4f 	ldrexb	r2, [r3]
 81055e4:	e8c3 1f40 	strexb	r0, r1, [r3]
 81055e8:	2800      	cmp	r0, #0
 81055ea:	d1f9      	bne.n	81055e0 <__metal_mutex_acquire+0x14>
 81055ec:	f3bf 8f5b 	dmb	ish
 81055f0:	b2d3      	uxtb	r3, r2
 81055f2:	2b00      	cmp	r3, #0
 81055f4:	d1ef      	bne.n	81055d6 <__metal_mutex_acquire+0xa>
		;
	}
}
 81055f6:	bf00      	nop
 81055f8:	bf00      	nop
 81055fa:	370c      	adds	r7, #12
 81055fc:	46bd      	mov	sp, r7
 81055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105602:	4770      	bx	lr

08105604 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8105604:	b480      	push	{r7}
 8105606:	b083      	sub	sp, #12
 8105608:	af00      	add	r7, sp, #0
 810560a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	f3bf 8f5b 	dmb	ish
 8105612:	2200      	movs	r2, #0
 8105614:	701a      	strb	r2, [r3, #0]
 8105616:	f3bf 8f5b 	dmb	ish
}
 810561a:	bf00      	nop
 810561c:	370c      	adds	r7, #12
 810561e:	46bd      	mov	sp, r7
 8105620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105624:	4770      	bx	lr

08105626 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8105626:	b580      	push	{r7, lr}
 8105628:	b082      	sub	sp, #8
 810562a:	af00      	add	r7, sp, #0
 810562c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 810562e:	6878      	ldr	r0, [r7, #4]
 8105630:	f7ff ffcc 	bl	81055cc <__metal_mutex_acquire>
}
 8105634:	bf00      	nop
 8105636:	3708      	adds	r7, #8
 8105638:	46bd      	mov	sp, r7
 810563a:	bd80      	pop	{r7, pc}

0810563c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 810563c:	b580      	push	{r7, lr}
 810563e:	b082      	sub	sp, #8
 8105640:	af00      	add	r7, sp, #0
 8105642:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8105644:	6878      	ldr	r0, [r7, #4]
 8105646:	f7ff ffdd 	bl	8105604 <__metal_mutex_release>
}
 810564a:	bf00      	nop
 810564c:	3708      	adds	r7, #8
 810564e:	46bd      	mov	sp, r7
 8105650:	bd80      	pop	{r7, pc}

08105652 <metal_list_add_before>:
{
 8105652:	b480      	push	{r7}
 8105654:	b083      	sub	sp, #12
 8105656:	af00      	add	r7, sp, #0
 8105658:	6078      	str	r0, [r7, #4]
 810565a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	685a      	ldr	r2, [r3, #4]
 8105660:	683b      	ldr	r3, [r7, #0]
 8105662:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8105664:	683b      	ldr	r3, [r7, #0]
 8105666:	687a      	ldr	r2, [r7, #4]
 8105668:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810566a:	683b      	ldr	r3, [r7, #0]
 810566c:	681b      	ldr	r3, [r3, #0]
 810566e:	683a      	ldr	r2, [r7, #0]
 8105670:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8105672:	683b      	ldr	r3, [r7, #0]
 8105674:	685b      	ldr	r3, [r3, #4]
 8105676:	683a      	ldr	r2, [r7, #0]
 8105678:	601a      	str	r2, [r3, #0]
}
 810567a:	bf00      	nop
 810567c:	370c      	adds	r7, #12
 810567e:	46bd      	mov	sp, r7
 8105680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105684:	4770      	bx	lr

08105686 <metal_list_add_tail>:
{
 8105686:	b580      	push	{r7, lr}
 8105688:	b082      	sub	sp, #8
 810568a:	af00      	add	r7, sp, #0
 810568c:	6078      	str	r0, [r7, #4]
 810568e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8105690:	6839      	ldr	r1, [r7, #0]
 8105692:	6878      	ldr	r0, [r7, #4]
 8105694:	f7ff ffdd 	bl	8105652 <metal_list_add_before>
}
 8105698:	bf00      	nop
 810569a:	3708      	adds	r7, #8
 810569c:	46bd      	mov	sp, r7
 810569e:	bd80      	pop	{r7, pc}

081056a0 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 81056a0:	b480      	push	{r7}
 81056a2:	b083      	sub	sp, #12
 81056a4:	af00      	add	r7, sp, #0
 81056a6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	687a      	ldr	r2, [r7, #4]
 81056ae:	6852      	ldr	r2, [r2, #4]
 81056b0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 81056b2:	687b      	ldr	r3, [r7, #4]
 81056b4:	685b      	ldr	r3, [r3, #4]
 81056b6:	687a      	ldr	r2, [r7, #4]
 81056b8:	6812      	ldr	r2, [r2, #0]
 81056ba:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	687a      	ldr	r2, [r7, #4]
 81056c0:	605a      	str	r2, [r3, #4]
 81056c2:	687b      	ldr	r3, [r7, #4]
 81056c4:	685a      	ldr	r2, [r3, #4]
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	601a      	str	r2, [r3, #0]
}
 81056ca:	bf00      	nop
 81056cc:	370c      	adds	r7, #12
 81056ce:	46bd      	mov	sp, r7
 81056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056d4:	4770      	bx	lr

081056d6 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 81056d6:	b480      	push	{r7}
 81056d8:	b083      	sub	sp, #12
 81056da:	af00      	add	r7, sp, #0
 81056dc:	6078      	str	r0, [r7, #4]
 81056de:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81056e0:	683b      	ldr	r3, [r7, #0]
 81056e2:	095b      	lsrs	r3, r3, #5
 81056e4:	009a      	lsls	r2, r3, #2
 81056e6:	6879      	ldr	r1, [r7, #4]
 81056e8:	440a      	add	r2, r1
 81056ea:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81056ec:	683a      	ldr	r2, [r7, #0]
 81056ee:	f002 021f 	and.w	r2, r2, #31
 81056f2:	2001      	movs	r0, #1
 81056f4:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81056f8:	009b      	lsls	r3, r3, #2
 81056fa:	6878      	ldr	r0, [r7, #4]
 81056fc:	4403      	add	r3, r0
 81056fe:	430a      	orrs	r2, r1
 8105700:	601a      	str	r2, [r3, #0]
}
 8105702:	bf00      	nop
 8105704:	370c      	adds	r7, #12
 8105706:	46bd      	mov	sp, r7
 8105708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810570c:	4770      	bx	lr

0810570e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 810570e:	b480      	push	{r7}
 8105710:	b083      	sub	sp, #12
 8105712:	af00      	add	r7, sp, #0
 8105714:	6078      	str	r0, [r7, #4]
 8105716:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105718:	683b      	ldr	r3, [r7, #0]
 810571a:	095b      	lsrs	r3, r3, #5
 810571c:	009b      	lsls	r3, r3, #2
 810571e:	687a      	ldr	r2, [r7, #4]
 8105720:	4413      	add	r3, r2
 8105722:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105724:	683b      	ldr	r3, [r7, #0]
 8105726:	f003 031f 	and.w	r3, r3, #31
 810572a:	2101      	movs	r1, #1
 810572c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8105730:	4013      	ands	r3, r2
}
 8105732:	4618      	mov	r0, r3
 8105734:	370c      	adds	r7, #12
 8105736:	46bd      	mov	sp, r7
 8105738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810573c:	4770      	bx	lr

0810573e <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 810573e:	b480      	push	{r7}
 8105740:	b083      	sub	sp, #12
 8105742:	af00      	add	r7, sp, #0
 8105744:	6078      	str	r0, [r7, #4]
 8105746:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105748:	683b      	ldr	r3, [r7, #0]
 810574a:	095b      	lsrs	r3, r3, #5
 810574c:	009a      	lsls	r2, r3, #2
 810574e:	6879      	ldr	r1, [r7, #4]
 8105750:	440a      	add	r2, r1
 8105752:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8105754:	683a      	ldr	r2, [r7, #0]
 8105756:	f002 021f 	and.w	r2, r2, #31
 810575a:	2001      	movs	r0, #1
 810575c:	fa00 f202 	lsl.w	r2, r0, r2
 8105760:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8105762:	009b      	lsls	r3, r3, #2
 8105764:	6878      	ldr	r0, [r7, #4]
 8105766:	4403      	add	r3, r0
 8105768:	400a      	ands	r2, r1
 810576a:	601a      	str	r2, [r3, #0]
}
 810576c:	bf00      	nop
 810576e:	370c      	adds	r7, #12
 8105770:	46bd      	mov	sp, r7
 8105772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105776:	4770      	bx	lr

08105778 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8105778:	b580      	push	{r7, lr}
 810577a:	b082      	sub	sp, #8
 810577c:	af00      	add	r7, sp, #0
 810577e:	6078      	str	r0, [r7, #4]
 8105780:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8105782:	6839      	ldr	r1, [r7, #0]
 8105784:	6878      	ldr	r0, [r7, #4]
 8105786:	f7ff ffc2 	bl	810570e <metal_bitmap_is_bit_set>
 810578a:	4603      	mov	r3, r0
 810578c:	2b00      	cmp	r3, #0
 810578e:	bf0c      	ite	eq
 8105790:	2301      	moveq	r3, #1
 8105792:	2300      	movne	r3, #0
 8105794:	b2db      	uxtb	r3, r3
}
 8105796:	4618      	mov	r0, r3
 8105798:	3708      	adds	r7, #8
 810579a:	46bd      	mov	sp, r7
 810579c:	bd80      	pop	{r7, pc}

0810579e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 810579e:	b580      	push	{r7, lr}
 81057a0:	b086      	sub	sp, #24
 81057a2:	af00      	add	r7, sp, #0
 81057a4:	60f8      	str	r0, [r7, #12]
 81057a6:	60b9      	str	r1, [r7, #8]
 81057a8:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 81057aa:	68bb      	ldr	r3, [r7, #8]
 81057ac:	617b      	str	r3, [r7, #20]
 81057ae:	e002      	b.n	81057b6 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 81057b0:	697b      	ldr	r3, [r7, #20]
 81057b2:	3301      	adds	r3, #1
 81057b4:	617b      	str	r3, [r7, #20]
	for (bit = start;
 81057b6:	697a      	ldr	r2, [r7, #20]
 81057b8:	687b      	ldr	r3, [r7, #4]
 81057ba:	429a      	cmp	r2, r3
 81057bc:	d207      	bcs.n	81057ce <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 81057be:	697b      	ldr	r3, [r7, #20]
 81057c0:	4619      	mov	r1, r3
 81057c2:	68f8      	ldr	r0, [r7, #12]
 81057c4:	f7ff ffd8 	bl	8105778 <metal_bitmap_is_bit_clear>
 81057c8:	4603      	mov	r3, r0
 81057ca:	2b00      	cmp	r3, #0
 81057cc:	d0f0      	beq.n	81057b0 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 81057ce:	697b      	ldr	r3, [r7, #20]
}
 81057d0:	4618      	mov	r0, r3
 81057d2:	3718      	adds	r7, #24
 81057d4:	46bd      	mov	sp, r7
 81057d6:	bd80      	pop	{r7, pc}

081057d8 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 81057d8:	b580      	push	{r7, lr}
 81057da:	b084      	sub	sp, #16
 81057dc:	af00      	add	r7, sp, #0
 81057de:	60f8      	str	r0, [r7, #12]
 81057e0:	60b9      	str	r1, [r7, #8]
 81057e2:	607a      	str	r2, [r7, #4]
 81057e4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81057e6:	68fb      	ldr	r3, [r7, #12]
 81057e8:	2220      	movs	r2, #32
 81057ea:	68b9      	ldr	r1, [r7, #8]
 81057ec:	4618      	mov	r0, r3
 81057ee:	f001 ff93 	bl	8107718 <strncpy>
	ept->addr = src;
 81057f2:	68fb      	ldr	r3, [r7, #12]
 81057f4:	687a      	ldr	r2, [r7, #4]
 81057f6:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 81057f8:	68fb      	ldr	r3, [r7, #12]
 81057fa:	683a      	ldr	r2, [r7, #0]
 81057fc:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	69ba      	ldr	r2, [r7, #24]
 8105802:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	69fa      	ldr	r2, [r7, #28]
 8105808:	631a      	str	r2, [r3, #48]	; 0x30
}
 810580a:	bf00      	nop
 810580c:	3710      	adds	r7, #16
 810580e:	46bd      	mov	sp, r7
 8105810:	bd80      	pop	{r7, pc}

08105812 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8105812:	b580      	push	{r7, lr}
 8105814:	b084      	sub	sp, #16
 8105816:	af00      	add	r7, sp, #0
 8105818:	6078      	str	r0, [r7, #4]
 810581a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 810581c:	f04f 33ff 	mov.w	r3, #4294967295
 8105820:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8105822:	683b      	ldr	r3, [r7, #0]
 8105824:	461a      	mov	r2, r3
 8105826:	2100      	movs	r1, #0
 8105828:	6878      	ldr	r0, [r7, #4]
 810582a:	f7ff ffb8 	bl	810579e <metal_bitmap_next_clear_bit>
 810582e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8105830:	683b      	ldr	r3, [r7, #0]
 8105832:	68ba      	ldr	r2, [r7, #8]
 8105834:	429a      	cmp	r2, r3
 8105836:	d206      	bcs.n	8105846 <rpmsg_get_address+0x34>
		addr = nextbit;
 8105838:	68bb      	ldr	r3, [r7, #8]
 810583a:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 810583c:	68bb      	ldr	r3, [r7, #8]
 810583e:	4619      	mov	r1, r3
 8105840:	6878      	ldr	r0, [r7, #4]
 8105842:	f7ff ff48 	bl	81056d6 <metal_bitmap_set_bit>
	}

	return addr;
 8105846:	68fb      	ldr	r3, [r7, #12]
}
 8105848:	4618      	mov	r0, r3
 810584a:	3710      	adds	r7, #16
 810584c:	46bd      	mov	sp, r7
 810584e:	bd80      	pop	{r7, pc}

08105850 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8105850:	b580      	push	{r7, lr}
 8105852:	b084      	sub	sp, #16
 8105854:	af00      	add	r7, sp, #0
 8105856:	60f8      	str	r0, [r7, #12]
 8105858:	60b9      	str	r1, [r7, #8]
 810585a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 810585c:	687a      	ldr	r2, [r7, #4]
 810585e:	68bb      	ldr	r3, [r7, #8]
 8105860:	429a      	cmp	r2, r3
 8105862:	da03      	bge.n	810586c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8105864:	6879      	ldr	r1, [r7, #4]
 8105866:	68f8      	ldr	r0, [r7, #12]
 8105868:	f7ff ff69 	bl	810573e <metal_bitmap_clear_bit>
}
 810586c:	bf00      	nop
 810586e:	3710      	adds	r7, #16
 8105870:	46bd      	mov	sp, r7
 8105872:	bd80      	pop	{r7, pc}

08105874 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8105874:	b580      	push	{r7, lr}
 8105876:	b084      	sub	sp, #16
 8105878:	af00      	add	r7, sp, #0
 810587a:	60f8      	str	r0, [r7, #12]
 810587c:	60b9      	str	r1, [r7, #8]
 810587e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8105880:	687a      	ldr	r2, [r7, #4]
 8105882:	68bb      	ldr	r3, [r7, #8]
 8105884:	429a      	cmp	r2, r3
 8105886:	da05      	bge.n	8105894 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8105888:	6879      	ldr	r1, [r7, #4]
 810588a:	68f8      	ldr	r0, [r7, #12]
 810588c:	f7ff ff3f 	bl	810570e <metal_bitmap_is_bit_set>
 8105890:	4603      	mov	r3, r0
 8105892:	e000      	b.n	8105896 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8105894:	4b02      	ldr	r3, [pc, #8]	; (81058a0 <rpmsg_is_address_set+0x2c>)
}
 8105896:	4618      	mov	r0, r3
 8105898:	3710      	adds	r7, #16
 810589a:	46bd      	mov	sp, r7
 810589c:	bd80      	pop	{r7, pc}
 810589e:	bf00      	nop
 81058a0:	fffff82d 	.word	0xfffff82d

081058a4 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 81058a4:	b580      	push	{r7, lr}
 81058a6:	b084      	sub	sp, #16
 81058a8:	af00      	add	r7, sp, #0
 81058aa:	60f8      	str	r0, [r7, #12]
 81058ac:	60b9      	str	r1, [r7, #8]
 81058ae:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 81058b0:	687a      	ldr	r2, [r7, #4]
 81058b2:	68bb      	ldr	r3, [r7, #8]
 81058b4:	429a      	cmp	r2, r3
 81058b6:	da05      	bge.n	81058c4 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 81058b8:	6879      	ldr	r1, [r7, #4]
 81058ba:	68f8      	ldr	r0, [r7, #12]
 81058bc:	f7ff ff0b 	bl	81056d6 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 81058c0:	2300      	movs	r3, #0
 81058c2:	e000      	b.n	81058c6 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 81058c4:	4b02      	ldr	r3, [pc, #8]	; (81058d0 <rpmsg_set_address+0x2c>)
	}
}
 81058c6:	4618      	mov	r0, r3
 81058c8:	3710      	adds	r7, #16
 81058ca:	46bd      	mov	sp, r7
 81058cc:	bd80      	pop	{r7, pc}
 81058ce:	bf00      	nop
 81058d0:	fffff82d 	.word	0xfffff82d

081058d4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 81058d4:	b590      	push	{r4, r7, lr}
 81058d6:	b089      	sub	sp, #36	; 0x24
 81058d8:	af02      	add	r7, sp, #8
 81058da:	60f8      	str	r0, [r7, #12]
 81058dc:	60b9      	str	r1, [r7, #8]
 81058de:	607a      	str	r2, [r7, #4]
 81058e0:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 81058e2:	68fb      	ldr	r3, [r7, #12]
 81058e4:	2b00      	cmp	r3, #0
 81058e6:	d00a      	beq.n	81058fe <rpmsg_send_offchannel_raw+0x2a>
 81058e8:	68fb      	ldr	r3, [r7, #12]
 81058ea:	6a1b      	ldr	r3, [r3, #32]
 81058ec:	2b00      	cmp	r3, #0
 81058ee:	d006      	beq.n	81058fe <rpmsg_send_offchannel_raw+0x2a>
 81058f0:	683b      	ldr	r3, [r7, #0]
 81058f2:	2b00      	cmp	r3, #0
 81058f4:	d003      	beq.n	81058fe <rpmsg_send_offchannel_raw+0x2a>
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81058fc:	d101      	bne.n	8105902 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 81058fe:	4b0d      	ldr	r3, [pc, #52]	; (8105934 <rpmsg_send_offchannel_raw+0x60>)
 8105900:	e014      	b.n	810592c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8105902:	68fb      	ldr	r3, [r7, #12]
 8105904:	6a1b      	ldr	r3, [r3, #32]
 8105906:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8105908:	697b      	ldr	r3, [r7, #20]
 810590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810590c:	2b00      	cmp	r3, #0
 810590e:	d00c      	beq.n	810592a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8105910:	697b      	ldr	r3, [r7, #20]
 8105912:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8105914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105916:	9301      	str	r3, [sp, #4]
 8105918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810591a:	9300      	str	r3, [sp, #0]
 810591c:	683b      	ldr	r3, [r7, #0]
 810591e:	687a      	ldr	r2, [r7, #4]
 8105920:	68b9      	ldr	r1, [r7, #8]
 8105922:	6978      	ldr	r0, [r7, #20]
 8105924:	47a0      	blx	r4
 8105926:	4603      	mov	r3, r0
 8105928:	e000      	b.n	810592c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 810592a:	4b02      	ldr	r3, [pc, #8]	; (8105934 <rpmsg_send_offchannel_raw+0x60>)
}
 810592c:	4618      	mov	r0, r3
 810592e:	371c      	adds	r7, #28
 8105930:	46bd      	mov	sp, r7
 8105932:	bd90      	pop	{r4, r7, pc}
 8105934:	fffff82d 	.word	0xfffff82d

08105938 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8105938:	b580      	push	{r7, lr}
 810593a:	b090      	sub	sp, #64	; 0x40
 810593c:	af02      	add	r7, sp, #8
 810593e:	6078      	str	r0, [r7, #4]
 8105940:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8105942:	683b      	ldr	r3, [r7, #0]
 8105944:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810594a:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 810594c:	6879      	ldr	r1, [r7, #4]
 810594e:	f107 030c 	add.w	r3, r7, #12
 8105952:	2220      	movs	r2, #32
 8105954:	4618      	mov	r0, r3
 8105956:	f001 fedf 	bl	8107718 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 810595e:	f107 030c 	add.w	r3, r7, #12
 8105962:	2201      	movs	r2, #1
 8105964:	9201      	str	r2, [sp, #4]
 8105966:	2228      	movs	r2, #40	; 0x28
 8105968:	9200      	str	r2, [sp, #0]
 810596a:	2235      	movs	r2, #53	; 0x35
 810596c:	6878      	ldr	r0, [r7, #4]
 810596e:	f7ff ffb1 	bl	81058d4 <rpmsg_send_offchannel_raw>
 8105972:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8105974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105976:	2b00      	cmp	r3, #0
 8105978:	da01      	bge.n	810597e <rpmsg_send_ns_message+0x46>
		return ret;
 810597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810597c:	e000      	b.n	8105980 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 810597e:	2300      	movs	r3, #0
}
 8105980:	4618      	mov	r0, r3
 8105982:	3738      	adds	r7, #56	; 0x38
 8105984:	46bd      	mov	sp, r7
 8105986:	bd80      	pop	{r7, pc}

08105988 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8105988:	b580      	push	{r7, lr}
 810598a:	b088      	sub	sp, #32
 810598c:	af00      	add	r7, sp, #0
 810598e:	60f8      	str	r0, [r7, #12]
 8105990:	60b9      	str	r1, [r7, #8]
 8105992:	607a      	str	r2, [r7, #4]
 8105994:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8105996:	68fb      	ldr	r3, [r7, #12]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	61fb      	str	r3, [r7, #28]
 810599c:	e04b      	b.n	8105a36 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 810599e:	2300      	movs	r3, #0
 81059a0:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 81059a2:	69fb      	ldr	r3, [r7, #28]
 81059a4:	3b34      	subs	r3, #52	; 0x34
 81059a6:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81059ae:	d006      	beq.n	81059be <rpmsg_get_endpoint+0x36>
 81059b0:	697b      	ldr	r3, [r7, #20]
 81059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81059b4:	687a      	ldr	r2, [r7, #4]
 81059b6:	429a      	cmp	r2, r3
 81059b8:	d101      	bne.n	81059be <rpmsg_get_endpoint+0x36>
			return ept;
 81059ba:	697b      	ldr	r3, [r7, #20]
 81059bc:	e040      	b.n	8105a40 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 81059be:	697b      	ldr	r3, [r7, #20]
 81059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81059c2:	687a      	ldr	r2, [r7, #4]
 81059c4:	429a      	cmp	r2, r3
 81059c6:	d106      	bne.n	81059d6 <rpmsg_get_endpoint+0x4e>
 81059c8:	697b      	ldr	r3, [r7, #20]
 81059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059cc:	683a      	ldr	r2, [r7, #0]
 81059ce:	429a      	cmp	r2, r3
 81059d0:	d101      	bne.n	81059d6 <rpmsg_get_endpoint+0x4e>
			return ept;
 81059d2:	697b      	ldr	r3, [r7, #20]
 81059d4:	e034      	b.n	8105a40 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 81059d6:	68bb      	ldr	r3, [r7, #8]
 81059d8:	2b00      	cmp	r3, #0
 81059da:	d00c      	beq.n	81059f6 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 81059dc:	697b      	ldr	r3, [r7, #20]
 81059de:	2220      	movs	r2, #32
 81059e0:	68b9      	ldr	r1, [r7, #8]
 81059e2:	4618      	mov	r0, r3
 81059e4:	f001 fe84 	bl	81076f0 <strncmp>
 81059e8:	4603      	mov	r3, r0
 81059ea:	2b00      	cmp	r3, #0
 81059ec:	bf0c      	ite	eq
 81059ee:	2301      	moveq	r3, #1
 81059f0:	2300      	movne	r3, #0
 81059f2:	b2db      	uxtb	r3, r3
 81059f4:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 81059f6:	68bb      	ldr	r3, [r7, #8]
 81059f8:	2b00      	cmp	r3, #0
 81059fa:	d018      	beq.n	8105a2e <rpmsg_get_endpoint+0xa6>
 81059fc:	69bb      	ldr	r3, [r7, #24]
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	d015      	beq.n	8105a2e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8105a02:	683b      	ldr	r3, [r7, #0]
 8105a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a08:	d006      	beq.n	8105a18 <rpmsg_get_endpoint+0x90>
 8105a0a:	697b      	ldr	r3, [r7, #20]
 8105a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a0e:	683a      	ldr	r2, [r7, #0]
 8105a10:	429a      	cmp	r2, r3
 8105a12:	d101      	bne.n	8105a18 <rpmsg_get_endpoint+0x90>
			return ept;
 8105a14:	697b      	ldr	r3, [r7, #20]
 8105a16:	e013      	b.n	8105a40 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a1e:	d107      	bne.n	8105a30 <rpmsg_get_endpoint+0xa8>
 8105a20:	697b      	ldr	r3, [r7, #20]
 8105a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a28:	d102      	bne.n	8105a30 <rpmsg_get_endpoint+0xa8>
			return ept;
 8105a2a:	697b      	ldr	r3, [r7, #20]
 8105a2c:	e008      	b.n	8105a40 <rpmsg_get_endpoint+0xb8>
			continue;
 8105a2e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8105a30:	69fb      	ldr	r3, [r7, #28]
 8105a32:	681b      	ldr	r3, [r3, #0]
 8105a34:	61fb      	str	r3, [r7, #28]
 8105a36:	68fb      	ldr	r3, [r7, #12]
 8105a38:	69fa      	ldr	r2, [r7, #28]
 8105a3a:	429a      	cmp	r2, r3
 8105a3c:	d1af      	bne.n	810599e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8105a3e:	2300      	movs	r3, #0
}
 8105a40:	4618      	mov	r0, r3
 8105a42:	3720      	adds	r7, #32
 8105a44:	46bd      	mov	sp, r7
 8105a46:	bd80      	pop	{r7, pc}

08105a48 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8105a48:	b580      	push	{r7, lr}
 8105a4a:	b084      	sub	sp, #16
 8105a4c:	af00      	add	r7, sp, #0
 8105a4e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	2b00      	cmp	r3, #0
 8105a54:	d016      	beq.n	8105a84 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	6a1b      	ldr	r3, [r3, #32]
 8105a5a:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a64:	d008      	beq.n	8105a78 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105a66:	68fb      	ldr	r3, [r7, #12]
 8105a68:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105a70:	461a      	mov	r2, r3
 8105a72:	2180      	movs	r1, #128	; 0x80
 8105a74:	f7ff feec 	bl	8105850 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	3334      	adds	r3, #52	; 0x34
 8105a7c:	4618      	mov	r0, r3
 8105a7e:	f7ff fe0f 	bl	81056a0 <metal_list_del>
 8105a82:	e000      	b.n	8105a86 <rpmsg_unregister_endpoint+0x3e>
		return;
 8105a84:	bf00      	nop
}
 8105a86:	3710      	adds	r7, #16
 8105a88:	46bd      	mov	sp, r7
 8105a8a:	bd80      	pop	{r7, pc}

08105a8c <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8105a8c:	b580      	push	{r7, lr}
 8105a8e:	b082      	sub	sp, #8
 8105a90:	af00      	add	r7, sp, #0
 8105a92:	6078      	str	r0, [r7, #4]
 8105a94:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8105a96:	683b      	ldr	r3, [r7, #0]
 8105a98:	687a      	ldr	r2, [r7, #4]
 8105a9a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8105a9c:	687a      	ldr	r2, [r7, #4]
 8105a9e:	683b      	ldr	r3, [r7, #0]
 8105aa0:	3334      	adds	r3, #52	; 0x34
 8105aa2:	4619      	mov	r1, r3
 8105aa4:	4610      	mov	r0, r2
 8105aa6:	f7ff fdee 	bl	8105686 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8105aaa:	2300      	movs	r3, #0
}
 8105aac:	4618      	mov	r0, r3
 8105aae:	3708      	adds	r7, #8
 8105ab0:	46bd      	mov	sp, r7
 8105ab2:	bd80      	pop	{r7, pc}

08105ab4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8105ab4:	b580      	push	{r7, lr}
 8105ab6:	b088      	sub	sp, #32
 8105ab8:	af02      	add	r7, sp, #8
 8105aba:	60f8      	str	r0, [r7, #12]
 8105abc:	60b9      	str	r1, [r7, #8]
 8105abe:	607a      	str	r2, [r7, #4]
 8105ac0:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8105ac2:	683b      	ldr	r3, [r7, #0]
 8105ac4:	613b      	str	r3, [r7, #16]

	if (!ept)
 8105ac6:	68fb      	ldr	r3, [r7, #12]
 8105ac8:	2b00      	cmp	r3, #0
 8105aca:	d101      	bne.n	8105ad0 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8105acc:	4b37      	ldr	r3, [pc, #220]	; (8105bac <rpmsg_create_ept+0xf8>)
 8105ace:	e068      	b.n	8105ba2 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8105ad0:	68bb      	ldr	r3, [r7, #8]
 8105ad2:	3358      	adds	r3, #88	; 0x58
 8105ad4:	4618      	mov	r0, r3
 8105ad6:	f7ff fda6 	bl	8105626 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8105ada:	683b      	ldr	r3, [r7, #0]
 8105adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ae0:	d018      	beq.n	8105b14 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8105ae2:	68bb      	ldr	r3, [r7, #8]
 8105ae4:	3348      	adds	r3, #72	; 0x48
 8105ae6:	683a      	ldr	r2, [r7, #0]
 8105ae8:	2180      	movs	r1, #128	; 0x80
 8105aea:	4618      	mov	r0, r3
 8105aec:	f7ff fec2 	bl	8105874 <rpmsg_is_address_set>
 8105af0:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8105af2:	697b      	ldr	r3, [r7, #20]
 8105af4:	2b00      	cmp	r3, #0
 8105af6:	d107      	bne.n	8105b08 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8105af8:	68bb      	ldr	r3, [r7, #8]
 8105afa:	3348      	adds	r3, #72	; 0x48
 8105afc:	683a      	ldr	r2, [r7, #0]
 8105afe:	2180      	movs	r1, #128	; 0x80
 8105b00:	4618      	mov	r0, r3
 8105b02:	f7ff fecf 	bl	81058a4 <rpmsg_set_address>
 8105b06:	e00c      	b.n	8105b22 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8105b08:	697b      	ldr	r3, [r7, #20]
 8105b0a:	2b00      	cmp	r3, #0
 8105b0c:	dd40      	ble.n	8105b90 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8105b0e:	2300      	movs	r3, #0
 8105b10:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8105b12:	e040      	b.n	8105b96 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8105b14:	68bb      	ldr	r3, [r7, #8]
 8105b16:	3348      	adds	r3, #72	; 0x48
 8105b18:	2180      	movs	r1, #128	; 0x80
 8105b1a:	4618      	mov	r0, r3
 8105b1c:	f7ff fe79 	bl	8105812 <rpmsg_get_address>
 8105b20:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8105b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b24:	9301      	str	r3, [sp, #4]
 8105b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b28:	9300      	str	r3, [sp, #0]
 8105b2a:	6a3b      	ldr	r3, [r7, #32]
 8105b2c:	693a      	ldr	r2, [r7, #16]
 8105b2e:	6879      	ldr	r1, [r7, #4]
 8105b30:	68f8      	ldr	r0, [r7, #12]
 8105b32:	f7ff fe51 	bl	81057d8 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8105b36:	68f9      	ldr	r1, [r7, #12]
 8105b38:	68b8      	ldr	r0, [r7, #8]
 8105b3a:	f7ff ffa7 	bl	8105a8c <rpmsg_register_endpoint>
 8105b3e:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8105b40:	697b      	ldr	r3, [r7, #20]
 8105b42:	2b00      	cmp	r3, #0
 8105b44:	da06      	bge.n	8105b54 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8105b46:	68bb      	ldr	r3, [r7, #8]
 8105b48:	3348      	adds	r3, #72	; 0x48
 8105b4a:	693a      	ldr	r2, [r7, #16]
 8105b4c:	2180      	movs	r1, #128	; 0x80
 8105b4e:	4618      	mov	r0, r3
 8105b50:	f7ff fe7e 	bl	8105850 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8105b54:	697b      	ldr	r3, [r7, #20]
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	d11c      	bne.n	8105b94 <rpmsg_create_ept+0xe0>
 8105b5a:	68fb      	ldr	r3, [r7, #12]
 8105b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b62:	d117      	bne.n	8105b94 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8105b64:	68bb      	ldr	r3, [r7, #8]
 8105b66:	3358      	adds	r3, #88	; 0x58
 8105b68:	4618      	mov	r0, r3
 8105b6a:	f7ff fd67 	bl	810563c <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8105b6e:	2100      	movs	r1, #0
 8105b70:	68f8      	ldr	r0, [r7, #12]
 8105b72:	f7ff fee1 	bl	8105938 <rpmsg_send_ns_message>
 8105b76:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8105b78:	68bb      	ldr	r3, [r7, #8]
 8105b7a:	3358      	adds	r3, #88	; 0x58
 8105b7c:	4618      	mov	r0, r3
 8105b7e:	f7ff fd52 	bl	8105626 <metal_mutex_acquire>
		if (status)
 8105b82:	697b      	ldr	r3, [r7, #20]
 8105b84:	2b00      	cmp	r3, #0
 8105b86:	d005      	beq.n	8105b94 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8105b88:	68f8      	ldr	r0, [r7, #12]
 8105b8a:	f7ff ff5d 	bl	8105a48 <rpmsg_unregister_endpoint>
 8105b8e:	e002      	b.n	8105b96 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8105b90:	bf00      	nop
 8105b92:	e000      	b.n	8105b96 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8105b94:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8105b96:	68bb      	ldr	r3, [r7, #8]
 8105b98:	3358      	adds	r3, #88	; 0x58
 8105b9a:	4618      	mov	r0, r3
 8105b9c:	f7ff fd4e 	bl	810563c <metal_mutex_release>
	return status;
 8105ba0:	697b      	ldr	r3, [r7, #20]
}
 8105ba2:	4618      	mov	r0, r3
 8105ba4:	3718      	adds	r7, #24
 8105ba6:	46bd      	mov	sp, r7
 8105ba8:	bd80      	pop	{r7, pc}
 8105baa:	bf00      	nop
 8105bac:	fffff82d 	.word	0xfffff82d

08105bb0 <__metal_cache_invalidate>:
{
 8105bb0:	b580      	push	{r7, lr}
 8105bb2:	b082      	sub	sp, #8
 8105bb4:	af00      	add	r7, sp, #0
 8105bb6:	6078      	str	r0, [r7, #4]
 8105bb8:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8105bba:	6839      	ldr	r1, [r7, #0]
 8105bbc:	6878      	ldr	r0, [r7, #4]
 8105bbe:	f000 fc56 	bl	810646e <metal_machine_cache_invalidate>
}
 8105bc2:	bf00      	nop
 8105bc4:	3708      	adds	r7, #8
 8105bc6:	46bd      	mov	sp, r7
 8105bc8:	bd80      	pop	{r7, pc}

08105bca <metal_cache_invalidate>:
{
 8105bca:	b580      	push	{r7, lr}
 8105bcc:	b082      	sub	sp, #8
 8105bce:	af00      	add	r7, sp, #0
 8105bd0:	6078      	str	r0, [r7, #4]
 8105bd2:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8105bd4:	6839      	ldr	r1, [r7, #0]
 8105bd6:	6878      	ldr	r0, [r7, #4]
 8105bd8:	f7ff ffea 	bl	8105bb0 <__metal_cache_invalidate>
}
 8105bdc:	bf00      	nop
 8105bde:	3708      	adds	r7, #8
 8105be0:	46bd      	mov	sp, r7
 8105be2:	bd80      	pop	{r7, pc}

08105be4 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8105be4:	b480      	push	{r7}
 8105be6:	b083      	sub	sp, #12
 8105be8:	af00      	add	r7, sp, #0
 8105bea:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8105bec:	2300      	movs	r3, #0
}
 8105bee:	4618      	mov	r0, r3
 8105bf0:	370c      	adds	r7, #12
 8105bf2:	46bd      	mov	sp, r7
 8105bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf8:	4770      	bx	lr

08105bfa <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8105bfa:	b580      	push	{r7, lr}
 8105bfc:	b082      	sub	sp, #8
 8105bfe:	af00      	add	r7, sp, #0
 8105c00:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8105c02:	6878      	ldr	r0, [r7, #4]
 8105c04:	f7ff ffee 	bl	8105be4 <__metal_sleep_usec>
 8105c08:	4603      	mov	r3, r0
}
 8105c0a:	4618      	mov	r0, r3
 8105c0c:	3708      	adds	r7, #8
 8105c0e:	46bd      	mov	sp, r7
 8105c10:	bd80      	pop	{r7, pc}

08105c12 <metal_list_init>:
{
 8105c12:	b480      	push	{r7}
 8105c14:	b083      	sub	sp, #12
 8105c16:	af00      	add	r7, sp, #0
 8105c18:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8105c1a:	687b      	ldr	r3, [r7, #4]
 8105c1c:	687a      	ldr	r2, [r7, #4]
 8105c1e:	605a      	str	r2, [r3, #4]
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	685a      	ldr	r2, [r3, #4]
 8105c24:	687b      	ldr	r3, [r7, #4]
 8105c26:	601a      	str	r2, [r3, #0]
}
 8105c28:	bf00      	nop
 8105c2a:	370c      	adds	r7, #12
 8105c2c:	46bd      	mov	sp, r7
 8105c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c32:	4770      	bx	lr

08105c34 <metal_io_virt_to_offset>:
{
 8105c34:	b480      	push	{r7}
 8105c36:	b085      	sub	sp, #20
 8105c38:	af00      	add	r7, sp, #0
 8105c3a:	6078      	str	r0, [r7, #4]
 8105c3c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8105c3e:	687b      	ldr	r3, [r7, #4]
 8105c40:	681b      	ldr	r3, [r3, #0]
 8105c42:	683a      	ldr	r2, [r7, #0]
 8105c44:	1ad3      	subs	r3, r2, r3
 8105c46:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8105c48:	687b      	ldr	r3, [r7, #4]
 8105c4a:	689b      	ldr	r3, [r3, #8]
 8105c4c:	68fa      	ldr	r2, [r7, #12]
 8105c4e:	429a      	cmp	r2, r3
 8105c50:	d201      	bcs.n	8105c56 <metal_io_virt_to_offset+0x22>
 8105c52:	68fb      	ldr	r3, [r7, #12]
 8105c54:	e001      	b.n	8105c5a <metal_io_virt_to_offset+0x26>
 8105c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105c5a:	4618      	mov	r0, r3
 8105c5c:	3714      	adds	r7, #20
 8105c5e:	46bd      	mov	sp, r7
 8105c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c64:	4770      	bx	lr

08105c66 <__metal_mutex_init>:
{
 8105c66:	b480      	push	{r7}
 8105c68:	b085      	sub	sp, #20
 8105c6a:	af00      	add	r7, sp, #0
 8105c6c:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	60fb      	str	r3, [r7, #12]
 8105c72:	2300      	movs	r3, #0
 8105c74:	60bb      	str	r3, [r7, #8]
 8105c76:	68bb      	ldr	r3, [r7, #8]
 8105c78:	461a      	mov	r2, r3
 8105c7a:	68fb      	ldr	r3, [r7, #12]
 8105c7c:	f3bf 8f5b 	dmb	ish
 8105c80:	601a      	str	r2, [r3, #0]
 8105c82:	f3bf 8f5b 	dmb	ish
}
 8105c86:	bf00      	nop
 8105c88:	3714      	adds	r7, #20
 8105c8a:	46bd      	mov	sp, r7
 8105c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c90:	4770      	bx	lr

08105c92 <__metal_mutex_acquire>:
{
 8105c92:	b480      	push	{r7}
 8105c94:	b083      	sub	sp, #12
 8105c96:	af00      	add	r7, sp, #0
 8105c98:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8105c9a:	bf00      	nop
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	2201      	movs	r2, #1
 8105ca0:	4611      	mov	r1, r2
 8105ca2:	f3bf 8f5b 	dmb	ish
 8105ca6:	e8d3 2f4f 	ldrexb	r2, [r3]
 8105caa:	e8c3 1f40 	strexb	r0, r1, [r3]
 8105cae:	2800      	cmp	r0, #0
 8105cb0:	d1f9      	bne.n	8105ca6 <__metal_mutex_acquire+0x14>
 8105cb2:	f3bf 8f5b 	dmb	ish
 8105cb6:	b2d3      	uxtb	r3, r2
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d1ef      	bne.n	8105c9c <__metal_mutex_acquire+0xa>
}
 8105cbc:	bf00      	nop
 8105cbe:	bf00      	nop
 8105cc0:	370c      	adds	r7, #12
 8105cc2:	46bd      	mov	sp, r7
 8105cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cc8:	4770      	bx	lr

08105cca <__metal_mutex_release>:
{
 8105cca:	b480      	push	{r7}
 8105ccc:	b083      	sub	sp, #12
 8105cce:	af00      	add	r7, sp, #0
 8105cd0:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	f3bf 8f5b 	dmb	ish
 8105cd8:	2200      	movs	r2, #0
 8105cda:	701a      	strb	r2, [r3, #0]
 8105cdc:	f3bf 8f5b 	dmb	ish
}
 8105ce0:	bf00      	nop
 8105ce2:	370c      	adds	r7, #12
 8105ce4:	46bd      	mov	sp, r7
 8105ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cea:	4770      	bx	lr

08105cec <metal_mutex_init>:
{
 8105cec:	b580      	push	{r7, lr}
 8105cee:	b082      	sub	sp, #8
 8105cf0:	af00      	add	r7, sp, #0
 8105cf2:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8105cf4:	6878      	ldr	r0, [r7, #4]
 8105cf6:	f7ff ffb6 	bl	8105c66 <__metal_mutex_init>
}
 8105cfa:	bf00      	nop
 8105cfc:	3708      	adds	r7, #8
 8105cfe:	46bd      	mov	sp, r7
 8105d00:	bd80      	pop	{r7, pc}

08105d02 <metal_mutex_acquire>:
{
 8105d02:	b580      	push	{r7, lr}
 8105d04:	b082      	sub	sp, #8
 8105d06:	af00      	add	r7, sp, #0
 8105d08:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8105d0a:	6878      	ldr	r0, [r7, #4]
 8105d0c:	f7ff ffc1 	bl	8105c92 <__metal_mutex_acquire>
}
 8105d10:	bf00      	nop
 8105d12:	3708      	adds	r7, #8
 8105d14:	46bd      	mov	sp, r7
 8105d16:	bd80      	pop	{r7, pc}

08105d18 <metal_mutex_release>:
{
 8105d18:	b580      	push	{r7, lr}
 8105d1a:	b082      	sub	sp, #8
 8105d1c:	af00      	add	r7, sp, #0
 8105d1e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8105d20:	6878      	ldr	r0, [r7, #4]
 8105d22:	f7ff ffd2 	bl	8105cca <__metal_mutex_release>
}
 8105d26:	bf00      	nop
 8105d28:	3708      	adds	r7, #8
 8105d2a:	46bd      	mov	sp, r7
 8105d2c:	bd80      	pop	{r7, pc}

08105d2e <rpmsg_init_ept>:
{
 8105d2e:	b580      	push	{r7, lr}
 8105d30:	b084      	sub	sp, #16
 8105d32:	af00      	add	r7, sp, #0
 8105d34:	60f8      	str	r0, [r7, #12]
 8105d36:	60b9      	str	r1, [r7, #8]
 8105d38:	607a      	str	r2, [r7, #4]
 8105d3a:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8105d3c:	68fb      	ldr	r3, [r7, #12]
 8105d3e:	2220      	movs	r2, #32
 8105d40:	68b9      	ldr	r1, [r7, #8]
 8105d42:	4618      	mov	r0, r3
 8105d44:	f001 fce8 	bl	8107718 <strncpy>
	ept->addr = src;
 8105d48:	68fb      	ldr	r3, [r7, #12]
 8105d4a:	687a      	ldr	r2, [r7, #4]
 8105d4c:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8105d4e:	68fb      	ldr	r3, [r7, #12]
 8105d50:	683a      	ldr	r2, [r7, #0]
 8105d52:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	69ba      	ldr	r2, [r7, #24]
 8105d58:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	69fa      	ldr	r2, [r7, #28]
 8105d5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8105d60:	bf00      	nop
 8105d62:	3710      	adds	r7, #16
 8105d64:	46bd      	mov	sp, r7
 8105d66:	bd80      	pop	{r7, pc}

08105d68 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8105d68:	b480      	push	{r7}
 8105d6a:	b083      	sub	sp, #12
 8105d6c:	af00      	add	r7, sp, #0
 8105d6e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d74:	699b      	ldr	r3, [r3, #24]
}
 8105d76:	4618      	mov	r0, r3
 8105d78:	370c      	adds	r7, #12
 8105d7a:	46bd      	mov	sp, r7
 8105d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d80:	4770      	bx	lr

08105d82 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8105d82:	b580      	push	{r7, lr}
 8105d84:	b082      	sub	sp, #8
 8105d86:	af00      	add	r7, sp, #0
 8105d88:	6078      	str	r0, [r7, #4]
 8105d8a:	460b      	mov	r3, r1
 8105d8c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d92:	6a1b      	ldr	r3, [r3, #32]
 8105d94:	685b      	ldr	r3, [r3, #4]
 8105d96:	687a      	ldr	r2, [r7, #4]
 8105d98:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8105d9a:	78f9      	ldrb	r1, [r7, #3]
 8105d9c:	4610      	mov	r0, r2
 8105d9e:	4798      	blx	r3
}
 8105da0:	bf00      	nop
 8105da2:	3708      	adds	r7, #8
 8105da4:	46bd      	mov	sp, r7
 8105da6:	bd80      	pop	{r7, pc}

08105da8 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8105da8:	b580      	push	{r7, lr}
 8105daa:	b082      	sub	sp, #8
 8105dac:	af00      	add	r7, sp, #0
 8105dae:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105db4:	6a1b      	ldr	r3, [r3, #32]
 8105db6:	681b      	ldr	r3, [r3, #0]
 8105db8:	687a      	ldr	r2, [r7, #4]
 8105dba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8105dbc:	4610      	mov	r0, r2
 8105dbe:	4798      	blx	r3
 8105dc0:	4603      	mov	r3, r0
}
 8105dc2:	4618      	mov	r0, r3
 8105dc4:	3708      	adds	r7, #8
 8105dc6:	46bd      	mov	sp, r7
 8105dc8:	bd80      	pop	{r7, pc}

08105dca <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8105dca:	b580      	push	{r7, lr}
 8105dcc:	b082      	sub	sp, #8
 8105dce:	af00      	add	r7, sp, #0
 8105dd0:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105dd6:	6a1b      	ldr	r3, [r3, #32]
 8105dd8:	689b      	ldr	r3, [r3, #8]
 8105dda:	687a      	ldr	r2, [r7, #4]
 8105ddc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8105dde:	4610      	mov	r0, r2
 8105de0:	4798      	blx	r3
 8105de2:	4603      	mov	r3, r0
}
 8105de4:	4618      	mov	r0, r3
 8105de6:	3708      	adds	r7, #8
 8105de8:	46bd      	mov	sp, r7
 8105dea:	bd80      	pop	{r7, pc}

08105dec <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8105dec:	b580      	push	{r7, lr}
 8105dee:	b086      	sub	sp, #24
 8105df0:	af02      	add	r7, sp, #8
 8105df2:	60f8      	str	r0, [r7, #12]
 8105df4:	60b9      	str	r1, [r7, #8]
 8105df6:	607a      	str	r2, [r7, #4]
 8105df8:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8105dfa:	68fb      	ldr	r3, [r7, #12]
 8105dfc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8105dfe:	68b9      	ldr	r1, [r7, #8]
 8105e00:	69bb      	ldr	r3, [r7, #24]
 8105e02:	9300      	str	r3, [sp, #0]
 8105e04:	683b      	ldr	r3, [r7, #0]
 8105e06:	687a      	ldr	r2, [r7, #4]
 8105e08:	f000 fb4a 	bl	81064a0 <virtio_create_virtqueues>
 8105e0c:	4603      	mov	r3, r0
					callbacks);
}
 8105e0e:	4618      	mov	r0, r3
 8105e10:	3710      	adds	r7, #16
 8105e12:	46bd      	mov	sp, r7
 8105e14:	bd80      	pop	{r7, pc}

08105e16 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8105e16:	b580      	push	{r7, lr}
 8105e18:	b082      	sub	sp, #8
 8105e1a:	af00      	add	r7, sp, #0
 8105e1c:	6078      	str	r0, [r7, #4]
 8105e1e:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8105e20:	f04f 33ff 	mov.w	r3, #4294967295
 8105e24:	683a      	ldr	r2, [r7, #0]
 8105e26:	2100      	movs	r1, #0
 8105e28:	6878      	ldr	r0, [r7, #4]
 8105e2a:	f7ff fdad 	bl	8105988 <rpmsg_get_endpoint>
 8105e2e:	4603      	mov	r3, r0
}
 8105e30:	4618      	mov	r0, r3
 8105e32:	3708      	adds	r7, #8
 8105e34:	46bd      	mov	sp, r7
 8105e36:	bd80      	pop	{r7, pc}

08105e38 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8105e38:	b480      	push	{r7}
 8105e3a:	b085      	sub	sp, #20
 8105e3c:	af00      	add	r7, sp, #0
 8105e3e:	60f8      	str	r0, [r7, #12]
 8105e40:	60b9      	str	r1, [r7, #8]
 8105e42:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8105e44:	68fb      	ldr	r3, [r7, #12]
 8105e46:	2b00      	cmp	r3, #0
 8105e48:	d01d      	beq.n	8105e86 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8105e4a:	68fb      	ldr	r3, [r7, #12]
 8105e4c:	68ba      	ldr	r2, [r7, #8]
 8105e4e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	f003 0303 	and.w	r3, r3, #3
 8105e56:	2b00      	cmp	r3, #0
 8105e58:	d004      	beq.n	8105e64 <rpmsg_virtio_init_shm_pool+0x2c>
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	f023 0303 	bic.w	r3, r3, #3
 8105e60:	3304      	adds	r3, #4
 8105e62:	e000      	b.n	8105e66 <rpmsg_virtio_init_shm_pool+0x2e>
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	68fa      	ldr	r2, [r7, #12]
 8105e68:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8105e6a:	687b      	ldr	r3, [r7, #4]
 8105e6c:	f003 0303 	and.w	r3, r3, #3
 8105e70:	2b00      	cmp	r3, #0
 8105e72:	d004      	beq.n	8105e7e <rpmsg_virtio_init_shm_pool+0x46>
 8105e74:	687b      	ldr	r3, [r7, #4]
 8105e76:	f023 0303 	bic.w	r3, r3, #3
 8105e7a:	3304      	adds	r3, #4
 8105e7c:	e000      	b.n	8105e80 <rpmsg_virtio_init_shm_pool+0x48>
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	68fa      	ldr	r2, [r7, #12]
 8105e82:	6053      	str	r3, [r2, #4]
 8105e84:	e000      	b.n	8105e88 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8105e86:	bf00      	nop
}
 8105e88:	3714      	adds	r7, #20
 8105e8a:	46bd      	mov	sp, r7
 8105e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e90:	4770      	bx	lr

08105e92 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8105e92:	b580      	push	{r7, lr}
 8105e94:	b086      	sub	sp, #24
 8105e96:	af00      	add	r7, sp, #0
 8105e98:	60f8      	str	r0, [r7, #12]
 8105e9a:	60b9      	str	r1, [r7, #8]
 8105e9c:	607a      	str	r2, [r7, #4]
 8105e9e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105ea0:	68f8      	ldr	r0, [r7, #12]
 8105ea2:	f7ff ff61 	bl	8105d68 <rpmsg_virtio_get_role>
 8105ea6:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105ea8:	697b      	ldr	r3, [r7, #20]
 8105eaa:	2b01      	cmp	r3, #1
 8105eac:	d106      	bne.n	8105ebc <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8105eae:	68fb      	ldr	r3, [r7, #12]
 8105eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105eb2:	8879      	ldrh	r1, [r7, #2]
 8105eb4:	687a      	ldr	r2, [r7, #4]
 8105eb6:	4618      	mov	r0, r3
 8105eb8:	f000 fc9c 	bl	81067f4 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8105ebc:	bf00      	nop
 8105ebe:	3718      	adds	r7, #24
 8105ec0:	46bd      	mov	sp, r7
 8105ec2:	bd80      	pop	{r7, pc}

08105ec4 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8105ec4:	b580      	push	{r7, lr}
 8105ec6:	b086      	sub	sp, #24
 8105ec8:	af00      	add	r7, sp, #0
 8105eca:	60f8      	str	r0, [r7, #12]
 8105ecc:	60b9      	str	r1, [r7, #8]
 8105ece:	607a      	str	r2, [r7, #4]
 8105ed0:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105ed2:	68f8      	ldr	r0, [r7, #12]
 8105ed4:	f7ff ff48 	bl	8105d68 <rpmsg_virtio_get_role>
 8105ed8:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105eda:	697b      	ldr	r3, [r7, #20]
 8105edc:	2b01      	cmp	r3, #1
 8105ede:	d108      	bne.n	8105ef2 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8105ee0:	68fb      	ldr	r3, [r7, #12]
 8105ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105ee4:	8879      	ldrh	r1, [r7, #2]
 8105ee6:	687a      	ldr	r2, [r7, #4]
 8105ee8:	4618      	mov	r0, r3
 8105eea:	f000 fc83 	bl	81067f4 <virtqueue_add_consumed_buffer>
 8105eee:	4603      	mov	r3, r0
 8105ef0:	e000      	b.n	8105ef4 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8105ef2:	2300      	movs	r3, #0
}
 8105ef4:	4618      	mov	r0, r3
 8105ef6:	3718      	adds	r7, #24
 8105ef8:	46bd      	mov	sp, r7
 8105efa:	bd80      	pop	{r7, pc}

08105efc <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8105efc:	b580      	push	{r7, lr}
 8105efe:	b086      	sub	sp, #24
 8105f00:	af00      	add	r7, sp, #0
 8105f02:	60f8      	str	r0, [r7, #12]
 8105f04:	60b9      	str	r1, [r7, #8]
 8105f06:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105f08:	68f8      	ldr	r0, [r7, #12]
 8105f0a:	f7ff ff2d 	bl	8105d68 <rpmsg_virtio_get_role>
 8105f0e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8105f10:	2300      	movs	r3, #0
 8105f12:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105f14:	693b      	ldr	r3, [r7, #16]
 8105f16:	2b01      	cmp	r3, #1
 8105f18:	d107      	bne.n	8105f2a <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 8105f1a:	68fb      	ldr	r3, [r7, #12]
 8105f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f1e:	68ba      	ldr	r2, [r7, #8]
 8105f20:	6879      	ldr	r1, [r7, #4]
 8105f22:	4618      	mov	r0, r3
 8105f24:	f000 fc20 	bl	8106768 <virtqueue_get_available_buffer>
 8105f28:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8105f2a:	697b      	ldr	r3, [r7, #20]
}
 8105f2c:	4618      	mov	r0, r3
 8105f2e:	3718      	adds	r7, #24
 8105f30:	46bd      	mov	sp, r7
 8105f32:	bd80      	pop	{r7, pc}

08105f34 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8105f34:	b580      	push	{r7, lr}
 8105f36:	b086      	sub	sp, #24
 8105f38:	af00      	add	r7, sp, #0
 8105f3a:	60f8      	str	r0, [r7, #12]
 8105f3c:	60b9      	str	r1, [r7, #8]
 8105f3e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105f40:	68f8      	ldr	r0, [r7, #12]
 8105f42:	f7ff ff11 	bl	8105d68 <rpmsg_virtio_get_role>
 8105f46:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8105f48:	2300      	movs	r3, #0
 8105f4a:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105f4c:	693b      	ldr	r3, [r7, #16]
 8105f4e:	2b01      	cmp	r3, #1
 8105f50:	d107      	bne.n	8105f62 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8105f52:	68fb      	ldr	r3, [r7, #12]
 8105f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105f56:	68ba      	ldr	r2, [r7, #8]
 8105f58:	6879      	ldr	r1, [r7, #4]
 8105f5a:	4618      	mov	r0, r3
 8105f5c:	f000 fc04 	bl	8106768 <virtqueue_get_available_buffer>
 8105f60:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8105f62:	697b      	ldr	r3, [r7, #20]
 8105f64:	2b00      	cmp	r3, #0
 8105f66:	d005      	beq.n	8105f74 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8105f68:	68bb      	ldr	r3, [r7, #8]
 8105f6a:	681b      	ldr	r3, [r3, #0]
 8105f6c:	4619      	mov	r1, r3
 8105f6e:	6978      	ldr	r0, [r7, #20]
 8105f70:	f7ff fe2b 	bl	8105bca <metal_cache_invalidate>
	}

	return data;
 8105f74:	697b      	ldr	r3, [r7, #20]
}
 8105f76:	4618      	mov	r0, r3
 8105f78:	3718      	adds	r7, #24
 8105f7a:	46bd      	mov	sp, r7
 8105f7c:	bd80      	pop	{r7, pc}

08105f7e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8105f7e:	b580      	push	{r7, lr}
 8105f80:	b084      	sub	sp, #16
 8105f82:	af00      	add	r7, sp, #0
 8105f84:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8105f86:	6878      	ldr	r0, [r7, #4]
 8105f88:	f7ff ff0e 	bl	8105da8 <rpmsg_virtio_get_status>
 8105f8c:	4603      	mov	r3, r0
 8105f8e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8105f90:	7bfb      	ldrb	r3, [r7, #15]
 8105f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105f96:	2b00      	cmp	r3, #0
 8105f98:	d004      	beq.n	8105fa4 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8105f9a:	2100      	movs	r1, #0
 8105f9c:	6878      	ldr	r0, [r7, #4]
 8105f9e:	f7ff fef0 	bl	8105d82 <rpmsg_virtio_set_status>
 8105fa2:	e7f0      	b.n	8105f86 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8105fa4:	7bfb      	ldrb	r3, [r7, #15]
 8105fa6:	f003 0304 	and.w	r3, r3, #4
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d0eb      	beq.n	8105f86 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8105fae:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8105fb0:	4618      	mov	r0, r3
 8105fb2:	3710      	adds	r7, #16
 8105fb4:	46bd      	mov	sp, r7
 8105fb6:	bd80      	pop	{r7, pc}

08105fb8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8105fb8:	b580      	push	{r7, lr}
 8105fba:	b084      	sub	sp, #16
 8105fbc:	af00      	add	r7, sp, #0
 8105fbe:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8105fc0:	6878      	ldr	r0, [r7, #4]
 8105fc2:	f7ff fed1 	bl	8105d68 <rpmsg_virtio_get_role>
 8105fc6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8105fc8:	2300      	movs	r3, #0
 8105fca:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8105fcc:	68bb      	ldr	r3, [r7, #8]
 8105fce:	2b01      	cmp	r3, #1
 8105fd0:	d107      	bne.n	8105fe2 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105fd6:	4618      	mov	r0, r3
 8105fd8:	f000 fc86 	bl	81068e8 <virtqueue_get_desc_size>
 8105fdc:	4603      	mov	r3, r0
 8105fde:	3b10      	subs	r3, #16
		length =
 8105fe0:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8105fe2:	68fb      	ldr	r3, [r7, #12]
}
 8105fe4:	4618      	mov	r0, r3
 8105fe6:	3710      	adds	r7, #16
 8105fe8:	46bd      	mov	sp, r7
 8105fea:	bd80      	pop	{r7, pc}

08105fec <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8105fec:	b580      	push	{r7, lr}
 8105fee:	b090      	sub	sp, #64	; 0x40
 8105ff0:	af00      	add	r7, sp, #0
 8105ff2:	60f8      	str	r0, [r7, #12]
 8105ff4:	60b9      	str	r1, [r7, #8]
 8105ff6:	607a      	str	r2, [r7, #4]
 8105ff8:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8105ffa:	2300      	movs	r3, #0
 8105ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8105ffe:	2300      	movs	r3, #0
 8106000:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8106002:	68fb      	ldr	r3, [r7, #12]
 8106004:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8106006:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8106008:	f7ff fece 	bl	8105da8 <rpmsg_virtio_get_status>
 810600c:	4603      	mov	r3, r0
 810600e:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8106010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106012:	f003 0304 	and.w	r3, r3, #4
 8106016:	2b00      	cmp	r3, #0
 8106018:	d101      	bne.n	810601e <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 810601a:	4b45      	ldr	r3, [pc, #276]	; (8106130 <rpmsg_virtio_send_offchannel_raw+0x144>)
 810601c:	e083      	b.n	8106126 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 810601e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106020:	2b00      	cmp	r3, #0
 8106022:	d003      	beq.n	810602c <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8106024:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8106028:	63bb      	str	r3, [r7, #56]	; 0x38
 810602a:	e001      	b.n	8106030 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 810602c:	2300      	movs	r3, #0
 810602e:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8106030:	68fb      	ldr	r3, [r7, #12]
 8106032:	3358      	adds	r3, #88	; 0x58
 8106034:	4618      	mov	r0, r3
 8106036:	f7ff fe64 	bl	8105d02 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 810603a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810603c:	f7ff ffbc 	bl	8105fb8 <_rpmsg_virtio_get_buffer_size>
 8106040:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8106042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106046:	429a      	cmp	r2, r3
 8106048:	dc08      	bgt.n	810605c <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 810604a:	f107 0216 	add.w	r2, r7, #22
 810604e:	f107 0310 	add.w	r3, r7, #16
 8106052:	4619      	mov	r1, r3
 8106054:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8106056:	f7ff ff51 	bl	8105efc <rpmsg_virtio_get_tx_buffer>
 810605a:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 810605c:	68fb      	ldr	r3, [r7, #12]
 810605e:	3358      	adds	r3, #88	; 0x58
 8106060:	4618      	mov	r0, r3
 8106062:	f7ff fe59 	bl	8105d18 <metal_mutex_release>
		if (buffer || !tick_count)
 8106066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106068:	2b00      	cmp	r3, #0
 810606a:	d10e      	bne.n	810608a <rpmsg_virtio_send_offchannel_raw+0x9e>
 810606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810606e:	2b00      	cmp	r3, #0
 8106070:	d00b      	beq.n	810608a <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8106072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106074:	2b00      	cmp	r3, #0
 8106076:	d001      	beq.n	810607c <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8106078:	4b2e      	ldr	r3, [pc, #184]	; (8106134 <rpmsg_virtio_send_offchannel_raw+0x148>)
 810607a:	e054      	b.n	8106126 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 810607c:	200a      	movs	r0, #10
 810607e:	f7ff fdbc 	bl	8105bfa <metal_sleep_usec>
		tick_count--;
 8106082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106084:	3b01      	subs	r3, #1
 8106086:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8106088:	e7d2      	b.n	8106030 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 810608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810608c:	2b00      	cmp	r3, #0
 810608e:	d101      	bne.n	8106094 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8106090:	4b29      	ldr	r3, [pc, #164]	; (8106138 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8106092:	e048      	b.n	8106126 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8106098:	68bb      	ldr	r3, [r7, #8]
 810609a:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 810609c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810609e:	b29b      	uxth	r3, r3
 81060a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 81060a2:	2300      	movs	r3, #0
 81060a4:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 81060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81060aa:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 81060ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81060ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81060b0:	f7ff fdc0 	bl	8105c34 <metal_io_virt_to_offset>
 81060b4:	4601      	mov	r1, r0
 81060b6:	f107 0218 	add.w	r2, r7, #24
 81060ba:	2310      	movs	r3, #16
 81060bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81060be:	f7fe ff56 	bl	8104f6e <metal_io_block_write>
 81060c2:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 81060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81060c6:	2b10      	cmp	r3, #16
 81060c8:	d000      	beq.n	81060cc <rpmsg_virtio_send_offchannel_raw+0xe0>
 81060ca:	e7fe      	b.n	81060ca <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 81060cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81060ce:	3310      	adds	r3, #16
 81060d0:	4619      	mov	r1, r3
 81060d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81060d4:	f7ff fdae 	bl	8105c34 <metal_io_virt_to_offset>
 81060d8:	4601      	mov	r1, r0
 81060da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81060dc:	683a      	ldr	r2, [r7, #0]
 81060de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81060e0:	f7fe ff45 	bl	8104f6e <metal_io_block_write>
 81060e4:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 81060e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81060e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81060ea:	429a      	cmp	r2, r3
 81060ec:	d000      	beq.n	81060f0 <rpmsg_virtio_send_offchannel_raw+0x104>
 81060ee:	e7fe      	b.n	81060ee <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 81060f0:	68fb      	ldr	r3, [r7, #12]
 81060f2:	3358      	adds	r3, #88	; 0x58
 81060f4:	4618      	mov	r0, r3
 81060f6:	f7ff fe04 	bl	8105d02 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 81060fa:	693a      	ldr	r2, [r7, #16]
 81060fc:	8afb      	ldrh	r3, [r7, #22]
 81060fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8106100:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8106102:	f7ff fedf 	bl	8105ec4 <rpmsg_virtio_enqueue_buffer>
 8106106:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8106108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810610a:	2b00      	cmp	r3, #0
 810610c:	d000      	beq.n	8106110 <rpmsg_virtio_send_offchannel_raw+0x124>
 810610e:	e7fe      	b.n	810610e <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8106110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106114:	4618      	mov	r0, r3
 8106116:	f000 fbd1 	bl	81068bc <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 810611a:	68fb      	ldr	r3, [r7, #12]
 810611c:	3358      	adds	r3, #88	; 0x58
 810611e:	4618      	mov	r0, r3
 8106120:	f7ff fdfa 	bl	8105d18 <metal_mutex_release>

	return size;
 8106124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8106126:	4618      	mov	r0, r3
 8106128:	3740      	adds	r7, #64	; 0x40
 810612a:	46bd      	mov	sp, r7
 810612c:	bd80      	pop	{r7, pc}
 810612e:	bf00      	nop
 8106130:	fffff82c 	.word	0xfffff82c
 8106134:	fffff82b 	.word	0xfffff82b
 8106138:	fffff82e 	.word	0xfffff82e

0810613c <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 810613c:	b480      	push	{r7}
 810613e:	b083      	sub	sp, #12
 8106140:	af00      	add	r7, sp, #0
 8106142:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8106144:	bf00      	nop
 8106146:	370c      	adds	r7, #12
 8106148:	46bd      	mov	sp, r7
 810614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810614e:	4770      	bx	lr

08106150 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8106150:	b590      	push	{r4, r7, lr}
 8106152:	b08d      	sub	sp, #52	; 0x34
 8106154:	af02      	add	r7, sp, #8
 8106156:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	681b      	ldr	r3, [r3, #0]
 810615c:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 810615e:	6a3b      	ldr	r3, [r7, #32]
 8106160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106162:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8106164:	69fb      	ldr	r3, [r7, #28]
 8106166:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8106168:	69bb      	ldr	r3, [r7, #24]
 810616a:	3358      	adds	r3, #88	; 0x58
 810616c:	4618      	mov	r0, r3
 810616e:	f7ff fdc8 	bl	8105d02 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8106172:	f107 020a 	add.w	r2, r7, #10
 8106176:	f107 030c 	add.w	r3, r7, #12
 810617a:	4619      	mov	r1, r3
 810617c:	69f8      	ldr	r0, [r7, #28]
 810617e:	f7ff fed9 	bl	8105f34 <rpmsg_virtio_get_rx_buffer>
 8106182:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8106184:	69bb      	ldr	r3, [r7, #24]
 8106186:	3358      	adds	r3, #88	; 0x58
 8106188:	4618      	mov	r0, r3
 810618a:	f7ff fdc5 	bl	8105d18 <metal_mutex_release>

	while (rp_hdr) {
 810618e:	e04c      	b.n	810622a <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8106190:	69bb      	ldr	r3, [r7, #24]
 8106192:	3358      	adds	r3, #88	; 0x58
 8106194:	4618      	mov	r0, r3
 8106196:	f7ff fdb4 	bl	8105d02 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 810619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810619c:	685b      	ldr	r3, [r3, #4]
 810619e:	4619      	mov	r1, r3
 81061a0:	69b8      	ldr	r0, [r7, #24]
 81061a2:	f7ff fe38 	bl	8105e16 <rpmsg_get_ept_from_addr>
 81061a6:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 81061a8:	69bb      	ldr	r3, [r7, #24]
 81061aa:	3358      	adds	r3, #88	; 0x58
 81061ac:	4618      	mov	r0, r3
 81061ae:	f7ff fdb3 	bl	8105d18 <metal_mutex_release>

		if (!ept)
 81061b2:	697b      	ldr	r3, [r7, #20]
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	d03c      	beq.n	8106232 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 81061b8:	697b      	ldr	r3, [r7, #20]
 81061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81061c0:	d103      	bne.n	81061ca <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 81061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061c4:	681a      	ldr	r2, [r3, #0]
 81061c6:	697b      	ldr	r3, [r7, #20]
 81061c8:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 81061ca:	697b      	ldr	r3, [r7, #20]
 81061cc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 81061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061d0:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 81061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061d6:	899b      	ldrh	r3, [r3, #12]
 81061d8:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 81061da:	4618      	mov	r0, r3
 81061dc:	697b      	ldr	r3, [r7, #20]
 81061de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81061e0:	697b      	ldr	r3, [r7, #20]
 81061e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061e4:	9300      	str	r3, [sp, #0]
 81061e6:	4613      	mov	r3, r2
 81061e8:	4602      	mov	r2, r0
 81061ea:	6978      	ldr	r0, [r7, #20]
 81061ec:	47a0      	blx	r4
 81061ee:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 81061f0:	693b      	ldr	r3, [r7, #16]
 81061f2:	2b00      	cmp	r3, #0
 81061f4:	d000      	beq.n	81061f8 <rpmsg_virtio_rx_callback+0xa8>
 81061f6:	e7fe      	b.n	81061f6 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 81061f8:	69bb      	ldr	r3, [r7, #24]
 81061fa:	3358      	adds	r3, #88	; 0x58
 81061fc:	4618      	mov	r0, r3
 81061fe:	f7ff fd80 	bl	8105d02 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8106202:	68fa      	ldr	r2, [r7, #12]
 8106204:	897b      	ldrh	r3, [r7, #10]
 8106206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8106208:	69f8      	ldr	r0, [r7, #28]
 810620a:	f7ff fe42 	bl	8105e92 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 810620e:	f107 020a 	add.w	r2, r7, #10
 8106212:	f107 030c 	add.w	r3, r7, #12
 8106216:	4619      	mov	r1, r3
 8106218:	69f8      	ldr	r0, [r7, #28]
 810621a:	f7ff fe8b 	bl	8105f34 <rpmsg_virtio_get_rx_buffer>
 810621e:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8106220:	69bb      	ldr	r3, [r7, #24]
 8106222:	3358      	adds	r3, #88	; 0x58
 8106224:	4618      	mov	r0, r3
 8106226:	f7ff fd77 	bl	8105d18 <metal_mutex_release>
	while (rp_hdr) {
 810622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810622c:	2b00      	cmp	r3, #0
 810622e:	d1af      	bne.n	8106190 <rpmsg_virtio_rx_callback+0x40>
 8106230:	e000      	b.n	8106234 <rpmsg_virtio_rx_callback+0xe4>
			return;
 8106232:	bf00      	nop
	}
}
 8106234:	372c      	adds	r7, #44	; 0x2c
 8106236:	46bd      	mov	sp, r7
 8106238:	bd90      	pop	{r4, r7, pc}

0810623a <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 810623a:	b580      	push	{r7, lr}
 810623c:	b092      	sub	sp, #72	; 0x48
 810623e:	af00      	add	r7, sp, #0
 8106240:	60f8      	str	r0, [r7, #12]
 8106242:	60b9      	str	r1, [r7, #8]
 8106244:	607a      	str	r2, [r7, #4]
 8106246:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8106248:	68fb      	ldr	r3, [r7, #12]
 810624a:	6a1b      	ldr	r3, [r3, #32]
 810624c:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 810624e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106250:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8106252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106256:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8106258:	68bb      	ldr	r3, [r7, #8]
 810625a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	2b28      	cmp	r3, #40	; 0x28
 8106260:	d001      	beq.n	8106266 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8106262:	2300      	movs	r3, #0
 8106264:	e057      	b.n	8106316 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8106266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8106268:	4619      	mov	r1, r3
 810626a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810626c:	f7ff fce2 	bl	8105c34 <metal_io_virt_to_offset>
 8106270:	4601      	mov	r1, r0
 8106272:	f107 0210 	add.w	r2, r7, #16
 8106276:	2320      	movs	r3, #32
 8106278:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810627a:	f7fe fe01 	bl	8104e80 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 810627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106280:	6a1b      	ldr	r3, [r3, #32]
 8106282:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8106284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106286:	3358      	adds	r3, #88	; 0x58
 8106288:	4618      	mov	r0, r3
 810628a:	f7ff fd3a 	bl	8105d02 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 810628e:	f107 0110 	add.w	r1, r7, #16
 8106292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106294:	f04f 32ff 	mov.w	r2, #4294967295
 8106298:	6c78      	ldr	r0, [r7, #68]	; 0x44
 810629a:	f7ff fb75 	bl	8105988 <rpmsg_get_endpoint>
 810629e:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 81062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81062a4:	f003 0301 	and.w	r3, r3, #1
 81062a8:	2b00      	cmp	r3, #0
 81062aa:	d017      	beq.n	81062dc <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 81062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062ae:	2b00      	cmp	r3, #0
 81062b0:	d003      	beq.n	81062ba <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 81062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062b4:	f04f 32ff 	mov.w	r2, #4294967295
 81062b8:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 81062ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81062bc:	3358      	adds	r3, #88	; 0x58
 81062be:	4618      	mov	r0, r3
 81062c0:	f7ff fd2a 	bl	8105d18 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 81062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062c6:	2b00      	cmp	r3, #0
 81062c8:	d024      	beq.n	8106314 <rpmsg_virtio_ns_callback+0xda>
 81062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81062ce:	2b00      	cmp	r3, #0
 81062d0:	d020      	beq.n	8106314 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 81062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81062d6:	68f8      	ldr	r0, [r7, #12]
 81062d8:	4798      	blx	r3
 81062da:	e01b      	b.n	8106314 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 81062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062de:	2b00      	cmp	r3, #0
 81062e0:	d110      	bne.n	8106304 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 81062e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81062e4:	3358      	adds	r3, #88	; 0x58
 81062e6:	4618      	mov	r0, r3
 81062e8:	f7ff fd16 	bl	8105d18 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 81062ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81062ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81062f0:	2b00      	cmp	r3, #0
 81062f2:	d00f      	beq.n	8106314 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 81062f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81062f8:	f107 0110 	add.w	r1, r7, #16
 81062fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81062fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8106300:	4798      	blx	r3
 8106302:	e007      	b.n	8106314 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8106304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106308:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 810630a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810630c:	3358      	adds	r3, #88	; 0x58
 810630e:	4618      	mov	r0, r3
 8106310:	f7ff fd02 	bl	8105d18 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8106314:	2300      	movs	r3, #0
}
 8106316:	4618      	mov	r0, r3
 8106318:	3748      	adds	r7, #72	; 0x48
 810631a:	46bd      	mov	sp, r7
 810631c:	bd80      	pop	{r7, pc}
	...

08106320 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8106320:	b580      	push	{r7, lr}
 8106322:	b090      	sub	sp, #64	; 0x40
 8106324:	af02      	add	r7, sp, #8
 8106326:	60f8      	str	r0, [r7, #12]
 8106328:	60b9      	str	r1, [r7, #8]
 810632a:	607a      	str	r2, [r7, #4]
 810632c:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 810632e:	68fb      	ldr	r3, [r7, #12]
 8106330:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 8106332:	2264      	movs	r2, #100	; 0x64
 8106334:	2100      	movs	r1, #0
 8106336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106338:	f000 fdf4 	bl	8106f24 <memset>
	metal_mutex_init(&rdev->lock);
 810633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810633e:	3358      	adds	r3, #88	; 0x58
 8106340:	4618      	mov	r0, r3
 8106342:	f7ff fcd3 	bl	8105cec <metal_mutex_init>
	rvdev->vdev = vdev;
 8106346:	68fb      	ldr	r3, [r7, #12]
 8106348:	68ba      	ldr	r2, [r7, #8]
 810634a:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 810634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810634e:	687a      	ldr	r2, [r7, #4]
 8106350:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8106352:	68bb      	ldr	r3, [r7, #8]
 8106354:	68fa      	ldr	r2, [r7, #12]
 8106356:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8106358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810635a:	4a38      	ldr	r2, [pc, #224]	; (810643c <rpmsg_init_vdev+0x11c>)
 810635c:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 810635e:	68f8      	ldr	r0, [r7, #12]
 8106360:	f7ff fd02 	bl	8105d68 <rpmsg_virtio_get_role>
 8106364:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 8106366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106368:	2b01      	cmp	r3, #1
 810636a:	d112      	bne.n	8106392 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 810636c:	4b34      	ldr	r3, [pc, #208]	; (8106440 <rpmsg_init_vdev+0x120>)
 810636e:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8106370:	4b34      	ldr	r3, [pc, #208]	; (8106444 <rpmsg_init_vdev+0x124>)
 8106372:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8106374:	4b34      	ldr	r3, [pc, #208]	; (8106448 <rpmsg_init_vdev+0x128>)
 8106376:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8106378:	4b34      	ldr	r3, [pc, #208]	; (810644c <rpmsg_init_vdev+0x12c>)
 810637a:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 810637c:	68bb      	ldr	r3, [r7, #8]
 810637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106380:	3318      	adds	r3, #24
 8106382:	681a      	ldr	r2, [r3, #0]
 8106384:	68fb      	ldr	r3, [r7, #12]
 8106386:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8106388:	68bb      	ldr	r3, [r7, #8]
 810638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810638c:	681a      	ldr	r2, [r3, #0]
 810638e:	68fb      	ldr	r3, [r7, #12]
 8106390:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8106392:	68fb      	ldr	r3, [r7, #12]
 8106394:	683a      	ldr	r2, [r7, #0]
 8106396:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8106398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810639a:	2b01      	cmp	r3, #1
 810639c:	d102      	bne.n	81063a4 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 810639e:	68f8      	ldr	r0, [r7, #12]
 81063a0:	f7ff fded 	bl	8105f7e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 81063a4:	f107 0218 	add.w	r2, r7, #24
 81063a8:	f107 0310 	add.w	r3, r7, #16
 81063ac:	9300      	str	r3, [sp, #0]
 81063ae:	4613      	mov	r3, r2
 81063b0:	2202      	movs	r2, #2
 81063b2:	2100      	movs	r1, #0
 81063b4:	68f8      	ldr	r0, [r7, #12]
 81063b6:	f7ff fd19 	bl	8105dec <rpmsg_virtio_create_virtqueues>
 81063ba:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 81063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063be:	2b00      	cmp	r3, #0
 81063c0:	d001      	beq.n	81063c6 <rpmsg_init_vdev+0xa6>
		return status;
 81063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063c4:	e035      	b.n	8106432 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 81063c6:	2300      	movs	r3, #0
 81063c8:	637b      	str	r3, [r7, #52]	; 0x34
 81063ca:	e00f      	b.n	81063ec <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 81063cc:	68bb      	ldr	r3, [r7, #8]
 81063ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81063d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81063d2:	4613      	mov	r3, r2
 81063d4:	005b      	lsls	r3, r3, #1
 81063d6:	4413      	add	r3, r2
 81063d8:	00db      	lsls	r3, r3, #3
 81063da:	440b      	add	r3, r1
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 81063e0:	6a3b      	ldr	r3, [r7, #32]
 81063e2:	683a      	ldr	r2, [r7, #0]
 81063e4:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 81063e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81063e8:	3301      	adds	r3, #1
 81063ea:	637b      	str	r3, [r7, #52]	; 0x34
 81063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81063ee:	2b01      	cmp	r3, #1
 81063f0:	d9ec      	bls.n	81063cc <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 81063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81063f4:	4618      	mov	r0, r3
 81063f6:	f7ff fc0c 	bl	8105c12 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 81063fa:	68f8      	ldr	r0, [r7, #12]
 81063fc:	f7ff fce5 	bl	8105dca <rpmsg_virtio_get_features>
 8106400:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8106402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106404:	f003 0301 	and.w	r3, r3, #1
 8106408:	2b00      	cmp	r3, #0
 810640a:	d011      	beq.n	8106430 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 810640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810640e:	f103 0008 	add.w	r0, r3, #8
 8106412:	2300      	movs	r3, #0
 8106414:	9301      	str	r3, [sp, #4]
 8106416:	4b0e      	ldr	r3, [pc, #56]	; (8106450 <rpmsg_init_vdev+0x130>)
 8106418:	9300      	str	r3, [sp, #0]
 810641a:	2335      	movs	r3, #53	; 0x35
 810641c:	2235      	movs	r2, #53	; 0x35
 810641e:	490d      	ldr	r1, [pc, #52]	; (8106454 <rpmsg_init_vdev+0x134>)
 8106420:	f7ff fc85 	bl	8105d2e <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8106424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106426:	3308      	adds	r3, #8
 8106428:	4619      	mov	r1, r3
 810642a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810642c:	f7ff fb2e 	bl	8105a8c <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8106430:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8106432:	4618      	mov	r0, r3
 8106434:	3738      	adds	r7, #56	; 0x38
 8106436:	46bd      	mov	sp, r7
 8106438:	bd80      	pop	{r7, pc}
 810643a:	bf00      	nop
 810643c:	08105fed 	.word	0x08105fed
 8106440:	08108110 	.word	0x08108110
 8106444:	08108118 	.word	0x08108118
 8106448:	0810613d 	.word	0x0810613d
 810644c:	08106151 	.word	0x08106151
 8106450:	0810623b 	.word	0x0810623b
 8106454:	08108120 	.word	0x08108120

08106458 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8106458:	b480      	push	{r7}
 810645a:	b083      	sub	sp, #12
 810645c:	af00      	add	r7, sp, #0
 810645e:	6078      	str	r0, [r7, #4]
 8106460:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8106462:	bf00      	nop
 8106464:	370c      	adds	r7, #12
 8106466:	46bd      	mov	sp, r7
 8106468:	f85d 7b04 	ldr.w	r7, [sp], #4
 810646c:	4770      	bx	lr

0810646e <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 810646e:	b480      	push	{r7}
 8106470:	b083      	sub	sp, #12
 8106472:	af00      	add	r7, sp, #0
 8106474:	6078      	str	r0, [r7, #4]
 8106476:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8106478:	bf00      	nop
 810647a:	370c      	adds	r7, #12
 810647c:	46bd      	mov	sp, r7
 810647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106482:	4770      	bx	lr

08106484 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8106484:	b480      	push	{r7}
 8106486:	b085      	sub	sp, #20
 8106488:	af00      	add	r7, sp, #0
 810648a:	60f8      	str	r0, [r7, #12]
 810648c:	60b9      	str	r1, [r7, #8]
 810648e:	607a      	str	r2, [r7, #4]
 8106490:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8106492:	68fb      	ldr	r3, [r7, #12]
}
 8106494:	4618      	mov	r0, r3
 8106496:	3714      	adds	r7, #20
 8106498:	46bd      	mov	sp, r7
 810649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810649e:	4770      	bx	lr

081064a0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 81064a0:	b590      	push	{r4, r7, lr}
 81064a2:	b08f      	sub	sp, #60	; 0x3c
 81064a4:	af04      	add	r7, sp, #16
 81064a6:	60f8      	str	r0, [r7, #12]
 81064a8:	60b9      	str	r1, [r7, #8]
 81064aa:	607a      	str	r2, [r7, #4]
 81064ac:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 81064ae:	68fb      	ldr	r3, [r7, #12]
 81064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064b2:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 81064b4:	687a      	ldr	r2, [r7, #4]
 81064b6:	6a3b      	ldr	r3, [r7, #32]
 81064b8:	429a      	cmp	r2, r3
 81064ba:	d902      	bls.n	81064c2 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 81064bc:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 81064c0:	e036      	b.n	8106530 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 81064c2:	2300      	movs	r3, #0
 81064c4:	627b      	str	r3, [r7, #36]	; 0x24
 81064c6:	e02e      	b.n	8106526 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 81064c8:	68fb      	ldr	r3, [r7, #12]
 81064ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81064ce:	4613      	mov	r3, r2
 81064d0:	005b      	lsls	r3, r3, #1
 81064d2:	4413      	add	r3, r2
 81064d4:	00db      	lsls	r3, r3, #3
 81064d6:	440b      	add	r3, r1
 81064d8:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 81064da:	69fb      	ldr	r3, [r7, #28]
 81064dc:	3304      	adds	r3, #4
 81064de:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064e2:	b298      	uxth	r0, r3
 81064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064e6:	009b      	lsls	r3, r3, #2
 81064e8:	683a      	ldr	r2, [r7, #0]
 81064ea:	4413      	add	r3, r2
 81064ec:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 81064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81064f0:	009b      	lsls	r3, r3, #2
 81064f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81064f4:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81064f6:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 81064f8:	68fa      	ldr	r2, [r7, #12]
 81064fa:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81064fc:	6a12      	ldr	r2, [r2, #32]
 81064fe:	69f9      	ldr	r1, [r7, #28]
 8106500:	6809      	ldr	r1, [r1, #0]
 8106502:	9102      	str	r1, [sp, #8]
 8106504:	9201      	str	r2, [sp, #4]
 8106506:	9300      	str	r3, [sp, #0]
 8106508:	69bb      	ldr	r3, [r7, #24]
 810650a:	4622      	mov	r2, r4
 810650c:	4601      	mov	r1, r0
 810650e:	68f8      	ldr	r0, [r7, #12]
 8106510:	f000 f8f6 	bl	8106700 <virtqueue_create>
 8106514:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8106516:	697b      	ldr	r3, [r7, #20]
 8106518:	2b00      	cmp	r3, #0
 810651a:	d001      	beq.n	8106520 <virtio_create_virtqueues+0x80>
			return ret;
 810651c:	697b      	ldr	r3, [r7, #20]
 810651e:	e007      	b.n	8106530 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8106520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106522:	3301      	adds	r3, #1
 8106524:	627b      	str	r3, [r7, #36]	; 0x24
 8106526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	429a      	cmp	r2, r3
 810652c:	d3cc      	bcc.n	81064c8 <virtio_create_virtqueues+0x28>
	}
	return 0;
 810652e:	2300      	movs	r3, #0
}
 8106530:	4618      	mov	r0, r3
 8106532:	372c      	adds	r7, #44	; 0x2c
 8106534:	46bd      	mov	sp, r7
 8106536:	bd90      	pop	{r4, r7, pc}

08106538 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8106538:	b480      	push	{r7}
 810653a:	b085      	sub	sp, #20
 810653c:	af00      	add	r7, sp, #0
 810653e:	60f8      	str	r0, [r7, #12]
 8106540:	60b9      	str	r1, [r7, #8]
 8106542:	607a      	str	r2, [r7, #4]
 8106544:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8106546:	68fb      	ldr	r3, [r7, #12]
 8106548:	68ba      	ldr	r2, [r7, #8]
 810654a:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 810654c:	68fb      	ldr	r3, [r7, #12]
 810654e:	687a      	ldr	r2, [r7, #4]
 8106550:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8106552:	68bb      	ldr	r3, [r7, #8]
 8106554:	011b      	lsls	r3, r3, #4
 8106556:	687a      	ldr	r2, [r7, #4]
 8106558:	441a      	add	r2, r3
 810655a:	68fb      	ldr	r3, [r7, #12]
 810655c:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 810655e:	68fb      	ldr	r3, [r7, #12]
 8106560:	689a      	ldr	r2, [r3, #8]
 8106562:	68bb      	ldr	r3, [r7, #8]
 8106564:	005b      	lsls	r3, r3, #1
 8106566:	4413      	add	r3, r2
 8106568:	3304      	adds	r3, #4
 810656a:	461a      	mov	r2, r3
 810656c:	683b      	ldr	r3, [r7, #0]
 810656e:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8106570:	1c5a      	adds	r2, r3, #1
 8106572:	683b      	ldr	r3, [r7, #0]
 8106574:	425b      	negs	r3, r3
 8106576:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8106578:	461a      	mov	r2, r3
 810657a:	68fb      	ldr	r3, [r7, #12]
 810657c:	60da      	str	r2, [r3, #12]
}
 810657e:	bf00      	nop
 8106580:	3714      	adds	r7, #20
 8106582:	46bd      	mov	sp, r7
 8106584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106588:	4770      	bx	lr

0810658a <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 810658a:	b480      	push	{r7}
 810658c:	b083      	sub	sp, #12
 810658e:	af00      	add	r7, sp, #0
 8106590:	4603      	mov	r3, r0
 8106592:	80fb      	strh	r3, [r7, #6]
 8106594:	460b      	mov	r3, r1
 8106596:	80bb      	strh	r3, [r7, #4]
 8106598:	4613      	mov	r3, r2
 810659a:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 810659c:	88ba      	ldrh	r2, [r7, #4]
 810659e:	88fb      	ldrh	r3, [r7, #6]
 81065a0:	1ad3      	subs	r3, r2, r3
 81065a2:	b29b      	uxth	r3, r3
 81065a4:	3b01      	subs	r3, #1
 81065a6:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 81065a8:	88b9      	ldrh	r1, [r7, #4]
 81065aa:	887b      	ldrh	r3, [r7, #2]
 81065ac:	1acb      	subs	r3, r1, r3
 81065ae:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 81065b0:	429a      	cmp	r2, r3
 81065b2:	bf34      	ite	cc
 81065b4:	2301      	movcc	r3, #1
 81065b6:	2300      	movcs	r3, #0
 81065b8:	b2db      	uxtb	r3, r3
}
 81065ba:	4618      	mov	r0, r3
 81065bc:	370c      	adds	r7, #12
 81065be:	46bd      	mov	sp, r7
 81065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065c4:	4770      	bx	lr

081065c6 <metal_io_virt>:
{
 81065c6:	b480      	push	{r7}
 81065c8:	b083      	sub	sp, #12
 81065ca:	af00      	add	r7, sp, #0
 81065cc:	6078      	str	r0, [r7, #4]
 81065ce:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81065d8:	d009      	beq.n	81065ee <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	689b      	ldr	r3, [r3, #8]
 81065de:	683a      	ldr	r2, [r7, #0]
 81065e0:	429a      	cmp	r2, r3
 81065e2:	d804      	bhi.n	81065ee <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81065e8:	683b      	ldr	r3, [r7, #0]
 81065ea:	4413      	add	r3, r2
 81065ec:	e000      	b.n	81065f0 <metal_io_virt+0x2a>
 81065ee:	2300      	movs	r3, #0
}
 81065f0:	4618      	mov	r0, r3
 81065f2:	370c      	adds	r7, #12
 81065f4:	46bd      	mov	sp, r7
 81065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065fa:	4770      	bx	lr

081065fc <metal_io_phys>:
{
 81065fc:	b480      	push	{r7}
 81065fe:	b085      	sub	sp, #20
 8106600:	af00      	add	r7, sp, #0
 8106602:	6078      	str	r0, [r7, #4]
 8106604:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 810660a:	2b1f      	cmp	r3, #31
 810660c:	d805      	bhi.n	810661a <metal_io_phys+0x1e>
 810660e:	687b      	ldr	r3, [r7, #4]
 8106610:	68db      	ldr	r3, [r3, #12]
 8106612:	683a      	ldr	r2, [r7, #0]
 8106614:	fa22 f303 	lsr.w	r3, r2, r3
 8106618:	e000      	b.n	810661c <metal_io_phys+0x20>
 810661a:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 810661c:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8106622:	2b00      	cmp	r3, #0
 8106624:	d010      	beq.n	8106648 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8106626:	687b      	ldr	r3, [r7, #4]
 8106628:	689b      	ldr	r3, [r3, #8]
 810662a:	683a      	ldr	r2, [r7, #0]
 810662c:	429a      	cmp	r2, r3
 810662e:	d80b      	bhi.n	8106648 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	685a      	ldr	r2, [r3, #4]
 8106634:	68fb      	ldr	r3, [r7, #12]
 8106636:	009b      	lsls	r3, r3, #2
 8106638:	4413      	add	r3, r2
 810663a:	681a      	ldr	r2, [r3, #0]
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	6919      	ldr	r1, [r3, #16]
 8106640:	683b      	ldr	r3, [r7, #0]
 8106642:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8106644:	4413      	add	r3, r2
 8106646:	e001      	b.n	810664c <metal_io_phys+0x50>
 8106648:	f04f 33ff 	mov.w	r3, #4294967295
}
 810664c:	4618      	mov	r0, r3
 810664e:	3714      	adds	r7, #20
 8106650:	46bd      	mov	sp, r7
 8106652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106656:	4770      	bx	lr

08106658 <metal_io_phys_to_offset>:
{
 8106658:	b580      	push	{r7, lr}
 810665a:	b084      	sub	sp, #16
 810665c:	af00      	add	r7, sp, #0
 810665e:	6078      	str	r0, [r7, #4]
 8106660:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8106662:	687b      	ldr	r3, [r7, #4]
 8106664:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8106666:	f1b3 3fff 	cmp.w	r3, #4294967295
 810666a:	d105      	bne.n	8106678 <metal_io_phys_to_offset+0x20>
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	685b      	ldr	r3, [r3, #4]
 8106670:	681b      	ldr	r3, [r3, #0]
 8106672:	683a      	ldr	r2, [r7, #0]
 8106674:	1ad3      	subs	r3, r2, r3
 8106676:	e003      	b.n	8106680 <metal_io_phys_to_offset+0x28>
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	691a      	ldr	r2, [r3, #16]
 810667c:	683b      	ldr	r3, [r7, #0]
 810667e:	4013      	ands	r3, r2
	unsigned long offset =
 8106680:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8106682:	68f9      	ldr	r1, [r7, #12]
 8106684:	6878      	ldr	r0, [r7, #4]
 8106686:	f7ff ffb9 	bl	81065fc <metal_io_phys>
 810668a:	4602      	mov	r2, r0
 810668c:	683b      	ldr	r3, [r7, #0]
 810668e:	4293      	cmp	r3, r2
 8106690:	d101      	bne.n	8106696 <metal_io_phys_to_offset+0x3e>
			return offset;
 8106692:	68fb      	ldr	r3, [r7, #12]
 8106694:	e00c      	b.n	81066b0 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	691a      	ldr	r2, [r3, #16]
 810669a:	68fb      	ldr	r3, [r7, #12]
 810669c:	4413      	add	r3, r2
 810669e:	3301      	adds	r3, #1
 81066a0:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	689b      	ldr	r3, [r3, #8]
 81066a6:	68fa      	ldr	r2, [r7, #12]
 81066a8:	429a      	cmp	r2, r3
 81066aa:	d3ea      	bcc.n	8106682 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 81066ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 81066b0:	4618      	mov	r0, r3
 81066b2:	3710      	adds	r7, #16
 81066b4:	46bd      	mov	sp, r7
 81066b6:	bd80      	pop	{r7, pc}

081066b8 <metal_io_phys_to_virt>:
{
 81066b8:	b580      	push	{r7, lr}
 81066ba:	b082      	sub	sp, #8
 81066bc:	af00      	add	r7, sp, #0
 81066be:	6078      	str	r0, [r7, #4]
 81066c0:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 81066c2:	6839      	ldr	r1, [r7, #0]
 81066c4:	6878      	ldr	r0, [r7, #4]
 81066c6:	f7ff ffc7 	bl	8106658 <metal_io_phys_to_offset>
 81066ca:	4603      	mov	r3, r0
 81066cc:	4619      	mov	r1, r3
 81066ce:	6878      	ldr	r0, [r7, #4]
 81066d0:	f7ff ff79 	bl	81065c6 <metal_io_virt>
 81066d4:	4603      	mov	r3, r0
}
 81066d6:	4618      	mov	r0, r3
 81066d8:	3708      	adds	r7, #8
 81066da:	46bd      	mov	sp, r7
 81066dc:	bd80      	pop	{r7, pc}

081066de <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 81066de:	b580      	push	{r7, lr}
 81066e0:	b084      	sub	sp, #16
 81066e2:	af00      	add	r7, sp, #0
 81066e4:	6078      	str	r0, [r7, #4]
 81066e6:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81066ec:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 81066ee:	6839      	ldr	r1, [r7, #0]
 81066f0:	68f8      	ldr	r0, [r7, #12]
 81066f2:	f7ff ffe1 	bl	81066b8 <metal_io_phys_to_virt>
 81066f6:	4603      	mov	r3, r0
}
 81066f8:	4618      	mov	r0, r3
 81066fa:	3710      	adds	r7, #16
 81066fc:	46bd      	mov	sp, r7
 81066fe:	bd80      	pop	{r7, pc}

08106700 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8106700:	b580      	push	{r7, lr}
 8106702:	b086      	sub	sp, #24
 8106704:	af00      	add	r7, sp, #0
 8106706:	60f8      	str	r0, [r7, #12]
 8106708:	607a      	str	r2, [r7, #4]
 810670a:	603b      	str	r3, [r7, #0]
 810670c:	460b      	mov	r3, r1
 810670e:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8106710:	2300      	movs	r3, #0
 8106712:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8106714:	697b      	ldr	r3, [r7, #20]
 8106716:	2b00      	cmp	r3, #0
 8106718:	d121      	bne.n	810675e <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 810671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810671c:	68fa      	ldr	r2, [r7, #12]
 810671e:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8106720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106722:	687a      	ldr	r2, [r7, #4]
 8106724:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8106726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106728:	897a      	ldrh	r2, [r7, #10]
 810672a:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 810672c:	683b      	ldr	r3, [r7, #0]
 810672e:	891a      	ldrh	r2, [r3, #8]
 8106730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106732:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8106734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106736:	895a      	ldrh	r2, [r3, #10]
 8106738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810673a:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 810673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810673e:	6a3a      	ldr	r2, [r7, #32]
 8106740:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8106742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106746:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8106748:	683b      	ldr	r3, [r7, #0]
 810674a:	6819      	ldr	r1, [r3, #0]
 810674c:	683b      	ldr	r3, [r7, #0]
 810674e:	685b      	ldr	r3, [r3, #4]
 8106750:	461a      	mov	r2, r3
 8106752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106754:	f000 f8fb 	bl	810694e <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8106758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810675a:	f000 f885 	bl	8106868 <virtqueue_disable_cb>
	}

	return (status);
 810675e:	697b      	ldr	r3, [r7, #20]
}
 8106760:	4618      	mov	r0, r3
 8106762:	3718      	adds	r7, #24
 8106764:	46bd      	mov	sp, r7
 8106766:	bd80      	pop	{r7, pc}

08106768 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8106768:	b580      	push	{r7, lr}
 810676a:	b086      	sub	sp, #24
 810676c:	af00      	add	r7, sp, #0
 810676e:	60f8      	str	r0, [r7, #12]
 8106770:	60b9      	str	r1, [r7, #8]
 8106772:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8106774:	2300      	movs	r3, #0
 8106776:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8106778:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 810677c:	68fb      	ldr	r3, [r7, #12]
 810677e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106780:	68fb      	ldr	r3, [r7, #12]
 8106782:	6a1b      	ldr	r3, [r3, #32]
 8106784:	885b      	ldrh	r3, [r3, #2]
 8106786:	429a      	cmp	r2, r3
 8106788:	d101      	bne.n	810678e <virtqueue_get_available_buffer+0x26>
		return NULL;
 810678a:	2300      	movs	r3, #0
 810678c:	e02e      	b.n	81067ec <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 810678e:	68fb      	ldr	r3, [r7, #12]
 8106790:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106792:	1c5a      	adds	r2, r3, #1
 8106794:	b291      	uxth	r1, r2
 8106796:	68fa      	ldr	r2, [r7, #12]
 8106798:	8691      	strh	r1, [r2, #52]	; 0x34
 810679a:	b21a      	sxth	r2, r3
 810679c:	68fb      	ldr	r3, [r7, #12]
 810679e:	895b      	ldrh	r3, [r3, #10]
 81067a0:	3b01      	subs	r3, #1
 81067a2:	b29b      	uxth	r3, r3
 81067a4:	b21b      	sxth	r3, r3
 81067a6:	4013      	ands	r3, r2
 81067a8:	b21b      	sxth	r3, r3
 81067aa:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 81067ac:	68fb      	ldr	r3, [r7, #12]
 81067ae:	6a1a      	ldr	r2, [r3, #32]
 81067b0:	8afb      	ldrh	r3, [r7, #22]
 81067b2:	005b      	lsls	r3, r3, #1
 81067b4:	4413      	add	r3, r2
 81067b6:	889a      	ldrh	r2, [r3, #4]
 81067b8:	68bb      	ldr	r3, [r7, #8]
 81067ba:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 81067bc:	68fb      	ldr	r3, [r7, #12]
 81067be:	69da      	ldr	r2, [r3, #28]
 81067c0:	68bb      	ldr	r3, [r7, #8]
 81067c2:	881b      	ldrh	r3, [r3, #0]
 81067c4:	011b      	lsls	r3, r3, #4
 81067c6:	4413      	add	r3, r2
 81067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067cc:	4613      	mov	r3, r2
 81067ce:	4619      	mov	r1, r3
 81067d0:	68f8      	ldr	r0, [r7, #12]
 81067d2:	f7ff ff84 	bl	81066de <virtqueue_phys_to_virt>
 81067d6:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 81067d8:	68fb      	ldr	r3, [r7, #12]
 81067da:	69da      	ldr	r2, [r3, #28]
 81067dc:	68bb      	ldr	r3, [r7, #8]
 81067de:	881b      	ldrh	r3, [r3, #0]
 81067e0:	011b      	lsls	r3, r3, #4
 81067e2:	4413      	add	r3, r2
 81067e4:	689a      	ldr	r2, [r3, #8]
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 81067ea:	693b      	ldr	r3, [r7, #16]
}
 81067ec:	4618      	mov	r0, r3
 81067ee:	3718      	adds	r7, #24
 81067f0:	46bd      	mov	sp, r7
 81067f2:	bd80      	pop	{r7, pc}

081067f4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 81067f4:	b480      	push	{r7}
 81067f6:	b087      	sub	sp, #28
 81067f8:	af00      	add	r7, sp, #0
 81067fa:	60f8      	str	r0, [r7, #12]
 81067fc:	460b      	mov	r3, r1
 81067fe:	607a      	str	r2, [r7, #4]
 8106800:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8106802:	2300      	movs	r3, #0
 8106804:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8106806:	68fb      	ldr	r3, [r7, #12]
 8106808:	895b      	ldrh	r3, [r3, #10]
 810680a:	897a      	ldrh	r2, [r7, #10]
 810680c:	429a      	cmp	r2, r3
 810680e:	d901      	bls.n	8106814 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8106810:	4b14      	ldr	r3, [pc, #80]	; (8106864 <virtqueue_add_consumed_buffer+0x70>)
 8106812:	e021      	b.n	8106858 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8106814:	68fb      	ldr	r3, [r7, #12]
 8106816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106818:	885b      	ldrh	r3, [r3, #2]
 810681a:	b21a      	sxth	r2, r3
 810681c:	68fb      	ldr	r3, [r7, #12]
 810681e:	895b      	ldrh	r3, [r3, #10]
 8106820:	3b01      	subs	r3, #1
 8106822:	b29b      	uxth	r3, r3
 8106824:	b21b      	sxth	r3, r3
 8106826:	4013      	ands	r3, r2
 8106828:	b21b      	sxth	r3, r3
 810682a:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 810682c:	68fb      	ldr	r3, [r7, #12]
 810682e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106830:	8a7b      	ldrh	r3, [r7, #18]
 8106832:	00db      	lsls	r3, r3, #3
 8106834:	4413      	add	r3, r2
 8106836:	3304      	adds	r3, #4
 8106838:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 810683a:	897a      	ldrh	r2, [r7, #10]
 810683c:	697b      	ldr	r3, [r7, #20]
 810683e:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8106840:	697b      	ldr	r3, [r7, #20]
 8106842:	687a      	ldr	r2, [r7, #4]
 8106844:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8106846:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 810684a:	68fb      	ldr	r3, [r7, #12]
 810684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810684e:	885a      	ldrh	r2, [r3, #2]
 8106850:	3201      	adds	r2, #1
 8106852:	b292      	uxth	r2, r2
 8106854:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8106856:	2300      	movs	r3, #0
}
 8106858:	4618      	mov	r0, r3
 810685a:	371c      	adds	r7, #28
 810685c:	46bd      	mov	sp, r7
 810685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106862:	4770      	bx	lr
 8106864:	fffff441 	.word	0xfffff441

08106868 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8106868:	b480      	push	{r7}
 810686a:	b083      	sub	sp, #12
 810686c:	af00      	add	r7, sp, #0
 810686e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	68db      	ldr	r3, [r3, #12]
 8106874:	f003 0302 	and.w	r3, r3, #2
 8106878:	2b00      	cmp	r3, #0
 810687a:	d010      	beq.n	810689e <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	895b      	ldrh	r3, [r3, #10]
 8106884:	1ad3      	subs	r3, r2, r3
 8106886:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	6a1a      	ldr	r2, [r3, #32]
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8106890:	3901      	subs	r1, #1
 8106892:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8106894:	005b      	lsls	r3, r3, #1
 8106896:	4413      	add	r3, r2
 8106898:	460a      	mov	r2, r1
 810689a:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 810689c:	e008      	b.n	81068b0 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	6a1b      	ldr	r3, [r3, #32]
 81068a2:	881a      	ldrh	r2, [r3, #0]
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	6a1b      	ldr	r3, [r3, #32]
 81068a8:	f042 0201 	orr.w	r2, r2, #1
 81068ac:	b292      	uxth	r2, r2
 81068ae:	801a      	strh	r2, [r3, #0]
}
 81068b0:	bf00      	nop
 81068b2:	370c      	adds	r7, #12
 81068b4:	46bd      	mov	sp, r7
 81068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068ba:	4770      	bx	lr

081068bc <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 81068bc:	b580      	push	{r7, lr}
 81068be:	b082      	sub	sp, #8
 81068c0:	af00      	add	r7, sp, #0
 81068c2:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 81068c4:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 81068c8:	6878      	ldr	r0, [r7, #4]
 81068ca:	f000 f885 	bl	81069d8 <vq_ring_must_notify_host>
 81068ce:	4603      	mov	r3, r0
 81068d0:	2b00      	cmp	r3, #0
 81068d2:	d002      	beq.n	81068da <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 81068d4:	6878      	ldr	r0, [r7, #4]
 81068d6:	f000 f8b5 	bl	8106a44 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	2200      	movs	r2, #0
 81068de:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 81068e0:	bf00      	nop
 81068e2:	3708      	adds	r7, #8
 81068e4:	46bd      	mov	sp, r7
 81068e6:	bd80      	pop	{r7, pc}

081068e8 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 81068e8:	b480      	push	{r7}
 81068ea:	b085      	sub	sp, #20
 81068ec:	af00      	add	r7, sp, #0
 81068ee:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 81068f0:	2300      	movs	r3, #0
 81068f2:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 81068f4:	2300      	movs	r3, #0
 81068f6:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 81068f8:	2300      	movs	r3, #0
 81068fa:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	6a1b      	ldr	r3, [r3, #32]
 8106904:	885b      	ldrh	r3, [r3, #2]
 8106906:	429a      	cmp	r2, r3
 8106908:	d101      	bne.n	810690e <virtqueue_get_desc_size+0x26>
		return 0;
 810690a:	2300      	movs	r3, #0
 810690c:	e019      	b.n	8106942 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8106912:	b21a      	sxth	r2, r3
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	895b      	ldrh	r3, [r3, #10]
 8106918:	3b01      	subs	r3, #1
 810691a:	b29b      	uxth	r3, r3
 810691c:	b21b      	sxth	r3, r3
 810691e:	4013      	ands	r3, r2
 8106920:	b21b      	sxth	r3, r3
 8106922:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	6a1a      	ldr	r2, [r3, #32]
 8106928:	89fb      	ldrh	r3, [r7, #14]
 810692a:	005b      	lsls	r3, r3, #1
 810692c:	4413      	add	r3, r2
 810692e:	889b      	ldrh	r3, [r3, #4]
 8106930:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	69da      	ldr	r2, [r3, #28]
 8106936:	89bb      	ldrh	r3, [r7, #12]
 8106938:	011b      	lsls	r3, r3, #4
 810693a:	4413      	add	r3, r2
 810693c:	689b      	ldr	r3, [r3, #8]
 810693e:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8106940:	68bb      	ldr	r3, [r7, #8]
}
 8106942:	4618      	mov	r0, r3
 8106944:	3714      	adds	r7, #20
 8106946:	46bd      	mov	sp, r7
 8106948:	f85d 7b04 	ldr.w	r7, [sp], #4
 810694c:	4770      	bx	lr

0810694e <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 810694e:	b580      	push	{r7, lr}
 8106950:	b088      	sub	sp, #32
 8106952:	af00      	add	r7, sp, #0
 8106954:	60f8      	str	r0, [r7, #12]
 8106956:	60b9      	str	r1, [r7, #8]
 8106958:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 810695a:	68fb      	ldr	r3, [r7, #12]
 810695c:	895b      	ldrh	r3, [r3, #10]
 810695e:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8106960:	68fb      	ldr	r3, [r7, #12]
 8106962:	3318      	adds	r3, #24
 8106964:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8106966:	69b9      	ldr	r1, [r7, #24]
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	68ba      	ldr	r2, [r7, #8]
 810696c:	6978      	ldr	r0, [r7, #20]
 810696e:	f7ff fde3 	bl	8106538 <vring_init>

	for (i = 0; i < size - 1; i++)
 8106972:	2300      	movs	r3, #0
 8106974:	61fb      	str	r3, [r7, #28]
 8106976:	e00c      	b.n	8106992 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8106978:	69fb      	ldr	r3, [r7, #28]
 810697a:	b29a      	uxth	r2, r3
 810697c:	697b      	ldr	r3, [r7, #20]
 810697e:	6859      	ldr	r1, [r3, #4]
 8106980:	69fb      	ldr	r3, [r7, #28]
 8106982:	011b      	lsls	r3, r3, #4
 8106984:	440b      	add	r3, r1
 8106986:	3201      	adds	r2, #1
 8106988:	b292      	uxth	r2, r2
 810698a:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 810698c:	69fb      	ldr	r3, [r7, #28]
 810698e:	3301      	adds	r3, #1
 8106990:	61fb      	str	r3, [r7, #28]
 8106992:	69bb      	ldr	r3, [r7, #24]
 8106994:	3b01      	subs	r3, #1
 8106996:	69fa      	ldr	r2, [r7, #28]
 8106998:	429a      	cmp	r2, r3
 810699a:	dbed      	blt.n	8106978 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 810699c:	697b      	ldr	r3, [r7, #20]
 810699e:	685a      	ldr	r2, [r3, #4]
 81069a0:	69fb      	ldr	r3, [r7, #28]
 81069a2:	011b      	lsls	r3, r3, #4
 81069a4:	4413      	add	r3, r2
 81069a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 81069aa:	81da      	strh	r2, [r3, #14]
}
 81069ac:	bf00      	nop
 81069ae:	3720      	adds	r7, #32
 81069b0:	46bd      	mov	sp, r7
 81069b2:	bd80      	pop	{r7, pc}

081069b4 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 81069b4:	b580      	push	{r7, lr}
 81069b6:	b082      	sub	sp, #8
 81069b8:	af00      	add	r7, sp, #0
 81069ba:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 81069bc:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	691b      	ldr	r3, [r3, #16]
 81069c4:	2b00      	cmp	r3, #0
 81069c6:	d003      	beq.n	81069d0 <virtqueue_notification+0x1c>
		vq->callback(vq);
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	691b      	ldr	r3, [r3, #16]
 81069cc:	6878      	ldr	r0, [r7, #4]
 81069ce:	4798      	blx	r3
}
 81069d0:	bf00      	nop
 81069d2:	3708      	adds	r7, #8
 81069d4:	46bd      	mov	sp, r7
 81069d6:	bd80      	pop	{r7, pc}

081069d8 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 81069d8:	b580      	push	{r7, lr}
 81069da:	b084      	sub	sp, #16
 81069dc:	af00      	add	r7, sp, #0
 81069de:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	68db      	ldr	r3, [r3, #12]
 81069e4:	f003 0302 	and.w	r3, r3, #2
 81069e8:	2b00      	cmp	r3, #0
 81069ea:	d01d      	beq.n	8106a28 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	6a1b      	ldr	r3, [r3, #32]
 81069f0:	885b      	ldrh	r3, [r3, #2]
 81069f2:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81069f8:	89fa      	ldrh	r2, [r7, #14]
 81069fa:	1ad3      	subs	r3, r2, r3
 81069fc:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106a02:	687b      	ldr	r3, [r7, #4]
 8106a04:	699b      	ldr	r3, [r3, #24]
 8106a06:	00db      	lsls	r3, r3, #3
 8106a08:	4413      	add	r3, r2
 8106a0a:	685b      	ldr	r3, [r3, #4]
 8106a0c:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8106a0e:	89ba      	ldrh	r2, [r7, #12]
 8106a10:	89f9      	ldrh	r1, [r7, #14]
 8106a12:	897b      	ldrh	r3, [r7, #10]
 8106a14:	4618      	mov	r0, r3
 8106a16:	f7ff fdb8 	bl	810658a <vring_need_event>
 8106a1a:	4603      	mov	r3, r0
 8106a1c:	2b00      	cmp	r3, #0
 8106a1e:	bf14      	ite	ne
 8106a20:	2301      	movne	r3, #1
 8106a22:	2300      	moveq	r3, #0
 8106a24:	b2db      	uxtb	r3, r3
 8106a26:	e009      	b.n	8106a3c <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a2c:	881b      	ldrh	r3, [r3, #0]
 8106a2e:	f003 0301 	and.w	r3, r3, #1
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	bf0c      	ite	eq
 8106a36:	2301      	moveq	r3, #1
 8106a38:	2300      	movne	r3, #0
 8106a3a:	b2db      	uxtb	r3, r3
}
 8106a3c:	4618      	mov	r0, r3
 8106a3e:	3710      	adds	r7, #16
 8106a40:	46bd      	mov	sp, r7
 8106a42:	bd80      	pop	{r7, pc}

08106a44 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8106a44:	b580      	push	{r7, lr}
 8106a46:	b082      	sub	sp, #8
 8106a48:	af00      	add	r7, sp, #0
 8106a4a:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	695b      	ldr	r3, [r3, #20]
 8106a50:	2b00      	cmp	r3, #0
 8106a52:	d003      	beq.n	8106a5c <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8106a54:	687b      	ldr	r3, [r7, #4]
 8106a56:	695b      	ldr	r3, [r3, #20]
 8106a58:	6878      	ldr	r0, [r7, #4]
 8106a5a:	4798      	blx	r3
}
 8106a5c:	bf00      	nop
 8106a5e:	3708      	adds	r7, #8
 8106a60:	46bd      	mov	sp, r7
 8106a62:	bd80      	pop	{r7, pc}

08106a64 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8106a64:	b580      	push	{r7, lr}
 8106a66:	b082      	sub	sp, #8
 8106a68:	af00      	add	r7, sp, #0
 8106a6a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8106a6c:	4b04      	ldr	r3, [pc, #16]	; (8106a80 <HAL_HSEM_FreeCallback+0x1c>)
 8106a6e:	2201      	movs	r2, #1
 8106a70:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106a72:	2001      	movs	r0, #1
 8106a74:	f7fa fd96 	bl	81015a4 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8106a78:	bf00      	nop
 8106a7a:	3708      	adds	r7, #8
 8106a7c:	46bd      	mov	sp, r7
 8106a7e:	bd80      	pop	{r7, pc}
 8106a80:	100002bc 	.word	0x100002bc

08106a84 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8106a84:	b580      	push	{r7, lr}
 8106a86:	b082      	sub	sp, #8
 8106a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8106a8a:	4b0b      	ldr	r3, [pc, #44]	; (8106ab8 <MAILBOX_Init+0x34>)
 8106a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106a90:	4a09      	ldr	r2, [pc, #36]	; (8106ab8 <MAILBOX_Init+0x34>)
 8106a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8106a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8106a9a:	4b07      	ldr	r3, [pc, #28]	; (8106ab8 <MAILBOX_Init+0x34>)
 8106a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8106aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106aa4:	607b      	str	r3, [r7, #4]
 8106aa6:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8106aa8:	2001      	movs	r0, #1
 8106aaa:	f7fa fd7b 	bl	81015a4 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8106aae:	2300      	movs	r3, #0
}
 8106ab0:	4618      	mov	r0, r3
 8106ab2:	3708      	adds	r7, #8
 8106ab4:	46bd      	mov	sp, r7
 8106ab6:	bd80      	pop	{r7, pc}
 8106ab8:	58024400 	.word	0x58024400

08106abc <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8106abc:	b580      	push	{r7, lr}
 8106abe:	b082      	sub	sp, #8
 8106ac0:	af00      	add	r7, sp, #0
 8106ac2:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8106ac4:	4b09      	ldr	r3, [pc, #36]	; (8106aec <MAILBOX_Poll+0x30>)
 8106ac6:	681b      	ldr	r3, [r3, #0]
 8106ac8:	2b01      	cmp	r3, #1
 8106aca:	d108      	bne.n	8106ade <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8106acc:	2101      	movs	r1, #1
 8106ace:	6878      	ldr	r0, [r7, #4]
 8106ad0:	f7fe fd27 	bl	8105522 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8106ad4:	4b05      	ldr	r3, [pc, #20]	; (8106aec <MAILBOX_Poll+0x30>)
 8106ad6:	2200      	movs	r2, #0
 8106ad8:	601a      	str	r2, [r3, #0]
    return 0;
 8106ada:	2300      	movs	r3, #0
 8106adc:	e001      	b.n	8106ae2 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8106ade:	f06f 030a 	mvn.w	r3, #10
}
 8106ae2:	4618      	mov	r0, r3
 8106ae4:	3708      	adds	r7, #8
 8106ae6:	46bd      	mov	sp, r7
 8106ae8:	bd80      	pop	{r7, pc}
 8106aea:	bf00      	nop
 8106aec:	100002bc 	.word	0x100002bc

08106af0 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8106af0:	b580      	push	{r7, lr}
 8106af2:	b082      	sub	sp, #8
 8106af4:	af00      	add	r7, sp, #0
 8106af6:	6078      	str	r0, [r7, #4]
 8106af8:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8106afa:	2001      	movs	r0, #1
 8106afc:	f7fa fd24 	bl	8101548 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8106b00:	2100      	movs	r1, #0
 8106b02:	2001      	movs	r0, #1
 8106b04:	f7fa fd3a 	bl	810157c <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8106b08:	2300      	movs	r3, #0
}
 8106b0a:	4618      	mov	r0, r3
 8106b0c:	3708      	adds	r7, #8
 8106b0e:	46bd      	mov	sp, r7
 8106b10:	bd80      	pop	{r7, pc}

08106b12 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8106b12:	b480      	push	{r7}
 8106b14:	b083      	sub	sp, #12
 8106b16:	af00      	add	r7, sp, #0
 8106b18:	6078      	str	r0, [r7, #4]
 8106b1a:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8106b20:	683a      	ldr	r2, [r7, #0]
 8106b22:	429a      	cmp	r2, r3
 8106b24:	d209      	bcs.n	8106b3a <metal_device_io_region+0x28>
 8106b26:	683a      	ldr	r2, [r7, #0]
 8106b28:	4613      	mov	r3, r2
 8106b2a:	005b      	lsls	r3, r3, #1
 8106b2c:	4413      	add	r3, r2
 8106b2e:	011b      	lsls	r3, r3, #4
 8106b30:	3308      	adds	r3, #8
 8106b32:	687a      	ldr	r2, [r7, #4]
 8106b34:	4413      	add	r3, r2
 8106b36:	3304      	adds	r3, #4
 8106b38:	e000      	b.n	8106b3c <metal_device_io_region+0x2a>
 8106b3a:	2300      	movs	r3, #0
}
 8106b3c:	4618      	mov	r0, r3
 8106b3e:	370c      	adds	r7, #12
 8106b40:	46bd      	mov	sp, r7
 8106b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b46:	4770      	bx	lr

08106b48 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8106b48:	b590      	push	{r4, r7, lr}
 8106b4a:	b08d      	sub	sp, #52	; 0x34
 8106b4c:	af04      	add	r7, sp, #16
 8106b4e:	6078      	str	r0, [r7, #4]
  int status = 0;
 8106b50:	2300      	movs	r3, #0
 8106b52:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8106b54:	2300      	movs	r3, #0
 8106b56:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8106b58:	4a41      	ldr	r2, [pc, #260]	; (8106c60 <OPENAMP_shmem_init+0x118>)
 8106b5a:	f107 0310 	add.w	r3, r7, #16
 8106b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8106b62:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8106b66:	2300      	movs	r3, #0
 8106b68:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8106b6a:	2300      	movs	r3, #0
 8106b6c:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8106b6e:	f107 0310 	add.w	r3, r7, #16
 8106b72:	4618      	mov	r0, r3
 8106b74:	f7fe f8e8 	bl	8104d48 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8106b78:	483a      	ldr	r0, [pc, #232]	; (8106c64 <OPENAMP_shmem_init+0x11c>)
 8106b7a:	f7fd ff8d 	bl	8104a98 <metal_register_generic_device>
 8106b7e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106b80:	69fb      	ldr	r3, [r7, #28]
 8106b82:	2b00      	cmp	r3, #0
 8106b84:	d001      	beq.n	8106b8a <OPENAMP_shmem_init+0x42>
    return status;
 8106b86:	69fb      	ldr	r3, [r7, #28]
 8106b88:	e066      	b.n	8106c58 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8106b8a:	f107 0318 	add.w	r3, r7, #24
 8106b8e:	461a      	mov	r2, r3
 8106b90:	4935      	ldr	r1, [pc, #212]	; (8106c68 <OPENAMP_shmem_init+0x120>)
 8106b92:	4836      	ldr	r0, [pc, #216]	; (8106c6c <OPENAMP_shmem_init+0x124>)
 8106b94:	f7fd ff42 	bl	8104a1c <metal_device_open>
 8106b98:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8106b9a:	69fb      	ldr	r3, [r7, #28]
 8106b9c:	2b00      	cmp	r3, #0
 8106b9e:	d001      	beq.n	8106ba4 <OPENAMP_shmem_init+0x5c>
    return status;
 8106ba0:	69fb      	ldr	r3, [r7, #28]
 8106ba2:	e059      	b.n	8106c58 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8106ba4:	4a32      	ldr	r2, [pc, #200]	; (8106c70 <OPENAMP_shmem_init+0x128>)
 8106ba6:	4b33      	ldr	r3, [pc, #204]	; (8106c74 <OPENAMP_shmem_init+0x12c>)
 8106ba8:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106baa:	69bb      	ldr	r3, [r7, #24]
 8106bac:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8106bb0:	4a31      	ldr	r2, [pc, #196]	; (8106c78 <OPENAMP_shmem_init+0x130>)
 8106bb2:	4b2f      	ldr	r3, [pc, #188]	; (8106c70 <OPENAMP_shmem_init+0x128>)
 8106bb4:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8106bb6:	461a      	mov	r2, r3
 8106bb8:	2300      	movs	r3, #0
 8106bba:	9302      	str	r3, [sp, #8]
 8106bbc:	2300      	movs	r3, #0
 8106bbe:	9301      	str	r3, [sp, #4]
 8106bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8106bc4:	9300      	str	r3, [sp, #0]
 8106bc6:	4613      	mov	r3, r2
 8106bc8:	4a2a      	ldr	r2, [pc, #168]	; (8106c74 <OPENAMP_shmem_init+0x12c>)
 8106bca:	4929      	ldr	r1, [pc, #164]	; (8106c70 <OPENAMP_shmem_init+0x128>)
 8106bcc:	f7fe f909 	bl	8104de2 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8106bd0:	69bb      	ldr	r3, [r7, #24]
 8106bd2:	2100      	movs	r1, #0
 8106bd4:	4618      	mov	r0, r3
 8106bd6:	f7ff ff9c 	bl	8106b12 <metal_device_io_region>
 8106bda:	4603      	mov	r3, r0
 8106bdc:	4a27      	ldr	r2, [pc, #156]	; (8106c7c <OPENAMP_shmem_init+0x134>)
 8106bde:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8106be0:	4b26      	ldr	r3, [pc, #152]	; (8106c7c <OPENAMP_shmem_init+0x134>)
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	2b00      	cmp	r3, #0
 8106be6:	d102      	bne.n	8106bee <OPENAMP_shmem_init+0xa6>
    return -1;
 8106be8:	f04f 33ff 	mov.w	r3, #4294967295
 8106bec:	e034      	b.n	8106c58 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8106bee:	f107 0208 	add.w	r2, r7, #8
 8106bf2:	f107 030c 	add.w	r3, r7, #12
 8106bf6:	4619      	mov	r1, r3
 8106bf8:	6878      	ldr	r0, [r7, #4]
 8106bfa:	f000 f905 	bl	8106e08 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	4a1f      	ldr	r2, [pc, #124]	; (8106c80 <OPENAMP_shmem_init+0x138>)
 8106c02:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8106c04:	4b1e      	ldr	r3, [pc, #120]	; (8106c80 <OPENAMP_shmem_init+0x138>)
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	2b00      	cmp	r3, #0
 8106c0a:	d102      	bne.n	8106c12 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8106c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8106c10:	e022      	b.n	8106c58 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8106c12:	69bb      	ldr	r3, [r7, #24]
 8106c14:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8106c18:	4b19      	ldr	r3, [pc, #100]	; (8106c80 <OPENAMP_shmem_init+0x138>)
 8106c1a:	6819      	ldr	r1, [r3, #0]
 8106c1c:	4b18      	ldr	r3, [pc, #96]	; (8106c80 <OPENAMP_shmem_init+0x138>)
 8106c1e:	681a      	ldr	r2, [r3, #0]
 8106c20:	68bb      	ldr	r3, [r7, #8]
 8106c22:	461c      	mov	r4, r3
 8106c24:	2300      	movs	r3, #0
 8106c26:	9302      	str	r3, [sp, #8]
 8106c28:	2300      	movs	r3, #0
 8106c2a:	9301      	str	r3, [sp, #4]
 8106c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8106c30:	9300      	str	r3, [sp, #0]
 8106c32:	4623      	mov	r3, r4
 8106c34:	f7fe f8d5 	bl	8104de2 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8106c38:	69bb      	ldr	r3, [r7, #24]
 8106c3a:	2101      	movs	r1, #1
 8106c3c:	4618      	mov	r0, r3
 8106c3e:	f7ff ff68 	bl	8106b12 <metal_device_io_region>
 8106c42:	4603      	mov	r3, r0
 8106c44:	4a0f      	ldr	r2, [pc, #60]	; (8106c84 <OPENAMP_shmem_init+0x13c>)
 8106c46:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8106c48:	4b0e      	ldr	r3, [pc, #56]	; (8106c84 <OPENAMP_shmem_init+0x13c>)
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	2b00      	cmp	r3, #0
 8106c4e:	d102      	bne.n	8106c56 <OPENAMP_shmem_init+0x10e>
    return -1;
 8106c50:	f04f 33ff 	mov.w	r3, #4294967295
 8106c54:	e000      	b.n	8106c58 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8106c56:	2300      	movs	r3, #0
}
 8106c58:	4618      	mov	r0, r3
 8106c5a:	3724      	adds	r7, #36	; 0x24
 8106c5c:	46bd      	mov	sp, r7
 8106c5e:	bd90      	pop	{r4, r7, pc}
 8106c60:	08108138 	.word	0x08108138
 8106c64:	1000003c 	.word	0x1000003c
 8106c68:	08108124 	.word	0x08108124
 8106c6c:	08108130 	.word	0x08108130
 8106c70:	38000400 	.word	0x38000400
 8106c74:	10000350 	.word	0x10000350
 8106c78:	38010000 	.word	0x38010000
 8106c7c:	100002c0 	.word	0x100002c0
 8106c80:	100002c8 	.word	0x100002c8
 8106c84:	100002c4 	.word	0x100002c4

08106c88 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8106c88:	b590      	push	{r4, r7, lr}
 8106c8a:	b08b      	sub	sp, #44	; 0x2c
 8106c8c:	af04      	add	r7, sp, #16
 8106c8e:	6078      	str	r0, [r7, #4]
 8106c90:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8106c92:	2300      	movs	r3, #0
 8106c94:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8106c96:	2300      	movs	r3, #0
 8106c98:	613b      	str	r3, [r7, #16]
  int status = 0;
 8106c9a:	2300      	movs	r3, #0
 8106c9c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8106c9e:	f7ff fef1 	bl	8106a84 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8106ca2:	6878      	ldr	r0, [r7, #4]
 8106ca4:	f7ff ff50 	bl	8106b48 <OPENAMP_shmem_init>
 8106ca8:	60f8      	str	r0, [r7, #12]
  if(status)
 8106caa:	68fb      	ldr	r3, [r7, #12]
 8106cac:	2b00      	cmp	r3, #0
 8106cae:	d001      	beq.n	8106cb4 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8106cb0:	68fb      	ldr	r3, [r7, #12]
 8106cb2:	e06a      	b.n	8106d8a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8106cb4:	6878      	ldr	r0, [r7, #4]
 8106cb6:	4b37      	ldr	r3, [pc, #220]	; (8106d94 <MX_OPENAMP_Init+0x10c>)
 8106cb8:	681b      	ldr	r3, [r3, #0]
 8106cba:	f103 0218 	add.w	r2, r3, #24
 8106cbe:	4b36      	ldr	r3, [pc, #216]	; (8106d98 <MX_OPENAMP_Init+0x110>)
 8106cc0:	681b      	ldr	r3, [r3, #0]
 8106cc2:	2100      	movs	r1, #0
 8106cc4:	9102      	str	r1, [sp, #8]
 8106cc6:	4935      	ldr	r1, [pc, #212]	; (8106d9c <MX_OPENAMP_Init+0x114>)
 8106cc8:	9101      	str	r1, [sp, #4]
 8106cca:	2100      	movs	r1, #0
 8106ccc:	9100      	str	r1, [sp, #0]
 8106cce:	21ff      	movs	r1, #255	; 0xff
 8106cd0:	f7fe fb48 	bl	8105364 <rproc_virtio_create_vdev>
 8106cd4:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8106cd6:	693b      	ldr	r3, [r7, #16]
 8106cd8:	2b00      	cmp	r3, #0
 8106cda:	d102      	bne.n	8106ce2 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8106cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8106ce0:	e053      	b.n	8106d8a <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8106ce2:	6938      	ldr	r0, [r7, #16]
 8106ce4:	f7fe fc59 	bl	810559a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8106ce8:	4b2a      	ldr	r3, [pc, #168]	; (8106d94 <MX_OPENAMP_Init+0x10c>)
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	3334      	adds	r3, #52	; 0x34
 8106cee:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8106cf0:	697b      	ldr	r3, [r7, #20]
 8106cf2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8106cf4:	697b      	ldr	r3, [r7, #20]
 8106cf6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8106cf8:	461c      	mov	r4, r3
 8106cfa:	4b29      	ldr	r3, [pc, #164]	; (8106da0 <MX_OPENAMP_Init+0x118>)
 8106cfc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8106cfe:	697a      	ldr	r2, [r7, #20]
 8106d00:	6892      	ldr	r2, [r2, #8]
 8106d02:	6979      	ldr	r1, [r7, #20]
 8106d04:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8106d06:	9102      	str	r1, [sp, #8]
 8106d08:	9201      	str	r2, [sp, #4]
 8106d0a:	9300      	str	r3, [sp, #0]
 8106d0c:	4623      	mov	r3, r4
 8106d0e:	4602      	mov	r2, r0
 8106d10:	2100      	movs	r1, #0
 8106d12:	6938      	ldr	r0, [r7, #16]
 8106d14:	f7fe fbd4 	bl	81054c0 <rproc_virtio_init_vring>
 8106d18:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8106d1a:	68fb      	ldr	r3, [r7, #12]
 8106d1c:	2b00      	cmp	r3, #0
 8106d1e:	d001      	beq.n	8106d24 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8106d20:	68fb      	ldr	r3, [r7, #12]
 8106d22:	e032      	b.n	8106d8a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8106d24:	4b1b      	ldr	r3, [pc, #108]	; (8106d94 <MX_OPENAMP_Init+0x10c>)
 8106d26:	681b      	ldr	r3, [r3, #0]
 8106d28:	3348      	adds	r3, #72	; 0x48
 8106d2a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8106d2c:	697b      	ldr	r3, [r7, #20]
 8106d2e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8106d30:	697b      	ldr	r3, [r7, #20]
 8106d32:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8106d34:	461c      	mov	r4, r3
 8106d36:	4b1a      	ldr	r3, [pc, #104]	; (8106da0 <MX_OPENAMP_Init+0x118>)
 8106d38:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8106d3a:	697a      	ldr	r2, [r7, #20]
 8106d3c:	6892      	ldr	r2, [r2, #8]
 8106d3e:	6979      	ldr	r1, [r7, #20]
 8106d40:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8106d42:	9102      	str	r1, [sp, #8]
 8106d44:	9201      	str	r2, [sp, #4]
 8106d46:	9300      	str	r3, [sp, #0]
 8106d48:	4623      	mov	r3, r4
 8106d4a:	4602      	mov	r2, r0
 8106d4c:	2101      	movs	r1, #1
 8106d4e:	6938      	ldr	r0, [r7, #16]
 8106d50:	f7fe fbb6 	bl	81054c0 <rproc_virtio_init_vring>
 8106d54:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8106d56:	68fb      	ldr	r3, [r7, #12]
 8106d58:	2b00      	cmp	r3, #0
 8106d5a:	d001      	beq.n	8106d60 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8106d5c:	68fb      	ldr	r3, [r7, #12]
 8106d5e:	e014      	b.n	8106d8a <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8106d60:	4b10      	ldr	r3, [pc, #64]	; (8106da4 <MX_OPENAMP_Init+0x11c>)
 8106d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8106d66:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8106d68:	4a0f      	ldr	r2, [pc, #60]	; (8106da8 <MX_OPENAMP_Init+0x120>)
 8106d6a:	4b0e      	ldr	r3, [pc, #56]	; (8106da4 <MX_OPENAMP_Init+0x11c>)
 8106d6c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8106d6e:	461a      	mov	r2, r3
 8106d70:	480e      	ldr	r0, [pc, #56]	; (8106dac <MX_OPENAMP_Init+0x124>)
 8106d72:	f7ff f861 	bl	8105e38 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8106d76:	4b0a      	ldr	r3, [pc, #40]	; (8106da0 <MX_OPENAMP_Init+0x118>)
 8106d78:	681b      	ldr	r3, [r3, #0]
 8106d7a:	4a0c      	ldr	r2, [pc, #48]	; (8106dac <MX_OPENAMP_Init+0x124>)
 8106d7c:	9200      	str	r2, [sp, #0]
 8106d7e:	683a      	ldr	r2, [r7, #0]
 8106d80:	6939      	ldr	r1, [r7, #16]
 8106d82:	480b      	ldr	r0, [pc, #44]	; (8106db0 <MX_OPENAMP_Init+0x128>)
 8106d84:	f7ff facc 	bl	8106320 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8106d88:	2300      	movs	r3, #0
}
 8106d8a:	4618      	mov	r0, r3
 8106d8c:	371c      	adds	r7, #28
 8106d8e:	46bd      	mov	sp, r7
 8106d90:	bd90      	pop	{r4, r7, pc}
 8106d92:	bf00      	nop
 8106d94:	100002c8 	.word	0x100002c8
 8106d98:	100002c4 	.word	0x100002c4
 8106d9c:	08106af1 	.word	0x08106af1
 8106da0:	100002c0 	.word	0x100002c0
 8106da4:	38000400 	.word	0x38000400
 8106da8:	38010000 	.word	0x38010000
 8106dac:	100002cc 	.word	0x100002cc
 8106db0:	100002d8 	.word	0x100002d8

08106db4 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8106db4:	b580      	push	{r7, lr}
 8106db6:	b08a      	sub	sp, #40	; 0x28
 8106db8:	af04      	add	r7, sp, #16
 8106dba:	60f8      	str	r0, [r7, #12]
 8106dbc:	60b9      	str	r1, [r7, #8]
 8106dbe:	607a      	str	r2, [r7, #4]
 8106dc0:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8106dc2:	2300      	movs	r3, #0
 8106dc4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8106dc6:	6a3b      	ldr	r3, [r7, #32]
 8106dc8:	9302      	str	r3, [sp, #8]
 8106dca:	683b      	ldr	r3, [r7, #0]
 8106dcc:	9301      	str	r3, [sp, #4]
 8106dce:	687b      	ldr	r3, [r7, #4]
 8106dd0:	9300      	str	r3, [sp, #0]
 8106dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8106dd6:	68ba      	ldr	r2, [r7, #8]
 8106dd8:	4904      	ldr	r1, [pc, #16]	; (8106dec <OPENAMP_create_endpoint+0x38>)
 8106dda:	68f8      	ldr	r0, [r7, #12]
 8106ddc:	f7fe fe6a 	bl	8105ab4 <rpmsg_create_ept>
 8106de0:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8106de2:	697b      	ldr	r3, [r7, #20]
}
 8106de4:	4618      	mov	r0, r3
 8106de6:	3718      	adds	r7, #24
 8106de8:	46bd      	mov	sp, r7
 8106dea:	bd80      	pop	{r7, pc}
 8106dec:	100002d8 	.word	0x100002d8

08106df0 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8106df0:	b580      	push	{r7, lr}
 8106df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8106df4:	4b03      	ldr	r3, [pc, #12]	; (8106e04 <OPENAMP_check_for_message+0x14>)
 8106df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106df8:	4618      	mov	r0, r3
 8106dfa:	f7ff fe5f 	bl	8106abc <MAILBOX_Poll>
}
 8106dfe:	bf00      	nop
 8106e00:	bd80      	pop	{r7, pc}
 8106e02:	bf00      	nop
 8106e04:	100002d8 	.word	0x100002d8

08106e08 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8106e08:	b480      	push	{r7}
 8106e0a:	b085      	sub	sp, #20
 8106e0c:	af00      	add	r7, sp, #0
 8106e0e:	60f8      	str	r0, [r7, #12]
 8106e10:	60b9      	str	r1, [r7, #8]
 8106e12:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 8106e14:	bf00      	nop
 8106e16:	4b08      	ldr	r3, [pc, #32]	; (8106e38 <resource_table_init+0x30>)
 8106e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106e1a:	4a08      	ldr	r2, [pc, #32]	; (8106e3c <resource_table_init+0x34>)
 8106e1c:	4293      	cmp	r3, r2
 8106e1e:	d1fa      	bne.n	8106e16 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	228c      	movs	r2, #140	; 0x8c
 8106e24:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8106e26:	68bb      	ldr	r3, [r7, #8]
 8106e28:	4a03      	ldr	r2, [pc, #12]	; (8106e38 <resource_table_init+0x30>)
 8106e2a:	601a      	str	r2, [r3, #0]
}
 8106e2c:	bf00      	nop
 8106e2e:	3714      	adds	r7, #20
 8106e30:	46bd      	mov	sp, r7
 8106e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e36:	4770      	bx	lr
 8106e38:	38000000 	.word	0x38000000
 8106e3c:	38000400 	.word	0x38000400

08106e40 <__assert_func>:
 8106e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8106e42:	4614      	mov	r4, r2
 8106e44:	461a      	mov	r2, r3
 8106e46:	4b09      	ldr	r3, [pc, #36]	; (8106e6c <__assert_func+0x2c>)
 8106e48:	681b      	ldr	r3, [r3, #0]
 8106e4a:	4605      	mov	r5, r0
 8106e4c:	68d8      	ldr	r0, [r3, #12]
 8106e4e:	b14c      	cbz	r4, 8106e64 <__assert_func+0x24>
 8106e50:	4b07      	ldr	r3, [pc, #28]	; (8106e70 <__assert_func+0x30>)
 8106e52:	9100      	str	r1, [sp, #0]
 8106e54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8106e58:	4906      	ldr	r1, [pc, #24]	; (8106e74 <__assert_func+0x34>)
 8106e5a:	462b      	mov	r3, r5
 8106e5c:	f000 f80e 	bl	8106e7c <fiprintf>
 8106e60:	f000 fd44 	bl	81078ec <abort>
 8106e64:	4b04      	ldr	r3, [pc, #16]	; (8106e78 <__assert_func+0x38>)
 8106e66:	461c      	mov	r4, r3
 8106e68:	e7f3      	b.n	8106e52 <__assert_func+0x12>
 8106e6a:	bf00      	nop
 8106e6c:	100000b8 	.word	0x100000b8
 8106e70:	081081ce 	.word	0x081081ce
 8106e74:	081081db 	.word	0x081081db
 8106e78:	08108209 	.word	0x08108209

08106e7c <fiprintf>:
 8106e7c:	b40e      	push	{r1, r2, r3}
 8106e7e:	b503      	push	{r0, r1, lr}
 8106e80:	4601      	mov	r1, r0
 8106e82:	ab03      	add	r3, sp, #12
 8106e84:	4805      	ldr	r0, [pc, #20]	; (8106e9c <fiprintf+0x20>)
 8106e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8106e8a:	6800      	ldr	r0, [r0, #0]
 8106e8c:	9301      	str	r3, [sp, #4]
 8106e8e:	f000 f95b 	bl	8107148 <_vfiprintf_r>
 8106e92:	b002      	add	sp, #8
 8106e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8106e98:	b003      	add	sp, #12
 8106e9a:	4770      	bx	lr
 8106e9c:	100000b8 	.word	0x100000b8

08106ea0 <__libc_init_array>:
 8106ea0:	b570      	push	{r4, r5, r6, lr}
 8106ea2:	4d0d      	ldr	r5, [pc, #52]	; (8106ed8 <__libc_init_array+0x38>)
 8106ea4:	4c0d      	ldr	r4, [pc, #52]	; (8106edc <__libc_init_array+0x3c>)
 8106ea6:	1b64      	subs	r4, r4, r5
 8106ea8:	10a4      	asrs	r4, r4, #2
 8106eaa:	2600      	movs	r6, #0
 8106eac:	42a6      	cmp	r6, r4
 8106eae:	d109      	bne.n	8106ec4 <__libc_init_array+0x24>
 8106eb0:	4d0b      	ldr	r5, [pc, #44]	; (8106ee0 <__libc_init_array+0x40>)
 8106eb2:	4c0c      	ldr	r4, [pc, #48]	; (8106ee4 <__libc_init_array+0x44>)
 8106eb4:	f001 f83e 	bl	8107f34 <_init>
 8106eb8:	1b64      	subs	r4, r4, r5
 8106eba:	10a4      	asrs	r4, r4, #2
 8106ebc:	2600      	movs	r6, #0
 8106ebe:	42a6      	cmp	r6, r4
 8106ec0:	d105      	bne.n	8106ece <__libc_init_array+0x2e>
 8106ec2:	bd70      	pop	{r4, r5, r6, pc}
 8106ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8106ec8:	4798      	blx	r3
 8106eca:	3601      	adds	r6, #1
 8106ecc:	e7ee      	b.n	8106eac <__libc_init_array+0xc>
 8106ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8106ed2:	4798      	blx	r3
 8106ed4:	3601      	adds	r6, #1
 8106ed6:	e7f2      	b.n	8106ebe <__libc_init_array+0x1e>
 8106ed8:	081082ac 	.word	0x081082ac
 8106edc:	081082ac 	.word	0x081082ac
 8106ee0:	081082ac 	.word	0x081082ac
 8106ee4:	081082b0 	.word	0x081082b0

08106ee8 <malloc>:
 8106ee8:	4b02      	ldr	r3, [pc, #8]	; (8106ef4 <malloc+0xc>)
 8106eea:	4601      	mov	r1, r0
 8106eec:	6818      	ldr	r0, [r3, #0]
 8106eee:	f000 b88d 	b.w	810700c <_malloc_r>
 8106ef2:	bf00      	nop
 8106ef4:	100000b8 	.word	0x100000b8

08106ef8 <free>:
 8106ef8:	4b02      	ldr	r3, [pc, #8]	; (8106f04 <free+0xc>)
 8106efa:	4601      	mov	r1, r0
 8106efc:	6818      	ldr	r0, [r3, #0]
 8106efe:	f000 b819 	b.w	8106f34 <_free_r>
 8106f02:	bf00      	nop
 8106f04:	100000b8 	.word	0x100000b8

08106f08 <memcpy>:
 8106f08:	440a      	add	r2, r1
 8106f0a:	4291      	cmp	r1, r2
 8106f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8106f10:	d100      	bne.n	8106f14 <memcpy+0xc>
 8106f12:	4770      	bx	lr
 8106f14:	b510      	push	{r4, lr}
 8106f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106f1e:	4291      	cmp	r1, r2
 8106f20:	d1f9      	bne.n	8106f16 <memcpy+0xe>
 8106f22:	bd10      	pop	{r4, pc}

08106f24 <memset>:
 8106f24:	4402      	add	r2, r0
 8106f26:	4603      	mov	r3, r0
 8106f28:	4293      	cmp	r3, r2
 8106f2a:	d100      	bne.n	8106f2e <memset+0xa>
 8106f2c:	4770      	bx	lr
 8106f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8106f32:	e7f9      	b.n	8106f28 <memset+0x4>

08106f34 <_free_r>:
 8106f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8106f36:	2900      	cmp	r1, #0
 8106f38:	d044      	beq.n	8106fc4 <_free_r+0x90>
 8106f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106f3e:	9001      	str	r0, [sp, #4]
 8106f40:	2b00      	cmp	r3, #0
 8106f42:	f1a1 0404 	sub.w	r4, r1, #4
 8106f46:	bfb8      	it	lt
 8106f48:	18e4      	addlt	r4, r4, r3
 8106f4a:	f000 fef7 	bl	8107d3c <__malloc_lock>
 8106f4e:	4a1e      	ldr	r2, [pc, #120]	; (8106fc8 <_free_r+0x94>)
 8106f50:	9801      	ldr	r0, [sp, #4]
 8106f52:	6813      	ldr	r3, [r2, #0]
 8106f54:	b933      	cbnz	r3, 8106f64 <_free_r+0x30>
 8106f56:	6063      	str	r3, [r4, #4]
 8106f58:	6014      	str	r4, [r2, #0]
 8106f5a:	b003      	add	sp, #12
 8106f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106f60:	f000 bef2 	b.w	8107d48 <__malloc_unlock>
 8106f64:	42a3      	cmp	r3, r4
 8106f66:	d908      	bls.n	8106f7a <_free_r+0x46>
 8106f68:	6825      	ldr	r5, [r4, #0]
 8106f6a:	1961      	adds	r1, r4, r5
 8106f6c:	428b      	cmp	r3, r1
 8106f6e:	bf01      	itttt	eq
 8106f70:	6819      	ldreq	r1, [r3, #0]
 8106f72:	685b      	ldreq	r3, [r3, #4]
 8106f74:	1949      	addeq	r1, r1, r5
 8106f76:	6021      	streq	r1, [r4, #0]
 8106f78:	e7ed      	b.n	8106f56 <_free_r+0x22>
 8106f7a:	461a      	mov	r2, r3
 8106f7c:	685b      	ldr	r3, [r3, #4]
 8106f7e:	b10b      	cbz	r3, 8106f84 <_free_r+0x50>
 8106f80:	42a3      	cmp	r3, r4
 8106f82:	d9fa      	bls.n	8106f7a <_free_r+0x46>
 8106f84:	6811      	ldr	r1, [r2, #0]
 8106f86:	1855      	adds	r5, r2, r1
 8106f88:	42a5      	cmp	r5, r4
 8106f8a:	d10b      	bne.n	8106fa4 <_free_r+0x70>
 8106f8c:	6824      	ldr	r4, [r4, #0]
 8106f8e:	4421      	add	r1, r4
 8106f90:	1854      	adds	r4, r2, r1
 8106f92:	42a3      	cmp	r3, r4
 8106f94:	6011      	str	r1, [r2, #0]
 8106f96:	d1e0      	bne.n	8106f5a <_free_r+0x26>
 8106f98:	681c      	ldr	r4, [r3, #0]
 8106f9a:	685b      	ldr	r3, [r3, #4]
 8106f9c:	6053      	str	r3, [r2, #4]
 8106f9e:	4421      	add	r1, r4
 8106fa0:	6011      	str	r1, [r2, #0]
 8106fa2:	e7da      	b.n	8106f5a <_free_r+0x26>
 8106fa4:	d902      	bls.n	8106fac <_free_r+0x78>
 8106fa6:	230c      	movs	r3, #12
 8106fa8:	6003      	str	r3, [r0, #0]
 8106faa:	e7d6      	b.n	8106f5a <_free_r+0x26>
 8106fac:	6825      	ldr	r5, [r4, #0]
 8106fae:	1961      	adds	r1, r4, r5
 8106fb0:	428b      	cmp	r3, r1
 8106fb2:	bf04      	itt	eq
 8106fb4:	6819      	ldreq	r1, [r3, #0]
 8106fb6:	685b      	ldreq	r3, [r3, #4]
 8106fb8:	6063      	str	r3, [r4, #4]
 8106fba:	bf04      	itt	eq
 8106fbc:	1949      	addeq	r1, r1, r5
 8106fbe:	6021      	streq	r1, [r4, #0]
 8106fc0:	6054      	str	r4, [r2, #4]
 8106fc2:	e7ca      	b.n	8106f5a <_free_r+0x26>
 8106fc4:	b003      	add	sp, #12
 8106fc6:	bd30      	pop	{r4, r5, pc}
 8106fc8:	10000354 	.word	0x10000354

08106fcc <sbrk_aligned>:
 8106fcc:	b570      	push	{r4, r5, r6, lr}
 8106fce:	4e0e      	ldr	r6, [pc, #56]	; (8107008 <sbrk_aligned+0x3c>)
 8106fd0:	460c      	mov	r4, r1
 8106fd2:	6831      	ldr	r1, [r6, #0]
 8106fd4:	4605      	mov	r5, r0
 8106fd6:	b911      	cbnz	r1, 8106fde <sbrk_aligned+0x12>
 8106fd8:	f000 fb7a 	bl	81076d0 <_sbrk_r>
 8106fdc:	6030      	str	r0, [r6, #0]
 8106fde:	4621      	mov	r1, r4
 8106fe0:	4628      	mov	r0, r5
 8106fe2:	f000 fb75 	bl	81076d0 <_sbrk_r>
 8106fe6:	1c43      	adds	r3, r0, #1
 8106fe8:	d00a      	beq.n	8107000 <sbrk_aligned+0x34>
 8106fea:	1cc4      	adds	r4, r0, #3
 8106fec:	f024 0403 	bic.w	r4, r4, #3
 8106ff0:	42a0      	cmp	r0, r4
 8106ff2:	d007      	beq.n	8107004 <sbrk_aligned+0x38>
 8106ff4:	1a21      	subs	r1, r4, r0
 8106ff6:	4628      	mov	r0, r5
 8106ff8:	f000 fb6a 	bl	81076d0 <_sbrk_r>
 8106ffc:	3001      	adds	r0, #1
 8106ffe:	d101      	bne.n	8107004 <sbrk_aligned+0x38>
 8107000:	f04f 34ff 	mov.w	r4, #4294967295
 8107004:	4620      	mov	r0, r4
 8107006:	bd70      	pop	{r4, r5, r6, pc}
 8107008:	10000358 	.word	0x10000358

0810700c <_malloc_r>:
 810700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107010:	1ccd      	adds	r5, r1, #3
 8107012:	f025 0503 	bic.w	r5, r5, #3
 8107016:	3508      	adds	r5, #8
 8107018:	2d0c      	cmp	r5, #12
 810701a:	bf38      	it	cc
 810701c:	250c      	movcc	r5, #12
 810701e:	2d00      	cmp	r5, #0
 8107020:	4607      	mov	r7, r0
 8107022:	db01      	blt.n	8107028 <_malloc_r+0x1c>
 8107024:	42a9      	cmp	r1, r5
 8107026:	d905      	bls.n	8107034 <_malloc_r+0x28>
 8107028:	230c      	movs	r3, #12
 810702a:	603b      	str	r3, [r7, #0]
 810702c:	2600      	movs	r6, #0
 810702e:	4630      	mov	r0, r6
 8107030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107034:	4e2e      	ldr	r6, [pc, #184]	; (81070f0 <_malloc_r+0xe4>)
 8107036:	f000 fe81 	bl	8107d3c <__malloc_lock>
 810703a:	6833      	ldr	r3, [r6, #0]
 810703c:	461c      	mov	r4, r3
 810703e:	bb34      	cbnz	r4, 810708e <_malloc_r+0x82>
 8107040:	4629      	mov	r1, r5
 8107042:	4638      	mov	r0, r7
 8107044:	f7ff ffc2 	bl	8106fcc <sbrk_aligned>
 8107048:	1c43      	adds	r3, r0, #1
 810704a:	4604      	mov	r4, r0
 810704c:	d14d      	bne.n	81070ea <_malloc_r+0xde>
 810704e:	6834      	ldr	r4, [r6, #0]
 8107050:	4626      	mov	r6, r4
 8107052:	2e00      	cmp	r6, #0
 8107054:	d140      	bne.n	81070d8 <_malloc_r+0xcc>
 8107056:	6823      	ldr	r3, [r4, #0]
 8107058:	4631      	mov	r1, r6
 810705a:	4638      	mov	r0, r7
 810705c:	eb04 0803 	add.w	r8, r4, r3
 8107060:	f000 fb36 	bl	81076d0 <_sbrk_r>
 8107064:	4580      	cmp	r8, r0
 8107066:	d13a      	bne.n	81070de <_malloc_r+0xd2>
 8107068:	6821      	ldr	r1, [r4, #0]
 810706a:	3503      	adds	r5, #3
 810706c:	1a6d      	subs	r5, r5, r1
 810706e:	f025 0503 	bic.w	r5, r5, #3
 8107072:	3508      	adds	r5, #8
 8107074:	2d0c      	cmp	r5, #12
 8107076:	bf38      	it	cc
 8107078:	250c      	movcc	r5, #12
 810707a:	4629      	mov	r1, r5
 810707c:	4638      	mov	r0, r7
 810707e:	f7ff ffa5 	bl	8106fcc <sbrk_aligned>
 8107082:	3001      	adds	r0, #1
 8107084:	d02b      	beq.n	81070de <_malloc_r+0xd2>
 8107086:	6823      	ldr	r3, [r4, #0]
 8107088:	442b      	add	r3, r5
 810708a:	6023      	str	r3, [r4, #0]
 810708c:	e00e      	b.n	81070ac <_malloc_r+0xa0>
 810708e:	6822      	ldr	r2, [r4, #0]
 8107090:	1b52      	subs	r2, r2, r5
 8107092:	d41e      	bmi.n	81070d2 <_malloc_r+0xc6>
 8107094:	2a0b      	cmp	r2, #11
 8107096:	d916      	bls.n	81070c6 <_malloc_r+0xba>
 8107098:	1961      	adds	r1, r4, r5
 810709a:	42a3      	cmp	r3, r4
 810709c:	6025      	str	r5, [r4, #0]
 810709e:	bf18      	it	ne
 81070a0:	6059      	strne	r1, [r3, #4]
 81070a2:	6863      	ldr	r3, [r4, #4]
 81070a4:	bf08      	it	eq
 81070a6:	6031      	streq	r1, [r6, #0]
 81070a8:	5162      	str	r2, [r4, r5]
 81070aa:	604b      	str	r3, [r1, #4]
 81070ac:	4638      	mov	r0, r7
 81070ae:	f104 060b 	add.w	r6, r4, #11
 81070b2:	f000 fe49 	bl	8107d48 <__malloc_unlock>
 81070b6:	f026 0607 	bic.w	r6, r6, #7
 81070ba:	1d23      	adds	r3, r4, #4
 81070bc:	1af2      	subs	r2, r6, r3
 81070be:	d0b6      	beq.n	810702e <_malloc_r+0x22>
 81070c0:	1b9b      	subs	r3, r3, r6
 81070c2:	50a3      	str	r3, [r4, r2]
 81070c4:	e7b3      	b.n	810702e <_malloc_r+0x22>
 81070c6:	6862      	ldr	r2, [r4, #4]
 81070c8:	42a3      	cmp	r3, r4
 81070ca:	bf0c      	ite	eq
 81070cc:	6032      	streq	r2, [r6, #0]
 81070ce:	605a      	strne	r2, [r3, #4]
 81070d0:	e7ec      	b.n	81070ac <_malloc_r+0xa0>
 81070d2:	4623      	mov	r3, r4
 81070d4:	6864      	ldr	r4, [r4, #4]
 81070d6:	e7b2      	b.n	810703e <_malloc_r+0x32>
 81070d8:	4634      	mov	r4, r6
 81070da:	6876      	ldr	r6, [r6, #4]
 81070dc:	e7b9      	b.n	8107052 <_malloc_r+0x46>
 81070de:	230c      	movs	r3, #12
 81070e0:	603b      	str	r3, [r7, #0]
 81070e2:	4638      	mov	r0, r7
 81070e4:	f000 fe30 	bl	8107d48 <__malloc_unlock>
 81070e8:	e7a1      	b.n	810702e <_malloc_r+0x22>
 81070ea:	6025      	str	r5, [r4, #0]
 81070ec:	e7de      	b.n	81070ac <_malloc_r+0xa0>
 81070ee:	bf00      	nop
 81070f0:	10000354 	.word	0x10000354

081070f4 <__sfputc_r>:
 81070f4:	6893      	ldr	r3, [r2, #8]
 81070f6:	3b01      	subs	r3, #1
 81070f8:	2b00      	cmp	r3, #0
 81070fa:	b410      	push	{r4}
 81070fc:	6093      	str	r3, [r2, #8]
 81070fe:	da08      	bge.n	8107112 <__sfputc_r+0x1e>
 8107100:	6994      	ldr	r4, [r2, #24]
 8107102:	42a3      	cmp	r3, r4
 8107104:	db01      	blt.n	810710a <__sfputc_r+0x16>
 8107106:	290a      	cmp	r1, #10
 8107108:	d103      	bne.n	8107112 <__sfputc_r+0x1e>
 810710a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810710e:	f000 bb2d 	b.w	810776c <__swbuf_r>
 8107112:	6813      	ldr	r3, [r2, #0]
 8107114:	1c58      	adds	r0, r3, #1
 8107116:	6010      	str	r0, [r2, #0]
 8107118:	7019      	strb	r1, [r3, #0]
 810711a:	4608      	mov	r0, r1
 810711c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107120:	4770      	bx	lr

08107122 <__sfputs_r>:
 8107122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107124:	4606      	mov	r6, r0
 8107126:	460f      	mov	r7, r1
 8107128:	4614      	mov	r4, r2
 810712a:	18d5      	adds	r5, r2, r3
 810712c:	42ac      	cmp	r4, r5
 810712e:	d101      	bne.n	8107134 <__sfputs_r+0x12>
 8107130:	2000      	movs	r0, #0
 8107132:	e007      	b.n	8107144 <__sfputs_r+0x22>
 8107134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107138:	463a      	mov	r2, r7
 810713a:	4630      	mov	r0, r6
 810713c:	f7ff ffda 	bl	81070f4 <__sfputc_r>
 8107140:	1c43      	adds	r3, r0, #1
 8107142:	d1f3      	bne.n	810712c <__sfputs_r+0xa>
 8107144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08107148 <_vfiprintf_r>:
 8107148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810714c:	460d      	mov	r5, r1
 810714e:	b09d      	sub	sp, #116	; 0x74
 8107150:	4614      	mov	r4, r2
 8107152:	4698      	mov	r8, r3
 8107154:	4606      	mov	r6, r0
 8107156:	b118      	cbz	r0, 8107160 <_vfiprintf_r+0x18>
 8107158:	6983      	ldr	r3, [r0, #24]
 810715a:	b90b      	cbnz	r3, 8107160 <_vfiprintf_r+0x18>
 810715c:	f000 fce8 	bl	8107b30 <__sinit>
 8107160:	4b89      	ldr	r3, [pc, #548]	; (8107388 <_vfiprintf_r+0x240>)
 8107162:	429d      	cmp	r5, r3
 8107164:	d11b      	bne.n	810719e <_vfiprintf_r+0x56>
 8107166:	6875      	ldr	r5, [r6, #4]
 8107168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810716a:	07d9      	lsls	r1, r3, #31
 810716c:	d405      	bmi.n	810717a <_vfiprintf_r+0x32>
 810716e:	89ab      	ldrh	r3, [r5, #12]
 8107170:	059a      	lsls	r2, r3, #22
 8107172:	d402      	bmi.n	810717a <_vfiprintf_r+0x32>
 8107174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107176:	f000 fd79 	bl	8107c6c <__retarget_lock_acquire_recursive>
 810717a:	89ab      	ldrh	r3, [r5, #12]
 810717c:	071b      	lsls	r3, r3, #28
 810717e:	d501      	bpl.n	8107184 <_vfiprintf_r+0x3c>
 8107180:	692b      	ldr	r3, [r5, #16]
 8107182:	b9eb      	cbnz	r3, 81071c0 <_vfiprintf_r+0x78>
 8107184:	4629      	mov	r1, r5
 8107186:	4630      	mov	r0, r6
 8107188:	f000 fb42 	bl	8107810 <__swsetup_r>
 810718c:	b1c0      	cbz	r0, 81071c0 <_vfiprintf_r+0x78>
 810718e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107190:	07dc      	lsls	r4, r3, #31
 8107192:	d50e      	bpl.n	81071b2 <_vfiprintf_r+0x6a>
 8107194:	f04f 30ff 	mov.w	r0, #4294967295
 8107198:	b01d      	add	sp, #116	; 0x74
 810719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810719e:	4b7b      	ldr	r3, [pc, #492]	; (810738c <_vfiprintf_r+0x244>)
 81071a0:	429d      	cmp	r5, r3
 81071a2:	d101      	bne.n	81071a8 <_vfiprintf_r+0x60>
 81071a4:	68b5      	ldr	r5, [r6, #8]
 81071a6:	e7df      	b.n	8107168 <_vfiprintf_r+0x20>
 81071a8:	4b79      	ldr	r3, [pc, #484]	; (8107390 <_vfiprintf_r+0x248>)
 81071aa:	429d      	cmp	r5, r3
 81071ac:	bf08      	it	eq
 81071ae:	68f5      	ldreq	r5, [r6, #12]
 81071b0:	e7da      	b.n	8107168 <_vfiprintf_r+0x20>
 81071b2:	89ab      	ldrh	r3, [r5, #12]
 81071b4:	0598      	lsls	r0, r3, #22
 81071b6:	d4ed      	bmi.n	8107194 <_vfiprintf_r+0x4c>
 81071b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81071ba:	f000 fd58 	bl	8107c6e <__retarget_lock_release_recursive>
 81071be:	e7e9      	b.n	8107194 <_vfiprintf_r+0x4c>
 81071c0:	2300      	movs	r3, #0
 81071c2:	9309      	str	r3, [sp, #36]	; 0x24
 81071c4:	2320      	movs	r3, #32
 81071c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81071ca:	f8cd 800c 	str.w	r8, [sp, #12]
 81071ce:	2330      	movs	r3, #48	; 0x30
 81071d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8107394 <_vfiprintf_r+0x24c>
 81071d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81071d8:	f04f 0901 	mov.w	r9, #1
 81071dc:	4623      	mov	r3, r4
 81071de:	469a      	mov	sl, r3
 81071e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 81071e4:	b10a      	cbz	r2, 81071ea <_vfiprintf_r+0xa2>
 81071e6:	2a25      	cmp	r2, #37	; 0x25
 81071e8:	d1f9      	bne.n	81071de <_vfiprintf_r+0x96>
 81071ea:	ebba 0b04 	subs.w	fp, sl, r4
 81071ee:	d00b      	beq.n	8107208 <_vfiprintf_r+0xc0>
 81071f0:	465b      	mov	r3, fp
 81071f2:	4622      	mov	r2, r4
 81071f4:	4629      	mov	r1, r5
 81071f6:	4630      	mov	r0, r6
 81071f8:	f7ff ff93 	bl	8107122 <__sfputs_r>
 81071fc:	3001      	adds	r0, #1
 81071fe:	f000 80aa 	beq.w	8107356 <_vfiprintf_r+0x20e>
 8107202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8107204:	445a      	add	r2, fp
 8107206:	9209      	str	r2, [sp, #36]	; 0x24
 8107208:	f89a 3000 	ldrb.w	r3, [sl]
 810720c:	2b00      	cmp	r3, #0
 810720e:	f000 80a2 	beq.w	8107356 <_vfiprintf_r+0x20e>
 8107212:	2300      	movs	r3, #0
 8107214:	f04f 32ff 	mov.w	r2, #4294967295
 8107218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810721c:	f10a 0a01 	add.w	sl, sl, #1
 8107220:	9304      	str	r3, [sp, #16]
 8107222:	9307      	str	r3, [sp, #28]
 8107224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8107228:	931a      	str	r3, [sp, #104]	; 0x68
 810722a:	4654      	mov	r4, sl
 810722c:	2205      	movs	r2, #5
 810722e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107232:	4858      	ldr	r0, [pc, #352]	; (8107394 <_vfiprintf_r+0x24c>)
 8107234:	f7f9 f864 	bl	8100300 <memchr>
 8107238:	9a04      	ldr	r2, [sp, #16]
 810723a:	b9d8      	cbnz	r0, 8107274 <_vfiprintf_r+0x12c>
 810723c:	06d1      	lsls	r1, r2, #27
 810723e:	bf44      	itt	mi
 8107240:	2320      	movmi	r3, #32
 8107242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107246:	0713      	lsls	r3, r2, #28
 8107248:	bf44      	itt	mi
 810724a:	232b      	movmi	r3, #43	; 0x2b
 810724c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8107250:	f89a 3000 	ldrb.w	r3, [sl]
 8107254:	2b2a      	cmp	r3, #42	; 0x2a
 8107256:	d015      	beq.n	8107284 <_vfiprintf_r+0x13c>
 8107258:	9a07      	ldr	r2, [sp, #28]
 810725a:	4654      	mov	r4, sl
 810725c:	2000      	movs	r0, #0
 810725e:	f04f 0c0a 	mov.w	ip, #10
 8107262:	4621      	mov	r1, r4
 8107264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107268:	3b30      	subs	r3, #48	; 0x30
 810726a:	2b09      	cmp	r3, #9
 810726c:	d94e      	bls.n	810730c <_vfiprintf_r+0x1c4>
 810726e:	b1b0      	cbz	r0, 810729e <_vfiprintf_r+0x156>
 8107270:	9207      	str	r2, [sp, #28]
 8107272:	e014      	b.n	810729e <_vfiprintf_r+0x156>
 8107274:	eba0 0308 	sub.w	r3, r0, r8
 8107278:	fa09 f303 	lsl.w	r3, r9, r3
 810727c:	4313      	orrs	r3, r2
 810727e:	9304      	str	r3, [sp, #16]
 8107280:	46a2      	mov	sl, r4
 8107282:	e7d2      	b.n	810722a <_vfiprintf_r+0xe2>
 8107284:	9b03      	ldr	r3, [sp, #12]
 8107286:	1d19      	adds	r1, r3, #4
 8107288:	681b      	ldr	r3, [r3, #0]
 810728a:	9103      	str	r1, [sp, #12]
 810728c:	2b00      	cmp	r3, #0
 810728e:	bfbb      	ittet	lt
 8107290:	425b      	neglt	r3, r3
 8107292:	f042 0202 	orrlt.w	r2, r2, #2
 8107296:	9307      	strge	r3, [sp, #28]
 8107298:	9307      	strlt	r3, [sp, #28]
 810729a:	bfb8      	it	lt
 810729c:	9204      	strlt	r2, [sp, #16]
 810729e:	7823      	ldrb	r3, [r4, #0]
 81072a0:	2b2e      	cmp	r3, #46	; 0x2e
 81072a2:	d10c      	bne.n	81072be <_vfiprintf_r+0x176>
 81072a4:	7863      	ldrb	r3, [r4, #1]
 81072a6:	2b2a      	cmp	r3, #42	; 0x2a
 81072a8:	d135      	bne.n	8107316 <_vfiprintf_r+0x1ce>
 81072aa:	9b03      	ldr	r3, [sp, #12]
 81072ac:	1d1a      	adds	r2, r3, #4
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	9203      	str	r2, [sp, #12]
 81072b2:	2b00      	cmp	r3, #0
 81072b4:	bfb8      	it	lt
 81072b6:	f04f 33ff 	movlt.w	r3, #4294967295
 81072ba:	3402      	adds	r4, #2
 81072bc:	9305      	str	r3, [sp, #20]
 81072be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 81073a4 <_vfiprintf_r+0x25c>
 81072c2:	7821      	ldrb	r1, [r4, #0]
 81072c4:	2203      	movs	r2, #3
 81072c6:	4650      	mov	r0, sl
 81072c8:	f7f9 f81a 	bl	8100300 <memchr>
 81072cc:	b140      	cbz	r0, 81072e0 <_vfiprintf_r+0x198>
 81072ce:	2340      	movs	r3, #64	; 0x40
 81072d0:	eba0 000a 	sub.w	r0, r0, sl
 81072d4:	fa03 f000 	lsl.w	r0, r3, r0
 81072d8:	9b04      	ldr	r3, [sp, #16]
 81072da:	4303      	orrs	r3, r0
 81072dc:	3401      	adds	r4, #1
 81072de:	9304      	str	r3, [sp, #16]
 81072e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 81072e4:	482c      	ldr	r0, [pc, #176]	; (8107398 <_vfiprintf_r+0x250>)
 81072e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81072ea:	2206      	movs	r2, #6
 81072ec:	f7f9 f808 	bl	8100300 <memchr>
 81072f0:	2800      	cmp	r0, #0
 81072f2:	d03f      	beq.n	8107374 <_vfiprintf_r+0x22c>
 81072f4:	4b29      	ldr	r3, [pc, #164]	; (810739c <_vfiprintf_r+0x254>)
 81072f6:	bb1b      	cbnz	r3, 8107340 <_vfiprintf_r+0x1f8>
 81072f8:	9b03      	ldr	r3, [sp, #12]
 81072fa:	3307      	adds	r3, #7
 81072fc:	f023 0307 	bic.w	r3, r3, #7
 8107300:	3308      	adds	r3, #8
 8107302:	9303      	str	r3, [sp, #12]
 8107304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107306:	443b      	add	r3, r7
 8107308:	9309      	str	r3, [sp, #36]	; 0x24
 810730a:	e767      	b.n	81071dc <_vfiprintf_r+0x94>
 810730c:	fb0c 3202 	mla	r2, ip, r2, r3
 8107310:	460c      	mov	r4, r1
 8107312:	2001      	movs	r0, #1
 8107314:	e7a5      	b.n	8107262 <_vfiprintf_r+0x11a>
 8107316:	2300      	movs	r3, #0
 8107318:	3401      	adds	r4, #1
 810731a:	9305      	str	r3, [sp, #20]
 810731c:	4619      	mov	r1, r3
 810731e:	f04f 0c0a 	mov.w	ip, #10
 8107322:	4620      	mov	r0, r4
 8107324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107328:	3a30      	subs	r2, #48	; 0x30
 810732a:	2a09      	cmp	r2, #9
 810732c:	d903      	bls.n	8107336 <_vfiprintf_r+0x1ee>
 810732e:	2b00      	cmp	r3, #0
 8107330:	d0c5      	beq.n	81072be <_vfiprintf_r+0x176>
 8107332:	9105      	str	r1, [sp, #20]
 8107334:	e7c3      	b.n	81072be <_vfiprintf_r+0x176>
 8107336:	fb0c 2101 	mla	r1, ip, r1, r2
 810733a:	4604      	mov	r4, r0
 810733c:	2301      	movs	r3, #1
 810733e:	e7f0      	b.n	8107322 <_vfiprintf_r+0x1da>
 8107340:	ab03      	add	r3, sp, #12
 8107342:	9300      	str	r3, [sp, #0]
 8107344:	462a      	mov	r2, r5
 8107346:	4b16      	ldr	r3, [pc, #88]	; (81073a0 <_vfiprintf_r+0x258>)
 8107348:	a904      	add	r1, sp, #16
 810734a:	4630      	mov	r0, r6
 810734c:	f3af 8000 	nop.w
 8107350:	4607      	mov	r7, r0
 8107352:	1c78      	adds	r0, r7, #1
 8107354:	d1d6      	bne.n	8107304 <_vfiprintf_r+0x1bc>
 8107356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107358:	07d9      	lsls	r1, r3, #31
 810735a:	d405      	bmi.n	8107368 <_vfiprintf_r+0x220>
 810735c:	89ab      	ldrh	r3, [r5, #12]
 810735e:	059a      	lsls	r2, r3, #22
 8107360:	d402      	bmi.n	8107368 <_vfiprintf_r+0x220>
 8107362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8107364:	f000 fc83 	bl	8107c6e <__retarget_lock_release_recursive>
 8107368:	89ab      	ldrh	r3, [r5, #12]
 810736a:	065b      	lsls	r3, r3, #25
 810736c:	f53f af12 	bmi.w	8107194 <_vfiprintf_r+0x4c>
 8107370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8107372:	e711      	b.n	8107198 <_vfiprintf_r+0x50>
 8107374:	ab03      	add	r3, sp, #12
 8107376:	9300      	str	r3, [sp, #0]
 8107378:	462a      	mov	r2, r5
 810737a:	4b09      	ldr	r3, [pc, #36]	; (81073a0 <_vfiprintf_r+0x258>)
 810737c:	a904      	add	r1, sp, #16
 810737e:	4630      	mov	r0, r6
 8107380:	f000 f880 	bl	8107484 <_printf_i>
 8107384:	e7e4      	b.n	8107350 <_vfiprintf_r+0x208>
 8107386:	bf00      	nop
 8107388:	08108264 	.word	0x08108264
 810738c:	08108284 	.word	0x08108284
 8107390:	08108244 	.word	0x08108244
 8107394:	08108210 	.word	0x08108210
 8107398:	0810821a 	.word	0x0810821a
 810739c:	00000000 	.word	0x00000000
 81073a0:	08107123 	.word	0x08107123
 81073a4:	08108216 	.word	0x08108216

081073a8 <_printf_common>:
 81073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81073ac:	4616      	mov	r6, r2
 81073ae:	4699      	mov	r9, r3
 81073b0:	688a      	ldr	r2, [r1, #8]
 81073b2:	690b      	ldr	r3, [r1, #16]
 81073b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81073b8:	4293      	cmp	r3, r2
 81073ba:	bfb8      	it	lt
 81073bc:	4613      	movlt	r3, r2
 81073be:	6033      	str	r3, [r6, #0]
 81073c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81073c4:	4607      	mov	r7, r0
 81073c6:	460c      	mov	r4, r1
 81073c8:	b10a      	cbz	r2, 81073ce <_printf_common+0x26>
 81073ca:	3301      	adds	r3, #1
 81073cc:	6033      	str	r3, [r6, #0]
 81073ce:	6823      	ldr	r3, [r4, #0]
 81073d0:	0699      	lsls	r1, r3, #26
 81073d2:	bf42      	ittt	mi
 81073d4:	6833      	ldrmi	r3, [r6, #0]
 81073d6:	3302      	addmi	r3, #2
 81073d8:	6033      	strmi	r3, [r6, #0]
 81073da:	6825      	ldr	r5, [r4, #0]
 81073dc:	f015 0506 	ands.w	r5, r5, #6
 81073e0:	d106      	bne.n	81073f0 <_printf_common+0x48>
 81073e2:	f104 0a19 	add.w	sl, r4, #25
 81073e6:	68e3      	ldr	r3, [r4, #12]
 81073e8:	6832      	ldr	r2, [r6, #0]
 81073ea:	1a9b      	subs	r3, r3, r2
 81073ec:	42ab      	cmp	r3, r5
 81073ee:	dc26      	bgt.n	810743e <_printf_common+0x96>
 81073f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81073f4:	1e13      	subs	r3, r2, #0
 81073f6:	6822      	ldr	r2, [r4, #0]
 81073f8:	bf18      	it	ne
 81073fa:	2301      	movne	r3, #1
 81073fc:	0692      	lsls	r2, r2, #26
 81073fe:	d42b      	bmi.n	8107458 <_printf_common+0xb0>
 8107400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107404:	4649      	mov	r1, r9
 8107406:	4638      	mov	r0, r7
 8107408:	47c0      	blx	r8
 810740a:	3001      	adds	r0, #1
 810740c:	d01e      	beq.n	810744c <_printf_common+0xa4>
 810740e:	6823      	ldr	r3, [r4, #0]
 8107410:	68e5      	ldr	r5, [r4, #12]
 8107412:	6832      	ldr	r2, [r6, #0]
 8107414:	f003 0306 	and.w	r3, r3, #6
 8107418:	2b04      	cmp	r3, #4
 810741a:	bf08      	it	eq
 810741c:	1aad      	subeq	r5, r5, r2
 810741e:	68a3      	ldr	r3, [r4, #8]
 8107420:	6922      	ldr	r2, [r4, #16]
 8107422:	bf0c      	ite	eq
 8107424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107428:	2500      	movne	r5, #0
 810742a:	4293      	cmp	r3, r2
 810742c:	bfc4      	itt	gt
 810742e:	1a9b      	subgt	r3, r3, r2
 8107430:	18ed      	addgt	r5, r5, r3
 8107432:	2600      	movs	r6, #0
 8107434:	341a      	adds	r4, #26
 8107436:	42b5      	cmp	r5, r6
 8107438:	d11a      	bne.n	8107470 <_printf_common+0xc8>
 810743a:	2000      	movs	r0, #0
 810743c:	e008      	b.n	8107450 <_printf_common+0xa8>
 810743e:	2301      	movs	r3, #1
 8107440:	4652      	mov	r2, sl
 8107442:	4649      	mov	r1, r9
 8107444:	4638      	mov	r0, r7
 8107446:	47c0      	blx	r8
 8107448:	3001      	adds	r0, #1
 810744a:	d103      	bne.n	8107454 <_printf_common+0xac>
 810744c:	f04f 30ff 	mov.w	r0, #4294967295
 8107450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107454:	3501      	adds	r5, #1
 8107456:	e7c6      	b.n	81073e6 <_printf_common+0x3e>
 8107458:	18e1      	adds	r1, r4, r3
 810745a:	1c5a      	adds	r2, r3, #1
 810745c:	2030      	movs	r0, #48	; 0x30
 810745e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8107462:	4422      	add	r2, r4
 8107464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8107468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810746c:	3302      	adds	r3, #2
 810746e:	e7c7      	b.n	8107400 <_printf_common+0x58>
 8107470:	2301      	movs	r3, #1
 8107472:	4622      	mov	r2, r4
 8107474:	4649      	mov	r1, r9
 8107476:	4638      	mov	r0, r7
 8107478:	47c0      	blx	r8
 810747a:	3001      	adds	r0, #1
 810747c:	d0e6      	beq.n	810744c <_printf_common+0xa4>
 810747e:	3601      	adds	r6, #1
 8107480:	e7d9      	b.n	8107436 <_printf_common+0x8e>
	...

08107484 <_printf_i>:
 8107484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107488:	7e0f      	ldrb	r7, [r1, #24]
 810748a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810748c:	2f78      	cmp	r7, #120	; 0x78
 810748e:	4691      	mov	r9, r2
 8107490:	4680      	mov	r8, r0
 8107492:	460c      	mov	r4, r1
 8107494:	469a      	mov	sl, r3
 8107496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810749a:	d807      	bhi.n	81074ac <_printf_i+0x28>
 810749c:	2f62      	cmp	r7, #98	; 0x62
 810749e:	d80a      	bhi.n	81074b6 <_printf_i+0x32>
 81074a0:	2f00      	cmp	r7, #0
 81074a2:	f000 80d8 	beq.w	8107656 <_printf_i+0x1d2>
 81074a6:	2f58      	cmp	r7, #88	; 0x58
 81074a8:	f000 80a3 	beq.w	81075f2 <_printf_i+0x16e>
 81074ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81074b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81074b4:	e03a      	b.n	810752c <_printf_i+0xa8>
 81074b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81074ba:	2b15      	cmp	r3, #21
 81074bc:	d8f6      	bhi.n	81074ac <_printf_i+0x28>
 81074be:	a101      	add	r1, pc, #4	; (adr r1, 81074c4 <_printf_i+0x40>)
 81074c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81074c4:	0810751d 	.word	0x0810751d
 81074c8:	08107531 	.word	0x08107531
 81074cc:	081074ad 	.word	0x081074ad
 81074d0:	081074ad 	.word	0x081074ad
 81074d4:	081074ad 	.word	0x081074ad
 81074d8:	081074ad 	.word	0x081074ad
 81074dc:	08107531 	.word	0x08107531
 81074e0:	081074ad 	.word	0x081074ad
 81074e4:	081074ad 	.word	0x081074ad
 81074e8:	081074ad 	.word	0x081074ad
 81074ec:	081074ad 	.word	0x081074ad
 81074f0:	0810763d 	.word	0x0810763d
 81074f4:	08107561 	.word	0x08107561
 81074f8:	0810761f 	.word	0x0810761f
 81074fc:	081074ad 	.word	0x081074ad
 8107500:	081074ad 	.word	0x081074ad
 8107504:	0810765f 	.word	0x0810765f
 8107508:	081074ad 	.word	0x081074ad
 810750c:	08107561 	.word	0x08107561
 8107510:	081074ad 	.word	0x081074ad
 8107514:	081074ad 	.word	0x081074ad
 8107518:	08107627 	.word	0x08107627
 810751c:	682b      	ldr	r3, [r5, #0]
 810751e:	1d1a      	adds	r2, r3, #4
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	602a      	str	r2, [r5, #0]
 8107524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8107528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810752c:	2301      	movs	r3, #1
 810752e:	e0a3      	b.n	8107678 <_printf_i+0x1f4>
 8107530:	6820      	ldr	r0, [r4, #0]
 8107532:	6829      	ldr	r1, [r5, #0]
 8107534:	0606      	lsls	r6, r0, #24
 8107536:	f101 0304 	add.w	r3, r1, #4
 810753a:	d50a      	bpl.n	8107552 <_printf_i+0xce>
 810753c:	680e      	ldr	r6, [r1, #0]
 810753e:	602b      	str	r3, [r5, #0]
 8107540:	2e00      	cmp	r6, #0
 8107542:	da03      	bge.n	810754c <_printf_i+0xc8>
 8107544:	232d      	movs	r3, #45	; 0x2d
 8107546:	4276      	negs	r6, r6
 8107548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810754c:	485e      	ldr	r0, [pc, #376]	; (81076c8 <_printf_i+0x244>)
 810754e:	230a      	movs	r3, #10
 8107550:	e019      	b.n	8107586 <_printf_i+0x102>
 8107552:	680e      	ldr	r6, [r1, #0]
 8107554:	602b      	str	r3, [r5, #0]
 8107556:	f010 0f40 	tst.w	r0, #64	; 0x40
 810755a:	bf18      	it	ne
 810755c:	b236      	sxthne	r6, r6
 810755e:	e7ef      	b.n	8107540 <_printf_i+0xbc>
 8107560:	682b      	ldr	r3, [r5, #0]
 8107562:	6820      	ldr	r0, [r4, #0]
 8107564:	1d19      	adds	r1, r3, #4
 8107566:	6029      	str	r1, [r5, #0]
 8107568:	0601      	lsls	r1, r0, #24
 810756a:	d501      	bpl.n	8107570 <_printf_i+0xec>
 810756c:	681e      	ldr	r6, [r3, #0]
 810756e:	e002      	b.n	8107576 <_printf_i+0xf2>
 8107570:	0646      	lsls	r6, r0, #25
 8107572:	d5fb      	bpl.n	810756c <_printf_i+0xe8>
 8107574:	881e      	ldrh	r6, [r3, #0]
 8107576:	4854      	ldr	r0, [pc, #336]	; (81076c8 <_printf_i+0x244>)
 8107578:	2f6f      	cmp	r7, #111	; 0x6f
 810757a:	bf0c      	ite	eq
 810757c:	2308      	moveq	r3, #8
 810757e:	230a      	movne	r3, #10
 8107580:	2100      	movs	r1, #0
 8107582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107586:	6865      	ldr	r5, [r4, #4]
 8107588:	60a5      	str	r5, [r4, #8]
 810758a:	2d00      	cmp	r5, #0
 810758c:	bfa2      	ittt	ge
 810758e:	6821      	ldrge	r1, [r4, #0]
 8107590:	f021 0104 	bicge.w	r1, r1, #4
 8107594:	6021      	strge	r1, [r4, #0]
 8107596:	b90e      	cbnz	r6, 810759c <_printf_i+0x118>
 8107598:	2d00      	cmp	r5, #0
 810759a:	d04d      	beq.n	8107638 <_printf_i+0x1b4>
 810759c:	4615      	mov	r5, r2
 810759e:	fbb6 f1f3 	udiv	r1, r6, r3
 81075a2:	fb03 6711 	mls	r7, r3, r1, r6
 81075a6:	5dc7      	ldrb	r7, [r0, r7]
 81075a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81075ac:	4637      	mov	r7, r6
 81075ae:	42bb      	cmp	r3, r7
 81075b0:	460e      	mov	r6, r1
 81075b2:	d9f4      	bls.n	810759e <_printf_i+0x11a>
 81075b4:	2b08      	cmp	r3, #8
 81075b6:	d10b      	bne.n	81075d0 <_printf_i+0x14c>
 81075b8:	6823      	ldr	r3, [r4, #0]
 81075ba:	07de      	lsls	r6, r3, #31
 81075bc:	d508      	bpl.n	81075d0 <_printf_i+0x14c>
 81075be:	6923      	ldr	r3, [r4, #16]
 81075c0:	6861      	ldr	r1, [r4, #4]
 81075c2:	4299      	cmp	r1, r3
 81075c4:	bfde      	ittt	le
 81075c6:	2330      	movle	r3, #48	; 0x30
 81075c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 81075cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 81075d0:	1b52      	subs	r2, r2, r5
 81075d2:	6122      	str	r2, [r4, #16]
 81075d4:	f8cd a000 	str.w	sl, [sp]
 81075d8:	464b      	mov	r3, r9
 81075da:	aa03      	add	r2, sp, #12
 81075dc:	4621      	mov	r1, r4
 81075de:	4640      	mov	r0, r8
 81075e0:	f7ff fee2 	bl	81073a8 <_printf_common>
 81075e4:	3001      	adds	r0, #1
 81075e6:	d14c      	bne.n	8107682 <_printf_i+0x1fe>
 81075e8:	f04f 30ff 	mov.w	r0, #4294967295
 81075ec:	b004      	add	sp, #16
 81075ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81075f2:	4835      	ldr	r0, [pc, #212]	; (81076c8 <_printf_i+0x244>)
 81075f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 81075f8:	6829      	ldr	r1, [r5, #0]
 81075fa:	6823      	ldr	r3, [r4, #0]
 81075fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8107600:	6029      	str	r1, [r5, #0]
 8107602:	061d      	lsls	r5, r3, #24
 8107604:	d514      	bpl.n	8107630 <_printf_i+0x1ac>
 8107606:	07df      	lsls	r7, r3, #31
 8107608:	bf44      	itt	mi
 810760a:	f043 0320 	orrmi.w	r3, r3, #32
 810760e:	6023      	strmi	r3, [r4, #0]
 8107610:	b91e      	cbnz	r6, 810761a <_printf_i+0x196>
 8107612:	6823      	ldr	r3, [r4, #0]
 8107614:	f023 0320 	bic.w	r3, r3, #32
 8107618:	6023      	str	r3, [r4, #0]
 810761a:	2310      	movs	r3, #16
 810761c:	e7b0      	b.n	8107580 <_printf_i+0xfc>
 810761e:	6823      	ldr	r3, [r4, #0]
 8107620:	f043 0320 	orr.w	r3, r3, #32
 8107624:	6023      	str	r3, [r4, #0]
 8107626:	2378      	movs	r3, #120	; 0x78
 8107628:	4828      	ldr	r0, [pc, #160]	; (81076cc <_printf_i+0x248>)
 810762a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810762e:	e7e3      	b.n	81075f8 <_printf_i+0x174>
 8107630:	0659      	lsls	r1, r3, #25
 8107632:	bf48      	it	mi
 8107634:	b2b6      	uxthmi	r6, r6
 8107636:	e7e6      	b.n	8107606 <_printf_i+0x182>
 8107638:	4615      	mov	r5, r2
 810763a:	e7bb      	b.n	81075b4 <_printf_i+0x130>
 810763c:	682b      	ldr	r3, [r5, #0]
 810763e:	6826      	ldr	r6, [r4, #0]
 8107640:	6961      	ldr	r1, [r4, #20]
 8107642:	1d18      	adds	r0, r3, #4
 8107644:	6028      	str	r0, [r5, #0]
 8107646:	0635      	lsls	r5, r6, #24
 8107648:	681b      	ldr	r3, [r3, #0]
 810764a:	d501      	bpl.n	8107650 <_printf_i+0x1cc>
 810764c:	6019      	str	r1, [r3, #0]
 810764e:	e002      	b.n	8107656 <_printf_i+0x1d2>
 8107650:	0670      	lsls	r0, r6, #25
 8107652:	d5fb      	bpl.n	810764c <_printf_i+0x1c8>
 8107654:	8019      	strh	r1, [r3, #0]
 8107656:	2300      	movs	r3, #0
 8107658:	6123      	str	r3, [r4, #16]
 810765a:	4615      	mov	r5, r2
 810765c:	e7ba      	b.n	81075d4 <_printf_i+0x150>
 810765e:	682b      	ldr	r3, [r5, #0]
 8107660:	1d1a      	adds	r2, r3, #4
 8107662:	602a      	str	r2, [r5, #0]
 8107664:	681d      	ldr	r5, [r3, #0]
 8107666:	6862      	ldr	r2, [r4, #4]
 8107668:	2100      	movs	r1, #0
 810766a:	4628      	mov	r0, r5
 810766c:	f7f8 fe48 	bl	8100300 <memchr>
 8107670:	b108      	cbz	r0, 8107676 <_printf_i+0x1f2>
 8107672:	1b40      	subs	r0, r0, r5
 8107674:	6060      	str	r0, [r4, #4]
 8107676:	6863      	ldr	r3, [r4, #4]
 8107678:	6123      	str	r3, [r4, #16]
 810767a:	2300      	movs	r3, #0
 810767c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107680:	e7a8      	b.n	81075d4 <_printf_i+0x150>
 8107682:	6923      	ldr	r3, [r4, #16]
 8107684:	462a      	mov	r2, r5
 8107686:	4649      	mov	r1, r9
 8107688:	4640      	mov	r0, r8
 810768a:	47d0      	blx	sl
 810768c:	3001      	adds	r0, #1
 810768e:	d0ab      	beq.n	81075e8 <_printf_i+0x164>
 8107690:	6823      	ldr	r3, [r4, #0]
 8107692:	079b      	lsls	r3, r3, #30
 8107694:	d413      	bmi.n	81076be <_printf_i+0x23a>
 8107696:	68e0      	ldr	r0, [r4, #12]
 8107698:	9b03      	ldr	r3, [sp, #12]
 810769a:	4298      	cmp	r0, r3
 810769c:	bfb8      	it	lt
 810769e:	4618      	movlt	r0, r3
 81076a0:	e7a4      	b.n	81075ec <_printf_i+0x168>
 81076a2:	2301      	movs	r3, #1
 81076a4:	4632      	mov	r2, r6
 81076a6:	4649      	mov	r1, r9
 81076a8:	4640      	mov	r0, r8
 81076aa:	47d0      	blx	sl
 81076ac:	3001      	adds	r0, #1
 81076ae:	d09b      	beq.n	81075e8 <_printf_i+0x164>
 81076b0:	3501      	adds	r5, #1
 81076b2:	68e3      	ldr	r3, [r4, #12]
 81076b4:	9903      	ldr	r1, [sp, #12]
 81076b6:	1a5b      	subs	r3, r3, r1
 81076b8:	42ab      	cmp	r3, r5
 81076ba:	dcf2      	bgt.n	81076a2 <_printf_i+0x21e>
 81076bc:	e7eb      	b.n	8107696 <_printf_i+0x212>
 81076be:	2500      	movs	r5, #0
 81076c0:	f104 0619 	add.w	r6, r4, #25
 81076c4:	e7f5      	b.n	81076b2 <_printf_i+0x22e>
 81076c6:	bf00      	nop
 81076c8:	08108221 	.word	0x08108221
 81076cc:	08108232 	.word	0x08108232

081076d0 <_sbrk_r>:
 81076d0:	b538      	push	{r3, r4, r5, lr}
 81076d2:	4d06      	ldr	r5, [pc, #24]	; (81076ec <_sbrk_r+0x1c>)
 81076d4:	2300      	movs	r3, #0
 81076d6:	4604      	mov	r4, r0
 81076d8:	4608      	mov	r0, r1
 81076da:	602b      	str	r3, [r5, #0]
 81076dc:	f7f9 fa18 	bl	8100b10 <_sbrk>
 81076e0:	1c43      	adds	r3, r0, #1
 81076e2:	d102      	bne.n	81076ea <_sbrk_r+0x1a>
 81076e4:	682b      	ldr	r3, [r5, #0]
 81076e6:	b103      	cbz	r3, 81076ea <_sbrk_r+0x1a>
 81076e8:	6023      	str	r3, [r4, #0]
 81076ea:	bd38      	pop	{r3, r4, r5, pc}
 81076ec:	1000035c 	.word	0x1000035c

081076f0 <strncmp>:
 81076f0:	b510      	push	{r4, lr}
 81076f2:	b17a      	cbz	r2, 8107714 <strncmp+0x24>
 81076f4:	4603      	mov	r3, r0
 81076f6:	3901      	subs	r1, #1
 81076f8:	1884      	adds	r4, r0, r2
 81076fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 81076fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8107702:	4290      	cmp	r0, r2
 8107704:	d101      	bne.n	810770a <strncmp+0x1a>
 8107706:	42a3      	cmp	r3, r4
 8107708:	d101      	bne.n	810770e <strncmp+0x1e>
 810770a:	1a80      	subs	r0, r0, r2
 810770c:	bd10      	pop	{r4, pc}
 810770e:	2800      	cmp	r0, #0
 8107710:	d1f3      	bne.n	81076fa <strncmp+0xa>
 8107712:	e7fa      	b.n	810770a <strncmp+0x1a>
 8107714:	4610      	mov	r0, r2
 8107716:	e7f9      	b.n	810770c <strncmp+0x1c>

08107718 <strncpy>:
 8107718:	b510      	push	{r4, lr}
 810771a:	3901      	subs	r1, #1
 810771c:	4603      	mov	r3, r0
 810771e:	b132      	cbz	r2, 810772e <strncpy+0x16>
 8107720:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8107724:	f803 4b01 	strb.w	r4, [r3], #1
 8107728:	3a01      	subs	r2, #1
 810772a:	2c00      	cmp	r4, #0
 810772c:	d1f7      	bne.n	810771e <strncpy+0x6>
 810772e:	441a      	add	r2, r3
 8107730:	2100      	movs	r1, #0
 8107732:	4293      	cmp	r3, r2
 8107734:	d100      	bne.n	8107738 <strncpy+0x20>
 8107736:	bd10      	pop	{r4, pc}
 8107738:	f803 1b01 	strb.w	r1, [r3], #1
 810773c:	e7f9      	b.n	8107732 <strncpy+0x1a>

0810773e <strstr>:
 810773e:	780a      	ldrb	r2, [r1, #0]
 8107740:	b570      	push	{r4, r5, r6, lr}
 8107742:	b96a      	cbnz	r2, 8107760 <strstr+0x22>
 8107744:	bd70      	pop	{r4, r5, r6, pc}
 8107746:	429a      	cmp	r2, r3
 8107748:	d109      	bne.n	810775e <strstr+0x20>
 810774a:	460c      	mov	r4, r1
 810774c:	4605      	mov	r5, r0
 810774e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8107752:	2b00      	cmp	r3, #0
 8107754:	d0f6      	beq.n	8107744 <strstr+0x6>
 8107756:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 810775a:	429e      	cmp	r6, r3
 810775c:	d0f7      	beq.n	810774e <strstr+0x10>
 810775e:	3001      	adds	r0, #1
 8107760:	7803      	ldrb	r3, [r0, #0]
 8107762:	2b00      	cmp	r3, #0
 8107764:	d1ef      	bne.n	8107746 <strstr+0x8>
 8107766:	4618      	mov	r0, r3
 8107768:	e7ec      	b.n	8107744 <strstr+0x6>
	...

0810776c <__swbuf_r>:
 810776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810776e:	460e      	mov	r6, r1
 8107770:	4614      	mov	r4, r2
 8107772:	4605      	mov	r5, r0
 8107774:	b118      	cbz	r0, 810777e <__swbuf_r+0x12>
 8107776:	6983      	ldr	r3, [r0, #24]
 8107778:	b90b      	cbnz	r3, 810777e <__swbuf_r+0x12>
 810777a:	f000 f9d9 	bl	8107b30 <__sinit>
 810777e:	4b21      	ldr	r3, [pc, #132]	; (8107804 <__swbuf_r+0x98>)
 8107780:	429c      	cmp	r4, r3
 8107782:	d12b      	bne.n	81077dc <__swbuf_r+0x70>
 8107784:	686c      	ldr	r4, [r5, #4]
 8107786:	69a3      	ldr	r3, [r4, #24]
 8107788:	60a3      	str	r3, [r4, #8]
 810778a:	89a3      	ldrh	r3, [r4, #12]
 810778c:	071a      	lsls	r2, r3, #28
 810778e:	d52f      	bpl.n	81077f0 <__swbuf_r+0x84>
 8107790:	6923      	ldr	r3, [r4, #16]
 8107792:	b36b      	cbz	r3, 81077f0 <__swbuf_r+0x84>
 8107794:	6923      	ldr	r3, [r4, #16]
 8107796:	6820      	ldr	r0, [r4, #0]
 8107798:	1ac0      	subs	r0, r0, r3
 810779a:	6963      	ldr	r3, [r4, #20]
 810779c:	b2f6      	uxtb	r6, r6
 810779e:	4283      	cmp	r3, r0
 81077a0:	4637      	mov	r7, r6
 81077a2:	dc04      	bgt.n	81077ae <__swbuf_r+0x42>
 81077a4:	4621      	mov	r1, r4
 81077a6:	4628      	mov	r0, r5
 81077a8:	f000 f92e 	bl	8107a08 <_fflush_r>
 81077ac:	bb30      	cbnz	r0, 81077fc <__swbuf_r+0x90>
 81077ae:	68a3      	ldr	r3, [r4, #8]
 81077b0:	3b01      	subs	r3, #1
 81077b2:	60a3      	str	r3, [r4, #8]
 81077b4:	6823      	ldr	r3, [r4, #0]
 81077b6:	1c5a      	adds	r2, r3, #1
 81077b8:	6022      	str	r2, [r4, #0]
 81077ba:	701e      	strb	r6, [r3, #0]
 81077bc:	6963      	ldr	r3, [r4, #20]
 81077be:	3001      	adds	r0, #1
 81077c0:	4283      	cmp	r3, r0
 81077c2:	d004      	beq.n	81077ce <__swbuf_r+0x62>
 81077c4:	89a3      	ldrh	r3, [r4, #12]
 81077c6:	07db      	lsls	r3, r3, #31
 81077c8:	d506      	bpl.n	81077d8 <__swbuf_r+0x6c>
 81077ca:	2e0a      	cmp	r6, #10
 81077cc:	d104      	bne.n	81077d8 <__swbuf_r+0x6c>
 81077ce:	4621      	mov	r1, r4
 81077d0:	4628      	mov	r0, r5
 81077d2:	f000 f919 	bl	8107a08 <_fflush_r>
 81077d6:	b988      	cbnz	r0, 81077fc <__swbuf_r+0x90>
 81077d8:	4638      	mov	r0, r7
 81077da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81077dc:	4b0a      	ldr	r3, [pc, #40]	; (8107808 <__swbuf_r+0x9c>)
 81077de:	429c      	cmp	r4, r3
 81077e0:	d101      	bne.n	81077e6 <__swbuf_r+0x7a>
 81077e2:	68ac      	ldr	r4, [r5, #8]
 81077e4:	e7cf      	b.n	8107786 <__swbuf_r+0x1a>
 81077e6:	4b09      	ldr	r3, [pc, #36]	; (810780c <__swbuf_r+0xa0>)
 81077e8:	429c      	cmp	r4, r3
 81077ea:	bf08      	it	eq
 81077ec:	68ec      	ldreq	r4, [r5, #12]
 81077ee:	e7ca      	b.n	8107786 <__swbuf_r+0x1a>
 81077f0:	4621      	mov	r1, r4
 81077f2:	4628      	mov	r0, r5
 81077f4:	f000 f80c 	bl	8107810 <__swsetup_r>
 81077f8:	2800      	cmp	r0, #0
 81077fa:	d0cb      	beq.n	8107794 <__swbuf_r+0x28>
 81077fc:	f04f 37ff 	mov.w	r7, #4294967295
 8107800:	e7ea      	b.n	81077d8 <__swbuf_r+0x6c>
 8107802:	bf00      	nop
 8107804:	08108264 	.word	0x08108264
 8107808:	08108284 	.word	0x08108284
 810780c:	08108244 	.word	0x08108244

08107810 <__swsetup_r>:
 8107810:	4b32      	ldr	r3, [pc, #200]	; (81078dc <__swsetup_r+0xcc>)
 8107812:	b570      	push	{r4, r5, r6, lr}
 8107814:	681d      	ldr	r5, [r3, #0]
 8107816:	4606      	mov	r6, r0
 8107818:	460c      	mov	r4, r1
 810781a:	b125      	cbz	r5, 8107826 <__swsetup_r+0x16>
 810781c:	69ab      	ldr	r3, [r5, #24]
 810781e:	b913      	cbnz	r3, 8107826 <__swsetup_r+0x16>
 8107820:	4628      	mov	r0, r5
 8107822:	f000 f985 	bl	8107b30 <__sinit>
 8107826:	4b2e      	ldr	r3, [pc, #184]	; (81078e0 <__swsetup_r+0xd0>)
 8107828:	429c      	cmp	r4, r3
 810782a:	d10f      	bne.n	810784c <__swsetup_r+0x3c>
 810782c:	686c      	ldr	r4, [r5, #4]
 810782e:	89a3      	ldrh	r3, [r4, #12]
 8107830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107834:	0719      	lsls	r1, r3, #28
 8107836:	d42c      	bmi.n	8107892 <__swsetup_r+0x82>
 8107838:	06dd      	lsls	r5, r3, #27
 810783a:	d411      	bmi.n	8107860 <__swsetup_r+0x50>
 810783c:	2309      	movs	r3, #9
 810783e:	6033      	str	r3, [r6, #0]
 8107840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8107844:	81a3      	strh	r3, [r4, #12]
 8107846:	f04f 30ff 	mov.w	r0, #4294967295
 810784a:	e03e      	b.n	81078ca <__swsetup_r+0xba>
 810784c:	4b25      	ldr	r3, [pc, #148]	; (81078e4 <__swsetup_r+0xd4>)
 810784e:	429c      	cmp	r4, r3
 8107850:	d101      	bne.n	8107856 <__swsetup_r+0x46>
 8107852:	68ac      	ldr	r4, [r5, #8]
 8107854:	e7eb      	b.n	810782e <__swsetup_r+0x1e>
 8107856:	4b24      	ldr	r3, [pc, #144]	; (81078e8 <__swsetup_r+0xd8>)
 8107858:	429c      	cmp	r4, r3
 810785a:	bf08      	it	eq
 810785c:	68ec      	ldreq	r4, [r5, #12]
 810785e:	e7e6      	b.n	810782e <__swsetup_r+0x1e>
 8107860:	0758      	lsls	r0, r3, #29
 8107862:	d512      	bpl.n	810788a <__swsetup_r+0x7a>
 8107864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107866:	b141      	cbz	r1, 810787a <__swsetup_r+0x6a>
 8107868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810786c:	4299      	cmp	r1, r3
 810786e:	d002      	beq.n	8107876 <__swsetup_r+0x66>
 8107870:	4630      	mov	r0, r6
 8107872:	f7ff fb5f 	bl	8106f34 <_free_r>
 8107876:	2300      	movs	r3, #0
 8107878:	6363      	str	r3, [r4, #52]	; 0x34
 810787a:	89a3      	ldrh	r3, [r4, #12]
 810787c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8107880:	81a3      	strh	r3, [r4, #12]
 8107882:	2300      	movs	r3, #0
 8107884:	6063      	str	r3, [r4, #4]
 8107886:	6923      	ldr	r3, [r4, #16]
 8107888:	6023      	str	r3, [r4, #0]
 810788a:	89a3      	ldrh	r3, [r4, #12]
 810788c:	f043 0308 	orr.w	r3, r3, #8
 8107890:	81a3      	strh	r3, [r4, #12]
 8107892:	6923      	ldr	r3, [r4, #16]
 8107894:	b94b      	cbnz	r3, 81078aa <__swsetup_r+0x9a>
 8107896:	89a3      	ldrh	r3, [r4, #12]
 8107898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810789c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81078a0:	d003      	beq.n	81078aa <__swsetup_r+0x9a>
 81078a2:	4621      	mov	r1, r4
 81078a4:	4630      	mov	r0, r6
 81078a6:	f000 fa09 	bl	8107cbc <__smakebuf_r>
 81078aa:	89a0      	ldrh	r0, [r4, #12]
 81078ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81078b0:	f010 0301 	ands.w	r3, r0, #1
 81078b4:	d00a      	beq.n	81078cc <__swsetup_r+0xbc>
 81078b6:	2300      	movs	r3, #0
 81078b8:	60a3      	str	r3, [r4, #8]
 81078ba:	6963      	ldr	r3, [r4, #20]
 81078bc:	425b      	negs	r3, r3
 81078be:	61a3      	str	r3, [r4, #24]
 81078c0:	6923      	ldr	r3, [r4, #16]
 81078c2:	b943      	cbnz	r3, 81078d6 <__swsetup_r+0xc6>
 81078c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81078c8:	d1ba      	bne.n	8107840 <__swsetup_r+0x30>
 81078ca:	bd70      	pop	{r4, r5, r6, pc}
 81078cc:	0781      	lsls	r1, r0, #30
 81078ce:	bf58      	it	pl
 81078d0:	6963      	ldrpl	r3, [r4, #20]
 81078d2:	60a3      	str	r3, [r4, #8]
 81078d4:	e7f4      	b.n	81078c0 <__swsetup_r+0xb0>
 81078d6:	2000      	movs	r0, #0
 81078d8:	e7f7      	b.n	81078ca <__swsetup_r+0xba>
 81078da:	bf00      	nop
 81078dc:	100000b8 	.word	0x100000b8
 81078e0:	08108264 	.word	0x08108264
 81078e4:	08108284 	.word	0x08108284
 81078e8:	08108244 	.word	0x08108244

081078ec <abort>:
 81078ec:	b508      	push	{r3, lr}
 81078ee:	2006      	movs	r0, #6
 81078f0:	f000 fa58 	bl	8107da4 <raise>
 81078f4:	2001      	movs	r0, #1
 81078f6:	f7f9 f893 	bl	8100a20 <_exit>
	...

081078fc <__sflush_r>:
 81078fc:	898a      	ldrh	r2, [r1, #12]
 81078fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107902:	4605      	mov	r5, r0
 8107904:	0710      	lsls	r0, r2, #28
 8107906:	460c      	mov	r4, r1
 8107908:	d458      	bmi.n	81079bc <__sflush_r+0xc0>
 810790a:	684b      	ldr	r3, [r1, #4]
 810790c:	2b00      	cmp	r3, #0
 810790e:	dc05      	bgt.n	810791c <__sflush_r+0x20>
 8107910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8107912:	2b00      	cmp	r3, #0
 8107914:	dc02      	bgt.n	810791c <__sflush_r+0x20>
 8107916:	2000      	movs	r0, #0
 8107918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810791c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810791e:	2e00      	cmp	r6, #0
 8107920:	d0f9      	beq.n	8107916 <__sflush_r+0x1a>
 8107922:	2300      	movs	r3, #0
 8107924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8107928:	682f      	ldr	r7, [r5, #0]
 810792a:	602b      	str	r3, [r5, #0]
 810792c:	d032      	beq.n	8107994 <__sflush_r+0x98>
 810792e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8107930:	89a3      	ldrh	r3, [r4, #12]
 8107932:	075a      	lsls	r2, r3, #29
 8107934:	d505      	bpl.n	8107942 <__sflush_r+0x46>
 8107936:	6863      	ldr	r3, [r4, #4]
 8107938:	1ac0      	subs	r0, r0, r3
 810793a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810793c:	b10b      	cbz	r3, 8107942 <__sflush_r+0x46>
 810793e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8107940:	1ac0      	subs	r0, r0, r3
 8107942:	2300      	movs	r3, #0
 8107944:	4602      	mov	r2, r0
 8107946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8107948:	6a21      	ldr	r1, [r4, #32]
 810794a:	4628      	mov	r0, r5
 810794c:	47b0      	blx	r6
 810794e:	1c43      	adds	r3, r0, #1
 8107950:	89a3      	ldrh	r3, [r4, #12]
 8107952:	d106      	bne.n	8107962 <__sflush_r+0x66>
 8107954:	6829      	ldr	r1, [r5, #0]
 8107956:	291d      	cmp	r1, #29
 8107958:	d82c      	bhi.n	81079b4 <__sflush_r+0xb8>
 810795a:	4a2a      	ldr	r2, [pc, #168]	; (8107a04 <__sflush_r+0x108>)
 810795c:	40ca      	lsrs	r2, r1
 810795e:	07d6      	lsls	r6, r2, #31
 8107960:	d528      	bpl.n	81079b4 <__sflush_r+0xb8>
 8107962:	2200      	movs	r2, #0
 8107964:	6062      	str	r2, [r4, #4]
 8107966:	04d9      	lsls	r1, r3, #19
 8107968:	6922      	ldr	r2, [r4, #16]
 810796a:	6022      	str	r2, [r4, #0]
 810796c:	d504      	bpl.n	8107978 <__sflush_r+0x7c>
 810796e:	1c42      	adds	r2, r0, #1
 8107970:	d101      	bne.n	8107976 <__sflush_r+0x7a>
 8107972:	682b      	ldr	r3, [r5, #0]
 8107974:	b903      	cbnz	r3, 8107978 <__sflush_r+0x7c>
 8107976:	6560      	str	r0, [r4, #84]	; 0x54
 8107978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810797a:	602f      	str	r7, [r5, #0]
 810797c:	2900      	cmp	r1, #0
 810797e:	d0ca      	beq.n	8107916 <__sflush_r+0x1a>
 8107980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107984:	4299      	cmp	r1, r3
 8107986:	d002      	beq.n	810798e <__sflush_r+0x92>
 8107988:	4628      	mov	r0, r5
 810798a:	f7ff fad3 	bl	8106f34 <_free_r>
 810798e:	2000      	movs	r0, #0
 8107990:	6360      	str	r0, [r4, #52]	; 0x34
 8107992:	e7c1      	b.n	8107918 <__sflush_r+0x1c>
 8107994:	6a21      	ldr	r1, [r4, #32]
 8107996:	2301      	movs	r3, #1
 8107998:	4628      	mov	r0, r5
 810799a:	47b0      	blx	r6
 810799c:	1c41      	adds	r1, r0, #1
 810799e:	d1c7      	bne.n	8107930 <__sflush_r+0x34>
 81079a0:	682b      	ldr	r3, [r5, #0]
 81079a2:	2b00      	cmp	r3, #0
 81079a4:	d0c4      	beq.n	8107930 <__sflush_r+0x34>
 81079a6:	2b1d      	cmp	r3, #29
 81079a8:	d001      	beq.n	81079ae <__sflush_r+0xb2>
 81079aa:	2b16      	cmp	r3, #22
 81079ac:	d101      	bne.n	81079b2 <__sflush_r+0xb6>
 81079ae:	602f      	str	r7, [r5, #0]
 81079b0:	e7b1      	b.n	8107916 <__sflush_r+0x1a>
 81079b2:	89a3      	ldrh	r3, [r4, #12]
 81079b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81079b8:	81a3      	strh	r3, [r4, #12]
 81079ba:	e7ad      	b.n	8107918 <__sflush_r+0x1c>
 81079bc:	690f      	ldr	r7, [r1, #16]
 81079be:	2f00      	cmp	r7, #0
 81079c0:	d0a9      	beq.n	8107916 <__sflush_r+0x1a>
 81079c2:	0793      	lsls	r3, r2, #30
 81079c4:	680e      	ldr	r6, [r1, #0]
 81079c6:	bf08      	it	eq
 81079c8:	694b      	ldreq	r3, [r1, #20]
 81079ca:	600f      	str	r7, [r1, #0]
 81079cc:	bf18      	it	ne
 81079ce:	2300      	movne	r3, #0
 81079d0:	eba6 0807 	sub.w	r8, r6, r7
 81079d4:	608b      	str	r3, [r1, #8]
 81079d6:	f1b8 0f00 	cmp.w	r8, #0
 81079da:	dd9c      	ble.n	8107916 <__sflush_r+0x1a>
 81079dc:	6a21      	ldr	r1, [r4, #32]
 81079de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81079e0:	4643      	mov	r3, r8
 81079e2:	463a      	mov	r2, r7
 81079e4:	4628      	mov	r0, r5
 81079e6:	47b0      	blx	r6
 81079e8:	2800      	cmp	r0, #0
 81079ea:	dc06      	bgt.n	81079fa <__sflush_r+0xfe>
 81079ec:	89a3      	ldrh	r3, [r4, #12]
 81079ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81079f2:	81a3      	strh	r3, [r4, #12]
 81079f4:	f04f 30ff 	mov.w	r0, #4294967295
 81079f8:	e78e      	b.n	8107918 <__sflush_r+0x1c>
 81079fa:	4407      	add	r7, r0
 81079fc:	eba8 0800 	sub.w	r8, r8, r0
 8107a00:	e7e9      	b.n	81079d6 <__sflush_r+0xda>
 8107a02:	bf00      	nop
 8107a04:	20400001 	.word	0x20400001

08107a08 <_fflush_r>:
 8107a08:	b538      	push	{r3, r4, r5, lr}
 8107a0a:	690b      	ldr	r3, [r1, #16]
 8107a0c:	4605      	mov	r5, r0
 8107a0e:	460c      	mov	r4, r1
 8107a10:	b913      	cbnz	r3, 8107a18 <_fflush_r+0x10>
 8107a12:	2500      	movs	r5, #0
 8107a14:	4628      	mov	r0, r5
 8107a16:	bd38      	pop	{r3, r4, r5, pc}
 8107a18:	b118      	cbz	r0, 8107a22 <_fflush_r+0x1a>
 8107a1a:	6983      	ldr	r3, [r0, #24]
 8107a1c:	b90b      	cbnz	r3, 8107a22 <_fflush_r+0x1a>
 8107a1e:	f000 f887 	bl	8107b30 <__sinit>
 8107a22:	4b14      	ldr	r3, [pc, #80]	; (8107a74 <_fflush_r+0x6c>)
 8107a24:	429c      	cmp	r4, r3
 8107a26:	d11b      	bne.n	8107a60 <_fflush_r+0x58>
 8107a28:	686c      	ldr	r4, [r5, #4]
 8107a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107a2e:	2b00      	cmp	r3, #0
 8107a30:	d0ef      	beq.n	8107a12 <_fflush_r+0xa>
 8107a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107a34:	07d0      	lsls	r0, r2, #31
 8107a36:	d404      	bmi.n	8107a42 <_fflush_r+0x3a>
 8107a38:	0599      	lsls	r1, r3, #22
 8107a3a:	d402      	bmi.n	8107a42 <_fflush_r+0x3a>
 8107a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107a3e:	f000 f915 	bl	8107c6c <__retarget_lock_acquire_recursive>
 8107a42:	4628      	mov	r0, r5
 8107a44:	4621      	mov	r1, r4
 8107a46:	f7ff ff59 	bl	81078fc <__sflush_r>
 8107a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107a4c:	07da      	lsls	r2, r3, #31
 8107a4e:	4605      	mov	r5, r0
 8107a50:	d4e0      	bmi.n	8107a14 <_fflush_r+0xc>
 8107a52:	89a3      	ldrh	r3, [r4, #12]
 8107a54:	059b      	lsls	r3, r3, #22
 8107a56:	d4dd      	bmi.n	8107a14 <_fflush_r+0xc>
 8107a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107a5a:	f000 f908 	bl	8107c6e <__retarget_lock_release_recursive>
 8107a5e:	e7d9      	b.n	8107a14 <_fflush_r+0xc>
 8107a60:	4b05      	ldr	r3, [pc, #20]	; (8107a78 <_fflush_r+0x70>)
 8107a62:	429c      	cmp	r4, r3
 8107a64:	d101      	bne.n	8107a6a <_fflush_r+0x62>
 8107a66:	68ac      	ldr	r4, [r5, #8]
 8107a68:	e7df      	b.n	8107a2a <_fflush_r+0x22>
 8107a6a:	4b04      	ldr	r3, [pc, #16]	; (8107a7c <_fflush_r+0x74>)
 8107a6c:	429c      	cmp	r4, r3
 8107a6e:	bf08      	it	eq
 8107a70:	68ec      	ldreq	r4, [r5, #12]
 8107a72:	e7da      	b.n	8107a2a <_fflush_r+0x22>
 8107a74:	08108264 	.word	0x08108264
 8107a78:	08108284 	.word	0x08108284
 8107a7c:	08108244 	.word	0x08108244

08107a80 <std>:
 8107a80:	2300      	movs	r3, #0
 8107a82:	b510      	push	{r4, lr}
 8107a84:	4604      	mov	r4, r0
 8107a86:	e9c0 3300 	strd	r3, r3, [r0]
 8107a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8107a8e:	6083      	str	r3, [r0, #8]
 8107a90:	8181      	strh	r1, [r0, #12]
 8107a92:	6643      	str	r3, [r0, #100]	; 0x64
 8107a94:	81c2      	strh	r2, [r0, #14]
 8107a96:	6183      	str	r3, [r0, #24]
 8107a98:	4619      	mov	r1, r3
 8107a9a:	2208      	movs	r2, #8
 8107a9c:	305c      	adds	r0, #92	; 0x5c
 8107a9e:	f7ff fa41 	bl	8106f24 <memset>
 8107aa2:	4b05      	ldr	r3, [pc, #20]	; (8107ab8 <std+0x38>)
 8107aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8107aa6:	4b05      	ldr	r3, [pc, #20]	; (8107abc <std+0x3c>)
 8107aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8107aaa:	4b05      	ldr	r3, [pc, #20]	; (8107ac0 <std+0x40>)
 8107aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8107aae:	4b05      	ldr	r3, [pc, #20]	; (8107ac4 <std+0x44>)
 8107ab0:	6224      	str	r4, [r4, #32]
 8107ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8107ab4:	bd10      	pop	{r4, pc}
 8107ab6:	bf00      	nop
 8107ab8:	08107ddd 	.word	0x08107ddd
 8107abc:	08107dff 	.word	0x08107dff
 8107ac0:	08107e37 	.word	0x08107e37
 8107ac4:	08107e5b 	.word	0x08107e5b

08107ac8 <_cleanup_r>:
 8107ac8:	4901      	ldr	r1, [pc, #4]	; (8107ad0 <_cleanup_r+0x8>)
 8107aca:	f000 b8af 	b.w	8107c2c <_fwalk_reent>
 8107ace:	bf00      	nop
 8107ad0:	08107a09 	.word	0x08107a09

08107ad4 <__sfmoreglue>:
 8107ad4:	b570      	push	{r4, r5, r6, lr}
 8107ad6:	2268      	movs	r2, #104	; 0x68
 8107ad8:	1e4d      	subs	r5, r1, #1
 8107ada:	4355      	muls	r5, r2
 8107adc:	460e      	mov	r6, r1
 8107ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8107ae2:	f7ff fa93 	bl	810700c <_malloc_r>
 8107ae6:	4604      	mov	r4, r0
 8107ae8:	b140      	cbz	r0, 8107afc <__sfmoreglue+0x28>
 8107aea:	2100      	movs	r1, #0
 8107aec:	e9c0 1600 	strd	r1, r6, [r0]
 8107af0:	300c      	adds	r0, #12
 8107af2:	60a0      	str	r0, [r4, #8]
 8107af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8107af8:	f7ff fa14 	bl	8106f24 <memset>
 8107afc:	4620      	mov	r0, r4
 8107afe:	bd70      	pop	{r4, r5, r6, pc}

08107b00 <__sfp_lock_acquire>:
 8107b00:	4801      	ldr	r0, [pc, #4]	; (8107b08 <__sfp_lock_acquire+0x8>)
 8107b02:	f000 b8b3 	b.w	8107c6c <__retarget_lock_acquire_recursive>
 8107b06:	bf00      	nop
 8107b08:	10000361 	.word	0x10000361

08107b0c <__sfp_lock_release>:
 8107b0c:	4801      	ldr	r0, [pc, #4]	; (8107b14 <__sfp_lock_release+0x8>)
 8107b0e:	f000 b8ae 	b.w	8107c6e <__retarget_lock_release_recursive>
 8107b12:	bf00      	nop
 8107b14:	10000361 	.word	0x10000361

08107b18 <__sinit_lock_acquire>:
 8107b18:	4801      	ldr	r0, [pc, #4]	; (8107b20 <__sinit_lock_acquire+0x8>)
 8107b1a:	f000 b8a7 	b.w	8107c6c <__retarget_lock_acquire_recursive>
 8107b1e:	bf00      	nop
 8107b20:	10000362 	.word	0x10000362

08107b24 <__sinit_lock_release>:
 8107b24:	4801      	ldr	r0, [pc, #4]	; (8107b2c <__sinit_lock_release+0x8>)
 8107b26:	f000 b8a2 	b.w	8107c6e <__retarget_lock_release_recursive>
 8107b2a:	bf00      	nop
 8107b2c:	10000362 	.word	0x10000362

08107b30 <__sinit>:
 8107b30:	b510      	push	{r4, lr}
 8107b32:	4604      	mov	r4, r0
 8107b34:	f7ff fff0 	bl	8107b18 <__sinit_lock_acquire>
 8107b38:	69a3      	ldr	r3, [r4, #24]
 8107b3a:	b11b      	cbz	r3, 8107b44 <__sinit+0x14>
 8107b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107b40:	f7ff bff0 	b.w	8107b24 <__sinit_lock_release>
 8107b44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8107b48:	6523      	str	r3, [r4, #80]	; 0x50
 8107b4a:	4b13      	ldr	r3, [pc, #76]	; (8107b98 <__sinit+0x68>)
 8107b4c:	4a13      	ldr	r2, [pc, #76]	; (8107b9c <__sinit+0x6c>)
 8107b4e:	681b      	ldr	r3, [r3, #0]
 8107b50:	62a2      	str	r2, [r4, #40]	; 0x28
 8107b52:	42a3      	cmp	r3, r4
 8107b54:	bf04      	itt	eq
 8107b56:	2301      	moveq	r3, #1
 8107b58:	61a3      	streq	r3, [r4, #24]
 8107b5a:	4620      	mov	r0, r4
 8107b5c:	f000 f820 	bl	8107ba0 <__sfp>
 8107b60:	6060      	str	r0, [r4, #4]
 8107b62:	4620      	mov	r0, r4
 8107b64:	f000 f81c 	bl	8107ba0 <__sfp>
 8107b68:	60a0      	str	r0, [r4, #8]
 8107b6a:	4620      	mov	r0, r4
 8107b6c:	f000 f818 	bl	8107ba0 <__sfp>
 8107b70:	2200      	movs	r2, #0
 8107b72:	60e0      	str	r0, [r4, #12]
 8107b74:	2104      	movs	r1, #4
 8107b76:	6860      	ldr	r0, [r4, #4]
 8107b78:	f7ff ff82 	bl	8107a80 <std>
 8107b7c:	68a0      	ldr	r0, [r4, #8]
 8107b7e:	2201      	movs	r2, #1
 8107b80:	2109      	movs	r1, #9
 8107b82:	f7ff ff7d 	bl	8107a80 <std>
 8107b86:	68e0      	ldr	r0, [r4, #12]
 8107b88:	2202      	movs	r2, #2
 8107b8a:	2112      	movs	r1, #18
 8107b8c:	f7ff ff78 	bl	8107a80 <std>
 8107b90:	2301      	movs	r3, #1
 8107b92:	61a3      	str	r3, [r4, #24]
 8107b94:	e7d2      	b.n	8107b3c <__sinit+0xc>
 8107b96:	bf00      	nop
 8107b98:	0810820c 	.word	0x0810820c
 8107b9c:	08107ac9 	.word	0x08107ac9

08107ba0 <__sfp>:
 8107ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107ba2:	4607      	mov	r7, r0
 8107ba4:	f7ff ffac 	bl	8107b00 <__sfp_lock_acquire>
 8107ba8:	4b1e      	ldr	r3, [pc, #120]	; (8107c24 <__sfp+0x84>)
 8107baa:	681e      	ldr	r6, [r3, #0]
 8107bac:	69b3      	ldr	r3, [r6, #24]
 8107bae:	b913      	cbnz	r3, 8107bb6 <__sfp+0x16>
 8107bb0:	4630      	mov	r0, r6
 8107bb2:	f7ff ffbd 	bl	8107b30 <__sinit>
 8107bb6:	3648      	adds	r6, #72	; 0x48
 8107bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8107bbc:	3b01      	subs	r3, #1
 8107bbe:	d503      	bpl.n	8107bc8 <__sfp+0x28>
 8107bc0:	6833      	ldr	r3, [r6, #0]
 8107bc2:	b30b      	cbz	r3, 8107c08 <__sfp+0x68>
 8107bc4:	6836      	ldr	r6, [r6, #0]
 8107bc6:	e7f7      	b.n	8107bb8 <__sfp+0x18>
 8107bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8107bcc:	b9d5      	cbnz	r5, 8107c04 <__sfp+0x64>
 8107bce:	4b16      	ldr	r3, [pc, #88]	; (8107c28 <__sfp+0x88>)
 8107bd0:	60e3      	str	r3, [r4, #12]
 8107bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8107bd6:	6665      	str	r5, [r4, #100]	; 0x64
 8107bd8:	f000 f847 	bl	8107c6a <__retarget_lock_init_recursive>
 8107bdc:	f7ff ff96 	bl	8107b0c <__sfp_lock_release>
 8107be0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8107be4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8107be8:	6025      	str	r5, [r4, #0]
 8107bea:	61a5      	str	r5, [r4, #24]
 8107bec:	2208      	movs	r2, #8
 8107bee:	4629      	mov	r1, r5
 8107bf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8107bf4:	f7ff f996 	bl	8106f24 <memset>
 8107bf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8107bfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8107c00:	4620      	mov	r0, r4
 8107c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107c04:	3468      	adds	r4, #104	; 0x68
 8107c06:	e7d9      	b.n	8107bbc <__sfp+0x1c>
 8107c08:	2104      	movs	r1, #4
 8107c0a:	4638      	mov	r0, r7
 8107c0c:	f7ff ff62 	bl	8107ad4 <__sfmoreglue>
 8107c10:	4604      	mov	r4, r0
 8107c12:	6030      	str	r0, [r6, #0]
 8107c14:	2800      	cmp	r0, #0
 8107c16:	d1d5      	bne.n	8107bc4 <__sfp+0x24>
 8107c18:	f7ff ff78 	bl	8107b0c <__sfp_lock_release>
 8107c1c:	230c      	movs	r3, #12
 8107c1e:	603b      	str	r3, [r7, #0]
 8107c20:	e7ee      	b.n	8107c00 <__sfp+0x60>
 8107c22:	bf00      	nop
 8107c24:	0810820c 	.word	0x0810820c
 8107c28:	ffff0001 	.word	0xffff0001

08107c2c <_fwalk_reent>:
 8107c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107c30:	4606      	mov	r6, r0
 8107c32:	4688      	mov	r8, r1
 8107c34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8107c38:	2700      	movs	r7, #0
 8107c3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8107c3e:	f1b9 0901 	subs.w	r9, r9, #1
 8107c42:	d505      	bpl.n	8107c50 <_fwalk_reent+0x24>
 8107c44:	6824      	ldr	r4, [r4, #0]
 8107c46:	2c00      	cmp	r4, #0
 8107c48:	d1f7      	bne.n	8107c3a <_fwalk_reent+0xe>
 8107c4a:	4638      	mov	r0, r7
 8107c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107c50:	89ab      	ldrh	r3, [r5, #12]
 8107c52:	2b01      	cmp	r3, #1
 8107c54:	d907      	bls.n	8107c66 <_fwalk_reent+0x3a>
 8107c56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107c5a:	3301      	adds	r3, #1
 8107c5c:	d003      	beq.n	8107c66 <_fwalk_reent+0x3a>
 8107c5e:	4629      	mov	r1, r5
 8107c60:	4630      	mov	r0, r6
 8107c62:	47c0      	blx	r8
 8107c64:	4307      	orrs	r7, r0
 8107c66:	3568      	adds	r5, #104	; 0x68
 8107c68:	e7e9      	b.n	8107c3e <_fwalk_reent+0x12>

08107c6a <__retarget_lock_init_recursive>:
 8107c6a:	4770      	bx	lr

08107c6c <__retarget_lock_acquire_recursive>:
 8107c6c:	4770      	bx	lr

08107c6e <__retarget_lock_release_recursive>:
 8107c6e:	4770      	bx	lr

08107c70 <__swhatbuf_r>:
 8107c70:	b570      	push	{r4, r5, r6, lr}
 8107c72:	460e      	mov	r6, r1
 8107c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107c78:	2900      	cmp	r1, #0
 8107c7a:	b096      	sub	sp, #88	; 0x58
 8107c7c:	4614      	mov	r4, r2
 8107c7e:	461d      	mov	r5, r3
 8107c80:	da08      	bge.n	8107c94 <__swhatbuf_r+0x24>
 8107c82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8107c86:	2200      	movs	r2, #0
 8107c88:	602a      	str	r2, [r5, #0]
 8107c8a:	061a      	lsls	r2, r3, #24
 8107c8c:	d410      	bmi.n	8107cb0 <__swhatbuf_r+0x40>
 8107c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8107c92:	e00e      	b.n	8107cb2 <__swhatbuf_r+0x42>
 8107c94:	466a      	mov	r2, sp
 8107c96:	f000 f907 	bl	8107ea8 <_fstat_r>
 8107c9a:	2800      	cmp	r0, #0
 8107c9c:	dbf1      	blt.n	8107c82 <__swhatbuf_r+0x12>
 8107c9e:	9a01      	ldr	r2, [sp, #4]
 8107ca0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8107ca4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8107ca8:	425a      	negs	r2, r3
 8107caa:	415a      	adcs	r2, r3
 8107cac:	602a      	str	r2, [r5, #0]
 8107cae:	e7ee      	b.n	8107c8e <__swhatbuf_r+0x1e>
 8107cb0:	2340      	movs	r3, #64	; 0x40
 8107cb2:	2000      	movs	r0, #0
 8107cb4:	6023      	str	r3, [r4, #0]
 8107cb6:	b016      	add	sp, #88	; 0x58
 8107cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08107cbc <__smakebuf_r>:
 8107cbc:	898b      	ldrh	r3, [r1, #12]
 8107cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8107cc0:	079d      	lsls	r5, r3, #30
 8107cc2:	4606      	mov	r6, r0
 8107cc4:	460c      	mov	r4, r1
 8107cc6:	d507      	bpl.n	8107cd8 <__smakebuf_r+0x1c>
 8107cc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8107ccc:	6023      	str	r3, [r4, #0]
 8107cce:	6123      	str	r3, [r4, #16]
 8107cd0:	2301      	movs	r3, #1
 8107cd2:	6163      	str	r3, [r4, #20]
 8107cd4:	b002      	add	sp, #8
 8107cd6:	bd70      	pop	{r4, r5, r6, pc}
 8107cd8:	ab01      	add	r3, sp, #4
 8107cda:	466a      	mov	r2, sp
 8107cdc:	f7ff ffc8 	bl	8107c70 <__swhatbuf_r>
 8107ce0:	9900      	ldr	r1, [sp, #0]
 8107ce2:	4605      	mov	r5, r0
 8107ce4:	4630      	mov	r0, r6
 8107ce6:	f7ff f991 	bl	810700c <_malloc_r>
 8107cea:	b948      	cbnz	r0, 8107d00 <__smakebuf_r+0x44>
 8107cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107cf0:	059a      	lsls	r2, r3, #22
 8107cf2:	d4ef      	bmi.n	8107cd4 <__smakebuf_r+0x18>
 8107cf4:	f023 0303 	bic.w	r3, r3, #3
 8107cf8:	f043 0302 	orr.w	r3, r3, #2
 8107cfc:	81a3      	strh	r3, [r4, #12]
 8107cfe:	e7e3      	b.n	8107cc8 <__smakebuf_r+0xc>
 8107d00:	4b0d      	ldr	r3, [pc, #52]	; (8107d38 <__smakebuf_r+0x7c>)
 8107d02:	62b3      	str	r3, [r6, #40]	; 0x28
 8107d04:	89a3      	ldrh	r3, [r4, #12]
 8107d06:	6020      	str	r0, [r4, #0]
 8107d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8107d0c:	81a3      	strh	r3, [r4, #12]
 8107d0e:	9b00      	ldr	r3, [sp, #0]
 8107d10:	6163      	str	r3, [r4, #20]
 8107d12:	9b01      	ldr	r3, [sp, #4]
 8107d14:	6120      	str	r0, [r4, #16]
 8107d16:	b15b      	cbz	r3, 8107d30 <__smakebuf_r+0x74>
 8107d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107d1c:	4630      	mov	r0, r6
 8107d1e:	f000 f8d5 	bl	8107ecc <_isatty_r>
 8107d22:	b128      	cbz	r0, 8107d30 <__smakebuf_r+0x74>
 8107d24:	89a3      	ldrh	r3, [r4, #12]
 8107d26:	f023 0303 	bic.w	r3, r3, #3
 8107d2a:	f043 0301 	orr.w	r3, r3, #1
 8107d2e:	81a3      	strh	r3, [r4, #12]
 8107d30:	89a0      	ldrh	r0, [r4, #12]
 8107d32:	4305      	orrs	r5, r0
 8107d34:	81a5      	strh	r5, [r4, #12]
 8107d36:	e7cd      	b.n	8107cd4 <__smakebuf_r+0x18>
 8107d38:	08107ac9 	.word	0x08107ac9

08107d3c <__malloc_lock>:
 8107d3c:	4801      	ldr	r0, [pc, #4]	; (8107d44 <__malloc_lock+0x8>)
 8107d3e:	f7ff bf95 	b.w	8107c6c <__retarget_lock_acquire_recursive>
 8107d42:	bf00      	nop
 8107d44:	10000360 	.word	0x10000360

08107d48 <__malloc_unlock>:
 8107d48:	4801      	ldr	r0, [pc, #4]	; (8107d50 <__malloc_unlock+0x8>)
 8107d4a:	f7ff bf90 	b.w	8107c6e <__retarget_lock_release_recursive>
 8107d4e:	bf00      	nop
 8107d50:	10000360 	.word	0x10000360

08107d54 <_raise_r>:
 8107d54:	291f      	cmp	r1, #31
 8107d56:	b538      	push	{r3, r4, r5, lr}
 8107d58:	4604      	mov	r4, r0
 8107d5a:	460d      	mov	r5, r1
 8107d5c:	d904      	bls.n	8107d68 <_raise_r+0x14>
 8107d5e:	2316      	movs	r3, #22
 8107d60:	6003      	str	r3, [r0, #0]
 8107d62:	f04f 30ff 	mov.w	r0, #4294967295
 8107d66:	bd38      	pop	{r3, r4, r5, pc}
 8107d68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8107d6a:	b112      	cbz	r2, 8107d72 <_raise_r+0x1e>
 8107d6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8107d70:	b94b      	cbnz	r3, 8107d86 <_raise_r+0x32>
 8107d72:	4620      	mov	r0, r4
 8107d74:	f000 f830 	bl	8107dd8 <_getpid_r>
 8107d78:	462a      	mov	r2, r5
 8107d7a:	4601      	mov	r1, r0
 8107d7c:	4620      	mov	r0, r4
 8107d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107d82:	f000 b817 	b.w	8107db4 <_kill_r>
 8107d86:	2b01      	cmp	r3, #1
 8107d88:	d00a      	beq.n	8107da0 <_raise_r+0x4c>
 8107d8a:	1c59      	adds	r1, r3, #1
 8107d8c:	d103      	bne.n	8107d96 <_raise_r+0x42>
 8107d8e:	2316      	movs	r3, #22
 8107d90:	6003      	str	r3, [r0, #0]
 8107d92:	2001      	movs	r0, #1
 8107d94:	e7e7      	b.n	8107d66 <_raise_r+0x12>
 8107d96:	2400      	movs	r4, #0
 8107d98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8107d9c:	4628      	mov	r0, r5
 8107d9e:	4798      	blx	r3
 8107da0:	2000      	movs	r0, #0
 8107da2:	e7e0      	b.n	8107d66 <_raise_r+0x12>

08107da4 <raise>:
 8107da4:	4b02      	ldr	r3, [pc, #8]	; (8107db0 <raise+0xc>)
 8107da6:	4601      	mov	r1, r0
 8107da8:	6818      	ldr	r0, [r3, #0]
 8107daa:	f7ff bfd3 	b.w	8107d54 <_raise_r>
 8107dae:	bf00      	nop
 8107db0:	100000b8 	.word	0x100000b8

08107db4 <_kill_r>:
 8107db4:	b538      	push	{r3, r4, r5, lr}
 8107db6:	4d07      	ldr	r5, [pc, #28]	; (8107dd4 <_kill_r+0x20>)
 8107db8:	2300      	movs	r3, #0
 8107dba:	4604      	mov	r4, r0
 8107dbc:	4608      	mov	r0, r1
 8107dbe:	4611      	mov	r1, r2
 8107dc0:	602b      	str	r3, [r5, #0]
 8107dc2:	f7f8 fe1b 	bl	81009fc <_kill>
 8107dc6:	1c43      	adds	r3, r0, #1
 8107dc8:	d102      	bne.n	8107dd0 <_kill_r+0x1c>
 8107dca:	682b      	ldr	r3, [r5, #0]
 8107dcc:	b103      	cbz	r3, 8107dd0 <_kill_r+0x1c>
 8107dce:	6023      	str	r3, [r4, #0]
 8107dd0:	bd38      	pop	{r3, r4, r5, pc}
 8107dd2:	bf00      	nop
 8107dd4:	1000035c 	.word	0x1000035c

08107dd8 <_getpid_r>:
 8107dd8:	f7f8 be08 	b.w	81009ec <_getpid>

08107ddc <__sread>:
 8107ddc:	b510      	push	{r4, lr}
 8107dde:	460c      	mov	r4, r1
 8107de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107de4:	f000 f894 	bl	8107f10 <_read_r>
 8107de8:	2800      	cmp	r0, #0
 8107dea:	bfab      	itete	ge
 8107dec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8107dee:	89a3      	ldrhlt	r3, [r4, #12]
 8107df0:	181b      	addge	r3, r3, r0
 8107df2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8107df6:	bfac      	ite	ge
 8107df8:	6563      	strge	r3, [r4, #84]	; 0x54
 8107dfa:	81a3      	strhlt	r3, [r4, #12]
 8107dfc:	bd10      	pop	{r4, pc}

08107dfe <__swrite>:
 8107dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107e02:	461f      	mov	r7, r3
 8107e04:	898b      	ldrh	r3, [r1, #12]
 8107e06:	05db      	lsls	r3, r3, #23
 8107e08:	4605      	mov	r5, r0
 8107e0a:	460c      	mov	r4, r1
 8107e0c:	4616      	mov	r6, r2
 8107e0e:	d505      	bpl.n	8107e1c <__swrite+0x1e>
 8107e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e14:	2302      	movs	r3, #2
 8107e16:	2200      	movs	r2, #0
 8107e18:	f000 f868 	bl	8107eec <_lseek_r>
 8107e1c:	89a3      	ldrh	r3, [r4, #12]
 8107e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107e22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107e26:	81a3      	strh	r3, [r4, #12]
 8107e28:	4632      	mov	r2, r6
 8107e2a:	463b      	mov	r3, r7
 8107e2c:	4628      	mov	r0, r5
 8107e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107e32:	f000 b817 	b.w	8107e64 <_write_r>

08107e36 <__sseek>:
 8107e36:	b510      	push	{r4, lr}
 8107e38:	460c      	mov	r4, r1
 8107e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e3e:	f000 f855 	bl	8107eec <_lseek_r>
 8107e42:	1c43      	adds	r3, r0, #1
 8107e44:	89a3      	ldrh	r3, [r4, #12]
 8107e46:	bf15      	itete	ne
 8107e48:	6560      	strne	r0, [r4, #84]	; 0x54
 8107e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8107e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8107e52:	81a3      	strheq	r3, [r4, #12]
 8107e54:	bf18      	it	ne
 8107e56:	81a3      	strhne	r3, [r4, #12]
 8107e58:	bd10      	pop	{r4, pc}

08107e5a <__sclose>:
 8107e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e5e:	f000 b813 	b.w	8107e88 <_close_r>
	...

08107e64 <_write_r>:
 8107e64:	b538      	push	{r3, r4, r5, lr}
 8107e66:	4d07      	ldr	r5, [pc, #28]	; (8107e84 <_write_r+0x20>)
 8107e68:	4604      	mov	r4, r0
 8107e6a:	4608      	mov	r0, r1
 8107e6c:	4611      	mov	r1, r2
 8107e6e:	2200      	movs	r2, #0
 8107e70:	602a      	str	r2, [r5, #0]
 8107e72:	461a      	mov	r2, r3
 8107e74:	f7f8 fdfb 	bl	8100a6e <_write>
 8107e78:	1c43      	adds	r3, r0, #1
 8107e7a:	d102      	bne.n	8107e82 <_write_r+0x1e>
 8107e7c:	682b      	ldr	r3, [r5, #0]
 8107e7e:	b103      	cbz	r3, 8107e82 <_write_r+0x1e>
 8107e80:	6023      	str	r3, [r4, #0]
 8107e82:	bd38      	pop	{r3, r4, r5, pc}
 8107e84:	1000035c 	.word	0x1000035c

08107e88 <_close_r>:
 8107e88:	b538      	push	{r3, r4, r5, lr}
 8107e8a:	4d06      	ldr	r5, [pc, #24]	; (8107ea4 <_close_r+0x1c>)
 8107e8c:	2300      	movs	r3, #0
 8107e8e:	4604      	mov	r4, r0
 8107e90:	4608      	mov	r0, r1
 8107e92:	602b      	str	r3, [r5, #0]
 8107e94:	f7f8 fe07 	bl	8100aa6 <_close>
 8107e98:	1c43      	adds	r3, r0, #1
 8107e9a:	d102      	bne.n	8107ea2 <_close_r+0x1a>
 8107e9c:	682b      	ldr	r3, [r5, #0]
 8107e9e:	b103      	cbz	r3, 8107ea2 <_close_r+0x1a>
 8107ea0:	6023      	str	r3, [r4, #0]
 8107ea2:	bd38      	pop	{r3, r4, r5, pc}
 8107ea4:	1000035c 	.word	0x1000035c

08107ea8 <_fstat_r>:
 8107ea8:	b538      	push	{r3, r4, r5, lr}
 8107eaa:	4d07      	ldr	r5, [pc, #28]	; (8107ec8 <_fstat_r+0x20>)
 8107eac:	2300      	movs	r3, #0
 8107eae:	4604      	mov	r4, r0
 8107eb0:	4608      	mov	r0, r1
 8107eb2:	4611      	mov	r1, r2
 8107eb4:	602b      	str	r3, [r5, #0]
 8107eb6:	f7f8 fe02 	bl	8100abe <_fstat>
 8107eba:	1c43      	adds	r3, r0, #1
 8107ebc:	d102      	bne.n	8107ec4 <_fstat_r+0x1c>
 8107ebe:	682b      	ldr	r3, [r5, #0]
 8107ec0:	b103      	cbz	r3, 8107ec4 <_fstat_r+0x1c>
 8107ec2:	6023      	str	r3, [r4, #0]
 8107ec4:	bd38      	pop	{r3, r4, r5, pc}
 8107ec6:	bf00      	nop
 8107ec8:	1000035c 	.word	0x1000035c

08107ecc <_isatty_r>:
 8107ecc:	b538      	push	{r3, r4, r5, lr}
 8107ece:	4d06      	ldr	r5, [pc, #24]	; (8107ee8 <_isatty_r+0x1c>)
 8107ed0:	2300      	movs	r3, #0
 8107ed2:	4604      	mov	r4, r0
 8107ed4:	4608      	mov	r0, r1
 8107ed6:	602b      	str	r3, [r5, #0]
 8107ed8:	f7f8 fe01 	bl	8100ade <_isatty>
 8107edc:	1c43      	adds	r3, r0, #1
 8107ede:	d102      	bne.n	8107ee6 <_isatty_r+0x1a>
 8107ee0:	682b      	ldr	r3, [r5, #0]
 8107ee2:	b103      	cbz	r3, 8107ee6 <_isatty_r+0x1a>
 8107ee4:	6023      	str	r3, [r4, #0]
 8107ee6:	bd38      	pop	{r3, r4, r5, pc}
 8107ee8:	1000035c 	.word	0x1000035c

08107eec <_lseek_r>:
 8107eec:	b538      	push	{r3, r4, r5, lr}
 8107eee:	4d07      	ldr	r5, [pc, #28]	; (8107f0c <_lseek_r+0x20>)
 8107ef0:	4604      	mov	r4, r0
 8107ef2:	4608      	mov	r0, r1
 8107ef4:	4611      	mov	r1, r2
 8107ef6:	2200      	movs	r2, #0
 8107ef8:	602a      	str	r2, [r5, #0]
 8107efa:	461a      	mov	r2, r3
 8107efc:	f7f8 fdfa 	bl	8100af4 <_lseek>
 8107f00:	1c43      	adds	r3, r0, #1
 8107f02:	d102      	bne.n	8107f0a <_lseek_r+0x1e>
 8107f04:	682b      	ldr	r3, [r5, #0]
 8107f06:	b103      	cbz	r3, 8107f0a <_lseek_r+0x1e>
 8107f08:	6023      	str	r3, [r4, #0]
 8107f0a:	bd38      	pop	{r3, r4, r5, pc}
 8107f0c:	1000035c 	.word	0x1000035c

08107f10 <_read_r>:
 8107f10:	b538      	push	{r3, r4, r5, lr}
 8107f12:	4d07      	ldr	r5, [pc, #28]	; (8107f30 <_read_r+0x20>)
 8107f14:	4604      	mov	r4, r0
 8107f16:	4608      	mov	r0, r1
 8107f18:	4611      	mov	r1, r2
 8107f1a:	2200      	movs	r2, #0
 8107f1c:	602a      	str	r2, [r5, #0]
 8107f1e:	461a      	mov	r2, r3
 8107f20:	f7f8 fd88 	bl	8100a34 <_read>
 8107f24:	1c43      	adds	r3, r0, #1
 8107f26:	d102      	bne.n	8107f2e <_read_r+0x1e>
 8107f28:	682b      	ldr	r3, [r5, #0]
 8107f2a:	b103      	cbz	r3, 8107f2e <_read_r+0x1e>
 8107f2c:	6023      	str	r3, [r4, #0]
 8107f2e:	bd38      	pop	{r3, r4, r5, pc}
 8107f30:	1000035c 	.word	0x1000035c

08107f34 <_init>:
 8107f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107f36:	bf00      	nop
 8107f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107f3a:	bc08      	pop	{r3}
 8107f3c:	469e      	mov	lr, r3
 8107f3e:	4770      	bx	lr

08107f40 <_fini>:
 8107f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107f42:	bf00      	nop
 8107f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107f46:	bc08      	pop	{r3}
 8107f48:	469e      	mov	lr, r3
 8107f4a:	4770      	bx	lr
