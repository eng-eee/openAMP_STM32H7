
OpenAMP_demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ec  080061ec  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  080061ec  080061ec  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061ec  080061ec  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  24000000  080061f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  24000138  0800632c  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000270  0800632c  00020270  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  0800632c  00030000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012666  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003688  00000000  00000000  000327cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce0  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000427ef  00000000  00000000  000379b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001417f  00000000  00000000  0007a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00193946  00000000  00000000  0008e326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00221c6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004168  00000000  00000000  00221cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005eac 	.word	0x08005eac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	08005eac 	.word	0x08005eac

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003a4:	4b3d      	ldr	r3, [pc, #244]	; (800049c <SystemInit+0xfc>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003aa:	4a3c      	ldr	r2, [pc, #240]	; (800049c <SystemInit+0xfc>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003b4:	4b39      	ldr	r3, [pc, #228]	; (800049c <SystemInit+0xfc>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	4a38      	ldr	r2, [pc, #224]	; (800049c <SystemInit+0xfc>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <SystemInit+0x100>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 030f 	and.w	r3, r3, #15
 80003c8:	2b06      	cmp	r3, #6
 80003ca:	d807      	bhi.n	80003dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <SystemInit+0x100>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f023 030f 	bic.w	r3, r3, #15
 80003d4:	4a32      	ldr	r2, [pc, #200]	; (80004a0 <SystemInit+0x100>)
 80003d6:	f043 0307 	orr.w	r3, r3, #7
 80003da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <SystemInit+0x104>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a30      	ldr	r2, [pc, #192]	; (80004a4 <SystemInit+0x104>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e8:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <SystemInit+0x104>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ee:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <SystemInit+0x104>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	492c      	ldr	r1, [pc, #176]	; (80004a4 <SystemInit+0x104>)
 80003f4:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <SystemInit+0x108>)
 80003f6:	4013      	ands	r3, r2
 80003f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <SystemInit+0x100>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	2b00      	cmp	r3, #0
 8000404:	d007      	beq.n	8000416 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000406:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <SystemInit+0x100>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f023 030f 	bic.w	r3, r3, #15
 800040e:	4a24      	ldr	r2, [pc, #144]	; (80004a0 <SystemInit+0x100>)
 8000410:	f043 0307 	orr.w	r3, r3, #7
 8000414:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <SystemInit+0x104>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <SystemInit+0x104>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000422:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <SystemInit+0x104>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <SystemInit+0x104>)
 800042a:	4a20      	ldr	r2, [pc, #128]	; (80004ac <SystemInit+0x10c>)
 800042c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800042e:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <SystemInit+0x104>)
 8000430:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <SystemInit+0x110>)
 8000432:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <SystemInit+0x104>)
 8000436:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <SystemInit+0x114>)
 8000438:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800043a:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <SystemInit+0x104>)
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <SystemInit+0x104>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <SystemInit+0x114>)
 8000444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <SystemInit+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <SystemInit+0x104>)
 800044e:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <SystemInit+0x114>)
 8000450:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <SystemInit+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <SystemInit+0x104>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <SystemInit+0x104>)
 800045e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000462:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x104>)
 8000466:	2200      	movs	r2, #0
 8000468:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <SystemInit+0x118>)
 800046c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <SystemInit+0x118>)
 8000470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000474:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x11c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SystemInit+0x120>)
 800047c:	4013      	ands	r3, r2
 800047e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000482:	d202      	bcs.n	800048a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <SystemInit+0x124>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <SystemInit+0x128>)
 800048c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000490:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	52002000 	.word	0x52002000
 80004a4:	58024400 	.word	0x58024400
 80004a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004ac:	02020200 	.word	0x02020200
 80004b0:	01ff0000 	.word	0x01ff0000
 80004b4:	01010280 	.word	0x01010280
 80004b8:	580000c0 	.word	0x580000c0
 80004bc:	5c001000 	.word	0x5c001000
 80004c0:	ffff0000 	.word	0xffff0000
 80004c4:	51008108 	.word	0x51008108
 80004c8:	52004000 	.word	0x52004000

080004cc <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004e0:	d101      	bne.n	80004e6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <rpmsg_send+0x3c>)
 80004e4:	e00c      	b.n	8000500 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004ee:	2301      	movs	r3, #1
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f002 ffa3 	bl	8003444 <rpmsg_send_offchannel_raw>
 80004fe:	4603      	mov	r3, r0
					 len, true);
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	fffff829 	.word	0xfffff829

0800050c <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2220      	movs	r2, #32
 800051e:	68b9      	ldr	r1, [r7, #8]
 8000520:	4618      	mov	r0, r3
 8000522:	f005 f8cb 	bl	80056bc <strncpy>
	ept->addr = src;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	69ba      	ldr	r2, [r7, #24]
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800054e:	f000 f9c3 	bl	80008d8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000552:	4b6c      	ldr	r3, [pc, #432]	; (8000704 <main+0x1bc>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	2b00      	cmp	r3, #0
 800055c:	d11b      	bne.n	8000596 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800055e:	f3bf 8f4f 	dsb	sy
}
 8000562:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000564:	f3bf 8f6f 	isb	sy
}
 8000568:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800056a:	4b66      	ldr	r3, [pc, #408]	; (8000704 <main+0x1bc>)
 800056c:	2200      	movs	r2, #0
 800056e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000572:	f3bf 8f4f 	dsb	sy
}
 8000576:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000578:	f3bf 8f6f 	isb	sy
}
 800057c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800057e:	4b61      	ldr	r3, [pc, #388]	; (8000704 <main+0x1bc>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a60      	ldr	r2, [pc, #384]	; (8000704 <main+0x1bc>)
 8000584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000588:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800058a:	f3bf 8f4f 	dsb	sy
}
 800058e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000590:	f3bf 8f6f 	isb	sy
}
 8000594:	e000      	b.n	8000598 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000596:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000598:	4b5a      	ldr	r3, [pc, #360]	; (8000704 <main+0x1bc>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d138      	bne.n	8000616 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005a4:	4b57      	ldr	r3, [pc, #348]	; (8000704 <main+0x1bc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005ac:	f3bf 8f4f 	dsb	sy
}
 80005b0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005b2:	4b54      	ldr	r3, [pc, #336]	; (8000704 <main+0x1bc>)
 80005b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005b8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	0b5b      	lsrs	r3, r3, #13
 80005be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005c2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	08db      	lsrs	r3, r3, #3
 80005c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005cc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	015a      	lsls	r2, r3, #5
 80005d2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005dc:	4949      	ldr	r1, [pc, #292]	; (8000704 <main+0x1bc>)
 80005de:	4313      	orrs	r3, r2
 80005e0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	607a      	str	r2, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1ef      	bne.n	80005ce <main+0x86>
    } while(sets-- != 0U);
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	60ba      	str	r2, [r7, #8]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1e5      	bne.n	80005c4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
}
 80005fc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <main+0x1bc>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a40      	ldr	r2, [pc, #256]	; (8000704 <main+0x1bc>)
 8000604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000608:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060a:	f3bf 8f4f 	dsb	sy
}
 800060e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000610:	f3bf 8f6f 	isb	sy
}
 8000614:	e000      	b.n	8000618 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000616:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061c:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800061e:	bf00      	nop
 8000620:	4b39      	ldr	r3, [pc, #228]	; (8000708 <main+0x1c0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d004      	beq.n	8000636 <main+0xee>
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	1e5a      	subs	r2, r3, #1
 8000630:	617a      	str	r2, [r7, #20]
 8000632:	2b00      	cmp	r3, #0
 8000634:	dcf4      	bgt.n	8000620 <main+0xd8>
  if ( timeout < 0 )
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b00      	cmp	r3, #0
 800063a:	da01      	bge.n	8000640 <main+0xf8>
  {
  Error_Handler();
 800063c:	f000 f979 	bl	8000932 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fac0 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f86c 	bl	8000720 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <main+0x1c0>)
 800064a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064e:	4a2e      	ldr	r2, [pc, #184]	; (8000708 <main+0x1c0>)
 8000650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <main+0x1c0>)
 800065a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fcd6 	bl	8001018 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fcec 	bl	800104c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000678:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800067a:	bf00      	nop
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <main+0x1c0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000684:	2b00      	cmp	r3, #0
 8000686:	d104      	bne.n	8000692 <main+0x14a>
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	617a      	str	r2, [r7, #20]
 800068e:	2b00      	cmp	r3, #0
 8000690:	dcf4      	bgt.n	800067c <main+0x134>
if ( timeout < 0 )
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b00      	cmp	r3, #0
 8000696:	da01      	bge.n	800069c <main+0x154>
{
Error_Handler();
 8000698:	f000 f94b 	bl	8000932 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f000 f8ba 	bl	8000814 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  int32_t status = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]

  MAILBOX_Init();
 80006a4:	f004 f956 	bl	8004954 <MAILBOX_Init>

  rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 80006a8:	2300      	movs	r3, #0
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2300      	movs	r3, #0
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	4914      	ldr	r1, [pc, #80]	; (800070c <main+0x1c4>)
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <main+0x1c8>)
 80006bc:	f7ff ff26 	bl	800050c <rpmsg_init_ept>
                   NULL, NULL);

  if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80006c0:	4914      	ldr	r1, [pc, #80]	; (8000714 <main+0x1cc>)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f004 fa60 	bl	8004b88 <MX_OPENAMP_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <main+0x18a>
    Error_Handler();
 80006ce:	f000 f930 	bl	8000932 <Error_Handler>

  OPENAMP_Wait_EndPointready(&rp_endpoint);
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <main+0x1c8>)
 80006d4:	f004 fb24 	bl	8004d20 <OPENAMP_Wait_EndPointready>

  status = OPENAMP_send(&rp_endpoint, &str2cm4, sizeof(str2cm4));
 80006d8:	2219      	movs	r2, #25
 80006da:	490f      	ldr	r1, [pc, #60]	; (8000718 <main+0x1d0>)
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <main+0x1c8>)
 80006de:	f7ff fef5 	bl	80004cc <rpmsg_send>
 80006e2:	6138      	str	r0, [r7, #16]

  if( status < 0)
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	da04      	bge.n	80006f4 <main+0x1ac>
	  Error_Handler();
 80006ea:	f000 f922 	bl	8000932 <Error_Handler>

  while(service_created)
 80006ee:	e001      	b.n	80006f4 <main+0x1ac>
  {
	  OPENAMP_check_for_message();
 80006f0:	f004 fb0a 	bl	8004d08 <OPENAMP_check_for_message>
  while(service_created)
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <main+0x1d4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f9      	bne.n	80006f0 <main+0x1a8>
  }

  OPENAMP_DeInit();
 80006fc:	f004 fada 	bl	8004cb4 <OPENAMP_DeInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x1b8>
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	58024400 	.word	0x58024400
 800070c:	08005ec4 	.word	0x08005ec4
 8000710:	24000160 	.word	0x24000160
 8000714:	0800089d 	.word	0x0800089d
 8000718:	24000008 	.word	0x24000008
 800071c:	24000158 	.word	0x24000158

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	; 0x70
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	224c      	movs	r2, #76	; 0x4c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fbca 	bl	8004ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2220      	movs	r2, #32
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fbc4 	bl	8004ec8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000740:	2004      	movs	r0, #4
 8000742:	f000 fcc3 	bl	80010cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <SystemClock_Config+0xec>)
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	4a2f      	ldr	r2, [pc, #188]	; (800080c <SystemClock_Config+0xec>)
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <SystemClock_Config+0xec>)
 8000758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <SystemClock_Config+0xf0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <SystemClock_Config+0xf0>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xf0>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000778:	bf00      	nop
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xf0>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000786:	d1f8      	bne.n	800077a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	2302      	movs	r3, #2
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800079e:	230c      	movs	r3, #12
 80007a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007a6:	2305      	movs	r3, #5
 80007a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ae:	230c      	movs	r3, #12
 80007b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007b2:	2302      	movs	r3, #2
 80007b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fcde 	bl	8001180 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ca:	f000 f8b2 	bl	8000932 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	233f      	movs	r3, #63	; 0x3f
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f8f2 	bl	80019dc <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007fe:	f000 f898 	bl	8000932 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3770      	adds	r7, #112	; 0x70
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	58000400 	.word	0x58000400
 8000810:	58024800 	.word	0x58024800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_GPIO_Init+0x30>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <MX_GPIO_Init+0x30>)
 8000822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_GPIO_Init+0x30>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]

}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58024400 	.word	0x58024400

08000848 <rpmsg_recv_callback>:

/* USER CODE BEGIN 4 */

static int rpmsg_recv_callback(struct rpmsg_endpoint* ept, void* data, size_t len, uint32_t src, void* priv){
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	603b      	str	r3, [r7, #0]

	received_data_str = *((unsigned int*)data);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <rpmsg_recv_callback+0x2c>)
 800085c:	6013      	str	r3, [r2, #0]
	message_received = 1;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <rpmsg_recv_callback+0x30>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
	return 0;
 8000864:	2300      	movs	r3, #0

}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2400015c 	.word	0x2400015c
 8000878:	24000154 	.word	0x24000154

0800087c <service_destroy_cb>:

void service_destroy_cb(struct rpmsg_endpoint* ept){
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

	service_created = 0;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <service_destroy_cb+0x1c>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]

}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	24000158 	.word	0x24000158

0800089c <new_service_cb>:
void new_service_cb(struct rpmsg_endpoint* rdev, const char* name, uint32_t dest){
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]

	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback, service_destroy_cb);
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <new_service_cb+0x2c>)
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <new_service_cb+0x30>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <new_service_cb+0x34>)
 80008b4:	f004 fa0a 	bl	8004ccc <OPENAMP_create_endpoint>
	service_created = 1;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <new_service_cb+0x38>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	0800087d 	.word	0x0800087d
 80008cc:	08000849 	.word	0x08000849
 80008d0:	24000160 	.word	0x24000160
 80008d4:	24000158 	.word	0x24000158

080008d8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ea:	f000 fb19 	bl	8000f20 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ee:	2301      	movs	r3, #1
 80008f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80008f6:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80008fa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80008fc:	230f      	movs	r3, #15
 80008fe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000900:	2300      	movs	r3, #0
 8000902:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000904:	2300      	movs	r3, #0
 8000906:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000908:	2303      	movs	r3, #3
 800090a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000910:	2301      	movs	r3, #1
 8000912:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800091c:	463b      	mov	r3, r7
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fb36 	bl	8000f90 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000924:	2004      	movs	r0, #4
 8000926:	f000 fb13 	bl	8000f50 <HAL_MPU_Enable>

}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000936:	b672      	cpsid	i
}
 8000938:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093a:	e7fe      	b.n	800093a <Error_Handler+0x8>

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x3c>)
 8000944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <HAL_MspInit+0x3c>)
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x3c>)
 8000954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000958:	f003 0302 	and.w	r3, r3, #2
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	207d      	movs	r0, #125	; 0x7d
 8000966:	f000 faa6 	bl	8000eb6 <HAL_NVIC_SetPriority>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800096a:	207d      	movs	r0, #125	; 0x7d
 800096c:	f000 fabd 	bl	8000eea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	58024400 	.word	0x58024400

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f96e 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80009d4:	f000 fb60 	bl	8001098 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	return 1;
 80009e0:	2301      	movs	r3, #1
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_kill>:

int _kill(int pid, int sig)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <_kill+0x20>)
 80009f8:	2216      	movs	r2, #22
 80009fa:	601a      	str	r2, [r3, #0]
	return -1;
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	24000268 	.word	0x24000268

08000a10 <_exit>:

void _exit (int status)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ffe5 	bl	80009ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a22:	e7fe      	b.n	8000a22 <_exit+0x12>

08000a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e00a      	b.n	8000a4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a36:	f3af 8000 	nop.w
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf0      	blt.n	8000a36 <_read+0x12>
	}

return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e009      	b.n	8000a84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf1      	blt.n	8000a70 <_write+0x12>
	}
	return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_close>:

int _close(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	605a      	str	r2, [r3, #4]
	return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_isatty>:

int _isatty(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d205      	bcs.n	8000b3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <_sbrk+0x6c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	371c      	adds	r7, #28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	24080000 	.word	0x24080000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	240001a0 	.word	0x240001a0
 8000b68:	24000270 	.word	0x24000270
 8000b6c:	24000268 	.word	0x24000268

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b74:	f7ff fc14 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	; (8000bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f004 f951 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fcd1 	bl	8000548 <main>
  bx  lr
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bb0:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8000bb4:	080061f4 	.word	0x080061f4
  ldr r2, =_sbss
 8000bb8:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8000bbc:	24000270 	.word	0x24000270

08000bc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC3_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f968 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bd0:	f001 f8ba 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_Init+0x68>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	f003 030f 	and.w	r3, r3, #15
 8000be0:	4913      	ldr	r1, [pc, #76]	; (8000c30 <HAL_Init+0x6c>)
 8000be2:	5ccb      	ldrb	r3, [r1, r3]
 8000be4:	f003 031f 	and.w	r3, r3, #31
 8000be8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_Init+0x68>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_Init+0x6c>)
 8000bf8:	5cd3      	ldrb	r3, [r2, r3]
 8000bfa:	f003 031f 	and.w	r3, r3, #31
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	fa22 f303 	lsr.w	r3, r2, r3
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_Init+0x70>)
 8000c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_Init+0x74>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f814 	bl	8000c3c <HAL_InitTick>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e002      	b.n	8000c24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1e:	f7ff fe8d 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	080060a4 	.word	0x080060a4
 8000c34:	24000004 	.word	0x24000004
 8000c38:	24000000 	.word	0x24000000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_InitTick+0x60>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e021      	b.n	8000c94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_InitTick+0x64>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_InitTick+0x60>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f94d 	bl	8000f06 <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f917 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x68>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	24000028 	.word	0x24000028
 8000ca0:	24000000 	.word	0x24000000
 8000ca4:	24000024 	.word	0x24000024

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	24000028 	.word	0x24000028
 8000ccc:	240001a4 	.word	0x240001a4

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	240001a4 	.word	0x240001a4

08000ce8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetREVID+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	0c1b      	lsrs	r3, r3, #16
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	5c001000 	.word	0x5c001000

08000d00 <__NVIC_SetPriorityGrouping>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <__NVIC_SetPriorityGrouping+0x40>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x40>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	05fa0000 	.word	0x05fa0000

08000d48 <__NVIC_GetPriorityGrouping>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f7ff ff8e 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff29 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff40 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff90 	bl	8000df4 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5f 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff33 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa4 	bl	8000e5c <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f24:	f3bf 8f5f 	dmb	sy
}
 8000f28:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_MPU_Disable+0x28>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_MPU_Disable+0x28>)
 8000f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f34:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_MPU_Disable+0x2c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	e000ed90 	.word	0xe000ed90

08000f50 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_MPU_Enable+0x38>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_MPU_Enable+0x3c>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <HAL_MPU_Enable+0x3c>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f6e:	f3bf 8f4f 	dsb	sy
}
 8000f72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f74:	f3bf 8f6f 	isb	sy
}
 8000f78:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed90 	.word	0xe000ed90
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	785a      	ldrb	r2, [r3, #1]
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_MPU_ConfigRegion+0x84>)
 8000f9e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d029      	beq.n	8000ffc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000fa8:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <HAL_MPU_ConfigRegion+0x84>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7b1b      	ldrb	r3, [r3, #12]
 8000fb4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7adb      	ldrb	r3, [r3, #11]
 8000fba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7a9b      	ldrb	r3, [r3, #10]
 8000fc2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7b5b      	ldrb	r3, [r3, #13]
 8000fca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7b9b      	ldrb	r3, [r3, #14]
 8000fd2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7bdb      	ldrb	r3, [r3, #15]
 8000fda:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7a5b      	ldrb	r3, [r3, #9]
 8000fe2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fe4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a1b      	ldrb	r3, [r3, #8]
 8000fea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ff6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ff8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000ffa:	e005      	b.n	8001008 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_MPU_ConfigRegion+0x84>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <HAL_MPU_ConfigRegion+0x84>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed90 	.word	0xe000ed90

08001018 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_HSEM_FastTake+0x2c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3320      	adds	r3, #32
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_HSEM_FastTake+0x30>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	58026400 	.word	0x58026400
 8001048:	80000300 	.word	0x80000300

0800104c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001056:	4906      	ldr	r1, [pc, #24]	; (8001070 <HAL_HSEM_Release+0x24>)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58026400 	.word	0x58026400

08001074 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_HSEM_ActivateNotification+0x20>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4904      	ldr	r1, [pc, #16]	; (8001094 <HAL_HSEM_ActivateNotification+0x20>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
#endif
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	58026500 	.word	0x58026500

08001098 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_HSEM_IRQHandler+0x30>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_HSEM_IRQHandler+0x30>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4906      	ldr	r1, [pc, #24]	; (80010c8 <HAL_HSEM_IRQHandler+0x30>)
 80010ae:	4013      	ands	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_HSEM_IRQHandler+0x30>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f003 fc3b 	bl	8004934 <HAL_HSEM_FreeCallback>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	58026500 	.word	0x58026500

080010cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_PWREx_ConfigSupply+0xb0>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d00a      	beq.n	80010f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_PWREx_ConfigSupply+0xb0>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d001      	beq.n	80010f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e040      	b.n	8001174 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e03e      	b.n	8001174 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_PWREx_ConfigSupply+0xb0>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80010fe:	491f      	ldr	r1, [pc, #124]	; (800117c <HAL_PWREx_ConfigSupply+0xb0>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4313      	orrs	r3, r2
 8001104:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001106:	f7ff fde3 	bl	8000cd0 <HAL_GetTick>
 800110a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800110c:	e009      	b.n	8001122 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800110e:	f7ff fddf 	bl	8000cd0 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111c:	d901      	bls.n	8001122 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e028      	b.n	8001174 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_PWREx_ConfigSupply+0xb0>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800112a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800112e:	d1ee      	bne.n	800110e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b1e      	cmp	r3, #30
 8001134:	d008      	beq.n	8001148 <HAL_PWREx_ConfigSupply+0x7c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b2e      	cmp	r3, #46	; 0x2e
 800113a:	d005      	beq.n	8001148 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b1d      	cmp	r3, #29
 8001140:	d002      	beq.n	8001148 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b2d      	cmp	r3, #45	; 0x2d
 8001146:	d114      	bne.n	8001172 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001148:	f7ff fdc2 	bl	8000cd0 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800114e:	e009      	b.n	8001164 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001150:	f7ff fdbe 	bl	8000cd0 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800115e:	d901      	bls.n	8001164 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e007      	b.n	8001174 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_PWREx_ConfigSupply+0xb0>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d1ee      	bne.n	8001150 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	58024800 	.word	0x58024800

08001180 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	f000 bc1d 	b.w	80019ce <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 8087 	beq.w	80012b0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a2:	4b99      	ldr	r3, [pc, #612]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011ac:	4b96      	ldr	r3, [pc, #600]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	2b10      	cmp	r3, #16
 80011b6:	d007      	beq.n	80011c8 <HAL_RCC_OscConfig+0x48>
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	2b18      	cmp	r3, #24
 80011bc:	d110      	bne.n	80011e0 <HAL_RCC_OscConfig+0x60>
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d10b      	bne.n	80011e0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	4b8f      	ldr	r3, [pc, #572]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d06c      	beq.n	80012ae <HAL_RCC_OscConfig+0x12e>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d168      	bne.n	80012ae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e3f6      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d106      	bne.n	80011f8 <HAL_RCC_OscConfig+0x78>
 80011ea:	4b87      	ldr	r3, [pc, #540]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a86      	ldr	r2, [pc, #536]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e02e      	b.n	8001256 <HAL_RCC_OscConfig+0xd6>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10c      	bne.n	800121a <HAL_RCC_OscConfig+0x9a>
 8001200:	4b81      	ldr	r3, [pc, #516]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a80      	ldr	r2, [pc, #512]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b7e      	ldr	r3, [pc, #504]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a7d      	ldr	r2, [pc, #500]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e01d      	b.n	8001256 <HAL_RCC_OscConfig+0xd6>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0xbe>
 8001224:	4b78      	ldr	r3, [pc, #480]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a77      	ldr	r2, [pc, #476]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800122a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b75      	ldr	r3, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a74      	ldr	r2, [pc, #464]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e00b      	b.n	8001256 <HAL_RCC_OscConfig+0xd6>
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a71      	ldr	r2, [pc, #452]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b6f      	ldr	r3, [pc, #444]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6e      	ldr	r2, [pc, #440]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d013      	beq.n	8001286 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fd37 	bl	8000cd0 <HAL_GetTick>
 8001262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001266:	f7ff fd33 	bl	8000cd0 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b64      	cmp	r3, #100	; 0x64
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e3aa      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001278:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0xe6>
 8001284:	e014      	b.n	80012b0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fd23 	bl	8000cd0 <HAL_GetTick>
 800128a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128e:	f7ff fd1f 	bl	8000cd0 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e396      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0x10e>
 80012ac:	e000      	b.n	80012b0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80cb 	beq.w	8001454 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012be:	4b52      	ldr	r3, [pc, #328]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_RCC_OscConfig+0x164>
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b18      	cmp	r3, #24
 80012d8:	d156      	bne.n	8001388 <HAL_RCC_OscConfig+0x208>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d151      	bne.n	8001388 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_OscConfig+0x17c>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e368      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 0219 	bic.w	r2, r3, #25
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	493f      	ldr	r1, [pc, #252]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800130e:	f7ff fcdf 	bl	8000cd0 <HAL_GetTick>
 8001312:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fcdb 	bl	8000cd0 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e352      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	f7ff fcd8 	bl	8000ce8 <HAL_GetREVID>
 8001338:	4603      	mov	r3, r0
 800133a:	f241 0203 	movw	r2, #4099	; 0x1003
 800133e:	4293      	cmp	r3, r2
 8001340:	d817      	bhi.n	8001372 <HAL_RCC_OscConfig+0x1f2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b40      	cmp	r3, #64	; 0x40
 8001348:	d108      	bne.n	800135c <HAL_RCC_OscConfig+0x1dc>
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135a:	e07b      	b.n	8001454 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	031b      	lsls	r3, r3, #12
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001370:	e070      	b.n	8001454 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	061b      	lsls	r3, r3, #24
 8001380:	4921      	ldr	r1, [pc, #132]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001386:	e065      	b.n	8001454 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d048      	beq.n	8001422 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0219 	bic.w	r2, r3, #25
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	491a      	ldr	r1, [pc, #104]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff fc95 	bl	8000cd0 <HAL_GetTick>
 80013a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc91 	bl	8000cd0 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e308      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	f7ff fc8e 	bl	8000ce8 <HAL_GetREVID>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d81a      	bhi.n	800140c <HAL_RCC_OscConfig+0x28c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b40      	cmp	r3, #64	; 0x40
 80013dc:	d108      	bne.n	80013f0 <HAL_RCC_OscConfig+0x270>
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013e6:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ec:	6053      	str	r3, [r2, #4]
 80013ee:	e031      	b.n	8001454 <HAL_RCC_OscConfig+0x2d4>
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	031b      	lsls	r3, r3, #12
 80013fe:	4902      	ldr	r1, [pc, #8]	; (8001408 <HAL_RCC_OscConfig+0x288>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e026      	b.n	8001454 <HAL_RCC_OscConfig+0x2d4>
 8001406:	bf00      	nop
 8001408:	58024400 	.word	0x58024400
 800140c:	4b9a      	ldr	r3, [pc, #616]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	4997      	ldr	r1, [pc, #604]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b95      	ldr	r3, [pc, #596]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a94      	ldr	r2, [pc, #592]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fc4f 	bl	8000cd0 <HAL_GetTick>
 8001432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc4b 	bl	8000cd0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e2c2      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001448:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a9 	beq.w	80015b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001462:	4b85      	ldr	r3, [pc, #532]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800146a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800146c:	4b82      	ldr	r3, [pc, #520]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d007      	beq.n	8001488 <HAL_RCC_OscConfig+0x308>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b18      	cmp	r3, #24
 800147c:	d13a      	bne.n	80014f4 <HAL_RCC_OscConfig+0x374>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d135      	bne.n	80014f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001488:	4b7b      	ldr	r3, [pc, #492]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x320>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b80      	cmp	r3, #128	; 0x80
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e296      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a0:	f7ff fc22 	bl	8000ce8 <HAL_GetREVID>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d817      	bhi.n	80014de <HAL_RCC_OscConfig+0x35e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	d108      	bne.n	80014c8 <HAL_RCC_OscConfig+0x348>
 80014b6:	4b70      	ldr	r3, [pc, #448]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014be:	4a6e      	ldr	r2, [pc, #440]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c6:	e075      	b.n	80015b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014c8:	4b6b      	ldr	r3, [pc, #428]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	069b      	lsls	r3, r3, #26
 80014d6:	4968      	ldr	r1, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014dc:	e06a      	b.n	80015b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014de:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	4962      	ldr	r1, [pc, #392]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014f2:	e05f      	b.n	80015b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d042      	beq.n	8001582 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014fc:	4b5e      	ldr	r3, [pc, #376]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a5d      	ldr	r2, [pc, #372]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fbe2 	bl	8000cd0 <HAL_GetTick>
 800150c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001510:	f7ff fbde 	bl	8000cd0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e255      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001522:	4b55      	ldr	r3, [pc, #340]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800152e:	f7ff fbdb 	bl	8000ce8 <HAL_GetREVID>
 8001532:	4603      	mov	r3, r0
 8001534:	f241 0203 	movw	r2, #4099	; 0x1003
 8001538:	4293      	cmp	r3, r2
 800153a:	d817      	bhi.n	800156c <HAL_RCC_OscConfig+0x3ec>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	2b20      	cmp	r3, #32
 8001542:	d108      	bne.n	8001556 <HAL_RCC_OscConfig+0x3d6>
 8001544:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800154e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001552:	6053      	str	r3, [r2, #4]
 8001554:	e02e      	b.n	80015b4 <HAL_RCC_OscConfig+0x434>
 8001556:	4b48      	ldr	r3, [pc, #288]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	069b      	lsls	r3, r3, #26
 8001564:	4944      	ldr	r1, [pc, #272]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
 800156a:	e023      	b.n	80015b4 <HAL_RCC_OscConfig+0x434>
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	493f      	ldr	r1, [pc, #252]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800157c:	4313      	orrs	r3, r2
 800157e:	60cb      	str	r3, [r1, #12]
 8001580:	e018      	b.n	80015b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001582:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a3c      	ldr	r2, [pc, #240]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fb9f 	bl	8000cd0 <HAL_GetTick>
 8001592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001596:	f7ff fb9b 	bl	8000cd0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e212      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d036      	beq.n	800162e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d019      	beq.n	80015fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80015ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015cc:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb7c 	bl	8000cd0 <HAL_GetTick>
 80015d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fb78 	bl	8000cd0 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e1ef      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80015f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x45c>
 80015fa:	e018      	b.n	800162e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff fb62 	bl	8000cd0 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff fb5e 	bl	8000cd0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1d5      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	2b00      	cmp	r3, #0
 8001638:	d039      	beq.n	80016ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01c      	beq.n	800167c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800164c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800164e:	f7ff fb3f 	bl	8000cd0 <HAL_GetTick>
 8001652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001656:	f7ff fb3b 	bl	8000cd0 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1b2      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x4d6>
 8001674:	e01b      	b.n	80016ae <HAL_RCC_OscConfig+0x52e>
 8001676:	bf00      	nop
 8001678:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800167c:	4b9b      	ldr	r3, [pc, #620]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a9a      	ldr	r2, [pc, #616]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001686:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001688:	f7ff fb22 	bl	8000cd0 <HAL_GetTick>
 800168c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001690:	f7ff fb1e 	bl	8000cd0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e195      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016a2:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8081 	beq.w	80017be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x770>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a8b      	ldr	r2, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x770>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fb02 	bl	8000cd0 <HAL_GetTick>
 80016cc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff fafe 	bl	8000cd0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e175      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <HAL_RCC_OscConfig+0x770>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d106      	bne.n	8001704 <HAL_RCC_OscConfig+0x584>
 80016f6:	4b7d      	ldr	r3, [pc, #500]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a7c      	ldr	r2, [pc, #496]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	e02d      	b.n	8001760 <HAL_RCC_OscConfig+0x5e0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10c      	bne.n	8001726 <HAL_RCC_OscConfig+0x5a6>
 800170c:	4b77      	ldr	r3, [pc, #476]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a76      	ldr	r2, [pc, #472]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	4b74      	ldr	r3, [pc, #464]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a73      	ldr	r2, [pc, #460]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	e01c      	b.n	8001760 <HAL_RCC_OscConfig+0x5e0>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x5c8>
 800172e:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	4b6c      	ldr	r3, [pc, #432]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	4a6b      	ldr	r2, [pc, #428]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	; 0x70
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x5e0>
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	4a67      	ldr	r2, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	; 0x70
 8001754:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001758:	4a64      	ldr	r2, [pc, #400]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fab2 	bl	8000cd0 <HAL_GetTick>
 800176c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff faae 	bl	8000cd0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e123      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001786:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0ee      	beq.n	8001770 <HAL_RCC_OscConfig+0x5f0>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fa9c 	bl	8000cd0 <HAL_GetTick>
 8001798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fa98 	bl	8000cd0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e10d      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ee      	bne.n	800179c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8102 	beq.w	80019cc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017c8:	4b48      	ldr	r3, [pc, #288]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017d0:	2b18      	cmp	r3, #24
 80017d2:	f000 80bd 	beq.w	8001950 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2b02      	cmp	r3, #2
 80017dc:	f040 809e 	bne.w	800191c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b42      	ldr	r3, [pc, #264]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a41      	ldr	r2, [pc, #260]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa70 	bl	8000cd0 <HAL_GetTick>
 80017f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fa6c 	bl	8000cd0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0e3      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001806:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCC_OscConfig+0x774>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	430a      	orrs	r2, r1
 8001826:	4931      	ldr	r1, [pc, #196]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	628b      	str	r3, [r1, #40]	; 0x28
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	3b01      	subs	r3, #1
 8001832:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	3b01      	subs	r3, #1
 800183c:	025b      	lsls	r3, r3, #9
 800183e:	b29b      	uxth	r3, r3
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	3b01      	subs	r3, #1
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	3b01      	subs	r3, #1
 8001856:	061b      	lsls	r3, r3, #24
 8001858:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800185c:	4923      	ldr	r1, [pc, #140]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x778>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800187a:	00d2      	lsls	r2, r2, #3
 800187c:	491b      	ldr	r1, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 800187e:	4313      	orrs	r3, r2
 8001880:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	f023 020c 	bic.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4917      	ldr	r1, [pc, #92]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001890:	4313      	orrs	r3, r2
 8001892:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	f023 0202 	bic.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	4912      	ldr	r1, [pc, #72]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_RCC_OscConfig+0x76c>)
 80018dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff f9f5 	bl	8000cd0 <HAL_GetTick>
 80018e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e8:	e011      	b.n	800190e <HAL_RCC_OscConfig+0x78e>
 80018ea:	bf00      	nop
 80018ec:	58024400 	.word	0x58024400
 80018f0:	58024800 	.word	0x58024800
 80018f4:	fffffc0c 	.word	0xfffffc0c
 80018f8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f9e8 	bl	8000cd0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e05f      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x858>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x77c>
 800191a:	e057      	b.n	80019cc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_RCC_OscConfig+0x858>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <HAL_RCC_OscConfig+0x858>)
 8001922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f9d2 	bl	8000cd0 <HAL_GetTick>
 800192c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f9ce 	bl	8000cd0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e045      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001942:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0x858>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x7b0>
 800194e:	e03d      	b.n	80019cc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_RCC_OscConfig+0x858>)
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_RCC_OscConfig+0x858>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b01      	cmp	r3, #1
 8001962:	d031      	beq.n	80019c8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f003 0203 	and.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d12a      	bne.n	80019c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d122      	bne.n	80019c8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d11a      	bne.n	80019c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0a5b      	lsrs	r3, r3, #9
 8001996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d111      	bne.n	80019c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	0e1b      	lsrs	r3, r3, #24
 80019ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3730      	adds	r7, #48	; 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	58024400 	.word	0x58024400

080019dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e19c      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b8a      	ldr	r3, [pc, #552]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d910      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b87      	ldr	r3, [pc, #540]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 020f 	bic.w	r2, r3, #15
 8001a06:	4985      	ldr	r1, [pc, #532]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b83      	ldr	r3, [pc, #524]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e184      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d010      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d908      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a3c:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	4975      	ldr	r1, [pc, #468]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d010      	beq.n	8001a7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a6a:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	496a      	ldr	r1, [pc, #424]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d010      	beq.n	8001aaa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	4b64      	ldr	r3, [pc, #400]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d908      	bls.n	8001aaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a98:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	495e      	ldr	r1, [pc, #376]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d908      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4953      	ldr	r1, [pc, #332]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d010      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d908      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f023 020f 	bic.w	r2, r3, #15
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4947      	ldr	r1, [pc, #284]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d055      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4940      	ldr	r1, [pc, #256]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d121      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0f6      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d115      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0ea      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b5c:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0de      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0d6      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f023 0207 	bic.w	r2, r3, #7
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4925      	ldr	r1, [pc, #148]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f89f 	bl	8000cd0 <HAL_GetTick>
 8001b92:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f89b 	bl	8000cd0 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0be      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d1eb      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d010      	beq.n	8001bec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d208      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f023 020f 	bic.w	r2, r3, #15
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <HAL_RCC_ClockConfig+0x244>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d214      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 020f 	bic.w	r2, r3, #15
 8001c02:	4906      	ldr	r1, [pc, #24]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_RCC_ClockConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e086      	b.n	8001d2a <HAL_RCC_ClockConfig+0x34e>
 8001c1c:	52002000 	.word	0x52002000
 8001c20:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d010      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d208      	bcs.n	8001c52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c40:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4939      	ldr	r1, [pc, #228]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d010      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d208      	bcs.n	8001c80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	492e      	ldr	r1, [pc, #184]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d208      	bcs.n	8001cae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d208      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4917      	ldr	r1, [pc, #92]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cdc:	f000 f834 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	4912      	ldr	r1, [pc, #72]	; (8001d38 <HAL_RCC_ClockConfig+0x35c>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_RCC_ClockConfig+0x358>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_RCC_ClockConfig+0x35c>)
 8001d04:	5cd3      	ldrb	r3, [r2, r3]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x360>)
 8001d12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x364>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_RCC_ClockConfig+0x368>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe ff8c 	bl	8000c3c <HAL_InitTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	58024400 	.word	0x58024400
 8001d38:	080060a4 	.word	0x080060a4
 8001d3c:	24000004 	.word	0x24000004
 8001d40:	24000000 	.word	0x24000000
 8001d44:	24000024 	.word	0x24000024

08001d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d4e:	4bb3      	ldr	r3, [pc, #716]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d56:	2b18      	cmp	r3, #24
 8001d58:	f200 8155 	bhi.w	8002006 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d5c:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d62:	bf00      	nop
 8001d64:	08001dc9 	.word	0x08001dc9
 8001d68:	08002007 	.word	0x08002007
 8001d6c:	08002007 	.word	0x08002007
 8001d70:	08002007 	.word	0x08002007
 8001d74:	08002007 	.word	0x08002007
 8001d78:	08002007 	.word	0x08002007
 8001d7c:	08002007 	.word	0x08002007
 8001d80:	08002007 	.word	0x08002007
 8001d84:	08001def 	.word	0x08001def
 8001d88:	08002007 	.word	0x08002007
 8001d8c:	08002007 	.word	0x08002007
 8001d90:	08002007 	.word	0x08002007
 8001d94:	08002007 	.word	0x08002007
 8001d98:	08002007 	.word	0x08002007
 8001d9c:	08002007 	.word	0x08002007
 8001da0:	08002007 	.word	0x08002007
 8001da4:	08001df5 	.word	0x08001df5
 8001da8:	08002007 	.word	0x08002007
 8001dac:	08002007 	.word	0x08002007
 8001db0:	08002007 	.word	0x08002007
 8001db4:	08002007 	.word	0x08002007
 8001db8:	08002007 	.word	0x08002007
 8001dbc:	08002007 	.word	0x08002007
 8001dc0:	08002007 	.word	0x08002007
 8001dc4:	08001dfb 	.word	0x08001dfb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dc8:	4b94      	ldr	r3, [pc, #592]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dd4:	4b91      	ldr	r3, [pc, #580]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	4a90      	ldr	r2, [pc, #576]	; (8002020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
 8001de4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001de6:	e111      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001de8:	4b8d      	ldr	r3, [pc, #564]	; (8002020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dea:	61bb      	str	r3, [r7, #24]
    break;
 8001dec:	e10e      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dee:	4b8d      	ldr	r3, [pc, #564]	; (8002024 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001df0:	61bb      	str	r3, [r7, #24]
    break;
 8001df2:	e10b      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001df6:	61bb      	str	r3, [r7, #24]
    break;
 8001df8:	e108      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dfa:	4b88      	ldr	r3, [pc, #544]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001e04:	4b85      	ldr	r3, [pc, #532]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e10:	4b82      	ldr	r3, [pc, #520]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e1a:	4b80      	ldr	r3, [pc, #512]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80e1 	beq.w	8002000 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	f000 8083 	beq.w	8001f4c <HAL_RCC_GetSysClockFreq+0x204>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	f200 80a1 	bhi.w	8001f90 <HAL_RCC_GetSysClockFreq+0x248>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x114>
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d056      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e5a:	e099      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d02d      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e68:	4b6c      	ldr	r3, [pc, #432]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	4a6b      	ldr	r2, [pc, #428]	; (8002020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e92:	4b62      	ldr	r3, [pc, #392]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800202c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ec2:	e087      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002030 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed6:	4b51      	ldr	r3, [pc, #324]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800202c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f06:	e065      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002034 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f1a:	4b40      	ldr	r3, [pc, #256]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800202c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f4a:	e043      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002038 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800202c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f8e:	e021      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002034 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800202c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fd2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	0a5b      	lsrs	r3, r3, #9
 8001fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fde:	3301      	adds	r3, #1
 8001fe0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff8:	ee17 3a90 	vmov	r3, s15
 8001ffc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001ffe:	e005      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
    break;
 8002004:	e002      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002008:	61bb      	str	r3, [r7, #24]
    break;
 800200a:	bf00      	nop
  }

  return sysclockfreq;
 800200c:	69bb      	ldr	r3, [r7, #24]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	58024400 	.word	0x58024400
 8002020:	03d09000 	.word	0x03d09000
 8002024:	003d0900 	.word	0x003d0900
 8002028:	017d7840 	.word	0x017d7840
 800202c:	46000000 	.word	0x46000000
 8002030:	4c742400 	.word	0x4c742400
 8002034:	4a742400 	.word	0x4a742400
 8002038:	4bbebc20 	.word	0x4bbebc20

0800203c <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800209c:	6839      	ldr	r1, [r7, #0]
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffdd 	bl	800205e <metal_list_add_before>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6852      	ldr	r2, [r2, #4]
 80020bc:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	601a      	str	r2, [r3, #0]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f002 f846 	bl	8004180 <metal_machine_cache_flush>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8002106:	6839      	ldr	r1, [r7, #0]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f002 f844 	bl	8004196 <metal_machine_cache_invalidate>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8002120:	6839      	ldr	r1, [r7, #0]
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffdd 	bl	80020e2 <__metal_cache_flush>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffdd 	bl	80020fc <__metal_cache_invalidate>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <metal_bus_register+0x20>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <metal_bus_register+0x20>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <metal_bus_register+0x26>
		return -EINVAL;
 800216c:	f06f 0315 	mvn.w	r3, #21
 8002170:	e026      	b.n	80021c0 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f855 	bl	8002228 <metal_bus_find>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <metal_bus_register+0x3e>
		return -EEXIST;
 8002184:	f06f 0310 	mvn.w	r3, #16
 8002188:	e01a      	b.n	80021c0 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	331c      	adds	r3, #28
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff54 	bl	800203c <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3324      	adds	r3, #36	; 0x24
 8002198:	4619      	mov	r1, r3
 800219a:	480b      	ldr	r0, [pc, #44]	; (80021c8 <metal_bus_register+0x7c>)
 800219c:	f7ff ff79 	bl	8002092 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <metal_bus_register+0x80>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b06      	cmp	r3, #6
 80021a6:	d90a      	bls.n	80021be <metal_bus_register+0x72>
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <metal_bus_register+0x80>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <metal_bus_register+0x72>
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <metal_bus_register+0x80>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4905      	ldr	r1, [pc, #20]	; (80021d0 <metal_bus_register+0x84>)
 80021ba:	2007      	movs	r0, #7
 80021bc:	4798      	blx	r3
	return 0;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	240001b0 	.word	0x240001b0
 80021cc:	240001a8 	.word	0x240001a8
 80021d0:	08005ed4 	.word	0x08005ed4

080021d4 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3324      	adds	r3, #36	; 0x24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff63 	bl	80020ac <metal_list_del>
	if (bus->ops.bus_close)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <metal_bus_unregister+0x4c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d90a      	bls.n	8002214 <metal_bus_unregister+0x40>
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <metal_bus_unregister+0x4c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <metal_bus_unregister+0x40>
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <metal_bus_unregister+0x4c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	4905      	ldr	r1, [pc, #20]	; (8002224 <metal_bus_unregister+0x50>)
 8002210:	2007      	movs	r0, #7
 8002212:	4798      	blx	r3
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	240001a8 	.word	0x240001a8
 8002224:	08005ee8 	.word	0x08005ee8

08002228 <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <metal_bus_find+0x58>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e017      	b.n	800226a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3b24      	subs	r3, #36	; 0x24
 800223e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f84a 	bl	80002e0 <strcmp>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e007      	b.n	800226a <metal_bus_find+0x42>
			continue;
		if (result)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <metal_bus_find+0x3e>
			*result = bus;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	601a      	str	r2, [r3, #0]
		return 0;
 8002266:	2300      	movs	r3, #0
 8002268:	e005      	b.n	8002276 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a05      	ldr	r2, [pc, #20]	; (8002284 <metal_bus_find+0x5c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d1e3      	bne.n	800223a <metal_bus_find+0x12>
	}
	return -ENOENT;
 8002272:	f06f 0301 	mvn.w	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	240001a8 	.word	0x240001a8
 8002284:	240001b0 	.word	0x240001b0

08002288 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00d      	beq.n	80022b6 <metal_device_open+0x2e>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <metal_device_open+0x2e>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <metal_device_open+0x2e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 80022b6:	f06f 0315 	mvn.w	r3, #21
 80022ba:	e01f      	b.n	80022fc <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f7ff ffb0 	bl	8002228 <metal_bus_find>
 80022c8:	6178      	str	r0, [r7, #20]
	if (error)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <metal_device_open+0x4c>
		return error;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	e013      	b.n	80022fc <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <metal_device_open+0x5a>
		return -ENODEV;
 80022dc:	f06f 0312 	mvn.w	r3, #18
 80022e0:	e00c      	b.n	80022fc <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	6938      	ldr	r0, [r7, #16]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	4798      	blx	r3
 80022ee:	6178      	str	r0, [r7, #20]
	if (error)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <metal_device_open+0x72>
		return error;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	e000      	b.n	80022fc <metal_device_open+0x74>

	return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <metal_register_generic_device+0x22>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8002322:	2b02      	cmp	r3, #2
 8002324:	d902      	bls.n	800232c <metal_register_generic_device+0x28>
		return -EINVAL;
 8002326:	f06f 0315 	mvn.w	r3, #21
 800232a:	e009      	b.n	8002340 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a06      	ldr	r2, [pc, #24]	; (8002348 <metal_register_generic_device+0x44>)
 8002330:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	336c      	adds	r3, #108	; 0x6c
 8002336:	4619      	mov	r1, r3
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <metal_register_generic_device+0x48>)
 800233a:	f7ff feaa 	bl	8002092 <metal_list_add_tail>
			    &device->node);
	return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2400002c 	.word	0x2400002c
 800234c:	240001c0 	.word	0x240001c0

08002350 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <metal_generic_dev_open+0x58>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e017      	b.n	8002394 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3b6c      	subs	r3, #108	; 0x6c
 8002368:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fd ffb5 	bl	80002e0 <strcmp>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e007      	b.n	8002394 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 800238a:	6938      	ldr	r0, [r7, #16]
 800238c:	f000 f88c 	bl	80024a8 <metal_generic_dev_sys_open>
 8002390:	4603      	mov	r3, r0
 8002392:	e005      	b.n	80023a0 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	4a05      	ldr	r2, [pc, #20]	; (80023ac <metal_generic_dev_open+0x5c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d1e3      	bne.n	8002364 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 800239c:	f06f 0312 	mvn.w	r3, #18
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	240001a8 	.word	0x240001a8
 80023ac:	240001c0 	.word	0x240001c0

080023b0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 80023be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d009      	beq.n	80023da <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 80023c6:	6a3a      	ldr	r2, [r7, #32]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023d6:	f002 fd69 	bl	8004eac <memcpy>
	for (i = 0; i < nents_in; i++) {
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e02f      	b.n	8002440 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d114      	bne.n	8002410 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	4413      	add	r3, r2
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	4413      	add	r3, r2
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4619      	mov	r1, r3
 800240c:	f7ff fe83 	bl	8002116 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	461a      	mov	r2, r3
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	4413      	add	r3, r2
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	461a      	mov	r2, r3
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	4413      	add	r3, r2
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4619      	mov	r1, r3
 8002436:	f7ff fe7b 	bl	8002130 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	429a      	cmp	r2, r3
 8002446:	dbcb      	blt.n	80023e0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8002448:	6a3b      	ldr	r3, [r7, #32]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e017      	b.n	8002496 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	461a      	mov	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	4413      	add	r3, r2
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	461a      	mov	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4413      	add	r3, r2
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4619      	mov	r1, r3
 800248c:	f7ff fe50 	bl	8002130 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	429a      	cmp	r2, r3
 800249c:	dbe3      	blt.n	8002466 <metal_generic_dev_dma_unmap+0x14>
	}
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e013      	b.n	80024de <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	3308      	adds	r3, #8
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	3304      	adds	r3, #4
 80024c8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f000 f828 	bl	8002528 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d3e6      	bcc.n	80024b6 <metal_generic_dev_sys_open+0xe>
 80024e8:	e000      	b.n	80024ec <metal_generic_dev_sys_open+0x44>
			break;
 80024ea:	bf00      	nop
	}

	return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8002500:	4803      	ldr	r0, [pc, #12]	; (8002510 <metal_sys_init+0x18>)
 8002502:	f7ff fe23 	bl	800214c <metal_bus_register>
	return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2400002c 	.word	0x2400002c

08002514 <metal_sys_finish>:

void metal_sys_finish(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <metal_sys_finish+0x10>)
 800251a:	f7ff fe5b 	bl	80021d4 <metal_bus_unregister>
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2400002c 	.word	0x2400002c

08002528 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	613b      	str	r3, [r7, #16]
	if (psize) {
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d02c      	beq.n	800259c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e013      	b.n	800258a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f001 fe19 	bl	80041ac <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	d9e2      	bls.n	8002562 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <metal_list_init>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	601a      	str	r2, [r3, #0]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	int error = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 80025d4:	2220      	movs	r2, #32
 80025d6:	2100      	movs	r1, #0
 80025d8:	4810      	ldr	r0, [pc, #64]	; (800261c <metal_init+0x54>)
 80025da:	f002 fc75 	bl	8004ec8 <memset>

	_metal.common.log_handler   = params->log_handler;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <metal_init+0x54>)
 80025e4:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	791a      	ldrb	r2, [r3, #4]
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <metal_init+0x54>)
 80025ec:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 80025ee:	480c      	ldr	r0, [pc, #48]	; (8002620 <metal_init+0x58>)
 80025f0:	f7ff ffd8 	bl	80025a4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 80025f4:	480b      	ldr	r0, [pc, #44]	; (8002624 <metal_init+0x5c>)
 80025f6:	f7ff ffd5 	bl	80025a4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 80025fa:	480b      	ldr	r0, [pc, #44]	; (8002628 <metal_init+0x60>)
 80025fc:	f7ff ffd2 	bl	80025a4 <metal_list_init>

	error = metal_sys_init(params);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff79 	bl	80024f8 <metal_sys_init>
 8002606:	60f8      	str	r0, [r7, #12]
	if (error)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <metal_init+0x4a>
		return error;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	e000      	b.n	8002614 <metal_init+0x4c>

	return error;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	240001a8 	.word	0x240001a8
 8002620:	240001b0 	.word	0x240001b0
 8002624:	240001b8 	.word	0x240001b8
 8002628:	240001c0 	.word	0x240001c0

0800262c <metal_finish>:

void metal_finish(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8002630:	f7ff ff70 	bl	8002514 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8002634:	2220      	movs	r2, #32
 8002636:	2100      	movs	r1, #0
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <metal_finish+0x18>)
 800263a:	f002 fc45 	bl	8004ec8 <memset>
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	240001a8 	.word	0x240001a8

08002648 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d009      	beq.n	8002670 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d804      	bhi.n	8002670 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	e000      	b.n	8002672 <metal_io_virt+0x2a>
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 800267e:	b5b0      	push	{r4, r5, r7, lr}
 8002680:	b08a      	sub	sp, #40	; 0x28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	605a      	str	r2, [r3, #4]
	io->size = size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b4:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	2b1f      	cmp	r3, #31
 80026ba:	d904      	bls.n	80026c6 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f04f 32ff 	mov.w	r2, #4294967295
 80026c2:	611a      	str	r2, [r3, #16]
 80026c4:	e006      	b.n	80026d4 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 80026c6:	2201      	movs	r2, #1
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d8:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 80026da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <metal_io_init+0x7a>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026e4:	f103 0418 	add.w	r4, r3, #24
 80026e8:	4615      	mov	r5, r2
 80026ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80026f6:	e00a      	b.n	800270e <metal_io_init+0x90>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f103 0418 	add.w	r4, r3, #24
 80026fe:	f107 0510 	add.w	r5, r7, #16
 8002702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002706:	e895 0003 	ldmia.w	r5, {r0, r1}
 800270a:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff ff0a 	bl	8002528 <metal_sys_io_mem_map>
}
 8002714:	bf00      	nop
 8002716:	3728      	adds	r7, #40	; 0x28
 8002718:	46bd      	mov	sp, r7
 800271a:	bdb0      	pop	{r4, r5, r7, pc}

0800271c <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b08b      	sub	sp, #44	; 0x2c
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff ff8b 	bl	8002648 <metal_io_virt>
 8002732:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	d902      	bls.n	8002748 <metal_io_block_read+0x2c>
		return -ERANGE;
 8002742:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8002746:	e05c      	b.n	8002802 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	441a      	add	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	429a      	cmp	r2, r3
 8002754:	d904      	bls.n	8002760 <metal_io_block_read+0x44>
		len = io->size - offset;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1c      	ldr	r4, [r3, #32]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2305      	movs	r3, #5
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	47a0      	blx	r4
 800277e:	6178      	str	r0, [r7, #20]
 8002780:	e03e      	b.n	8002800 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8002782:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8002786:	e00c      	b.n	80027a2 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	701a      	strb	r2, [r3, #0]
			dest++;
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	3301      	adds	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
			ptr++;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
			len--;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3b01      	subs	r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
		while ( len && (
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d017      	beq.n	80027d8 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ea      	bne.n	8002788 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e5      	bne.n	8002788 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80027bc:	e00c      	b.n	80027d8 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	3304      	adds	r3, #4
 80027ca:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	3304      	adds	r3, #4
 80027d0:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3b04      	subs	r3, #4
 80027d6:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	dcef      	bgt.n	80027be <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 80027de:	e00c      	b.n	80027fa <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	3301      	adds	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3301      	adds	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ef      	bne.n	80027e0 <metal_io_block_read+0xc4>
	}
	return retlen;
 8002800:	697b      	ldr	r3, [r7, #20]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}

0800280a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 800280a:	b590      	push	{r4, r7, lr}
 800280c:	b08b      	sub	sp, #44	; 0x2c
 800280e:	af02      	add	r7, sp, #8
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff ff14 	bl	8002648 <metal_io_virt>
 8002820:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	d902      	bls.n	8002836 <metal_io_block_write+0x2c>
		return -ERANGE;
 8002830:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8002834:	e05b      	b.n	80028ee <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	441a      	add	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d904      	bls.n	800284e <metal_io_block_write+0x44>
		len = io->size - offset;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	603b      	str	r3, [r7, #0]
	retlen = len;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d017      	beq.n	800288a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2305      	movs	r3, #5
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	47a0      	blx	r4
 800286c:	6178      	str	r0, [r7, #20]
 800286e:	e03d      	b.n	80028ec <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	701a      	strb	r2, [r3, #0]
			ptr++;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3301      	adds	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
			source++;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	3301      	adds	r3, #1
 8002882:	61bb      	str	r3, [r7, #24]
			len--;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	3b01      	subs	r3, #1
 8002888:	603b      	str	r3, [r7, #0]
		while ( len && (
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d017      	beq.n	80028c0 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ea      	bne.n	8002870 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1e5      	bne.n	8002870 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80028a4:	e00c      	b.n	80028c0 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	3304      	adds	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	3b04      	subs	r3, #4
 80028be:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	dcef      	bgt.n	80028a6 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 80028c6:	e00c      	b.n	80028e2 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	3301      	adds	r3, #1
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	3b01      	subs	r3, #1
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ef      	bne.n	80028c8 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 80028e8:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 80028ec:	697b      	ldr	r3, [r7, #20]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd90      	pop	{r4, r7, pc}

080028f6 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 80028f6:	b590      	push	{r4, r7, lr}
 80028f8:	b08b      	sub	sp, #44	; 0x2c
 80028fa:	af02      	add	r7, sp, #8
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fe9d 	bl	8002648 <metal_io_virt>
 800290e:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	429a      	cmp	r2, r3
 800291c:	d902      	bls.n	8002924 <metal_io_block_set+0x2e>
		return -ERANGE;
 800291e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8002922:	e05d      	b.n	80029e0 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	441a      	add	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d904      	bls.n	800293c <metal_io_block_set+0x46>
		len = io->size - offset;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	603b      	str	r3, [r7, #0]
	retlen = len;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800294c:	79fa      	ldrb	r2, [r7, #7]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2305      	movs	r3, #5
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	47a0      	blx	r4
 800295a:	e040      	b.n	80029de <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8002960:	2301      	movs	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	e00a      	b.n	800297c <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8002966:	79fa      	ldrb	r2, [r7, #7]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	3301      	adds	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d9f1      	bls.n	8002966 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8002982:	e008      	b.n	8002996 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	79fa      	ldrb	r2, [r7, #7]
 8002988:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	3b01      	subs	r3, #1
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <metal_io_block_set+0xc4>
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ee      	bne.n	8002984 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80029a6:	e008      	b.n	80029ba <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	3b04      	subs	r3, #4
 80029b8:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	dcf3      	bgt.n	80029a8 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 80029c0:	e008      	b.n	80029d4 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	79fa      	ldrb	r2, [r7, #7]
 80029c6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	3301      	adds	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f3      	bne.n	80029c2 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 80029da:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 80029de:	693b      	ldr	r3, [r7, #16]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3724      	adds	r7, #36	; 0x24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 80029e8:	b40e      	push	{r1, r2, r3}
 80029ea:	b480      	push	{r7}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	b003      	add	sp, #12
 8002a00:	4770      	bx	lr

08002a02 <metal_io_virt>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d009      	beq.n	8002a2a <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d804      	bhi.n	8002a2a <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	e000      	b.n	8002a2c <metal_io_virt+0x2a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d201      	bcs.n	8002a5a <metal_io_virt_to_offset+0x22>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	e001      	b.n	8002a5e <metal_io_virt_to_offset+0x26>
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff ffbf 	bl	8002a02 <metal_io_virt>
 8002a84:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699c      	ldr	r4, [r3, #24]
 8002a92:	79fa      	ldrb	r2, [r7, #7]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	47a0      	blx	r4
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	460d      	mov	r5, r1
 8002aa0:	e059      	b.n	8002b56 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <metal_io_read+0x62>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10f      	bne.n	8002ace <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	f3bf 8f5b 	dmb	ish
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	f3bf 8f5b 	dmb	ish
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	76fb      	strb	r3, [r7, #27]
 8002ac2:	7efb      	ldrb	r3, [r7, #27]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	461c      	mov	r4, r3
 8002aca:	4615      	mov	r5, r2
 8002acc:	e043      	b.n	8002b56 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d012      	beq.n	8002afa <metal_io_read+0x8e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d10f      	bne.n	8002afa <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f3bf 8f5b 	dmb	ish
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	f3bf 8f5b 	dmb	ish
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	833b      	strh	r3, [r7, #24]
 8002aee:	8b3b      	ldrh	r3, [r7, #24]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2200      	movs	r2, #0
 8002af4:	461c      	mov	r4, r3
 8002af6:	4615      	mov	r5, r2
 8002af8:	e02d      	b.n	8002b56 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d010      	beq.n	8002b22 <metal_io_read+0xb6>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d10d      	bne.n	8002b22 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	623b      	str	r3, [r7, #32]
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f3bf 8f5b 	dmb	ish
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f3bf 8f5b 	dmb	ish
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	461c      	mov	r4, r3
 8002b1e:	4615      	mov	r5, r2
 8002b20:	e019      	b.n	8002b56 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <metal_io_read+0xde>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d10d      	bne.n	8002b4a <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f3bf 8f5b 	dmb	ish
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3bf 8f5b 	dmb	ish
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2200      	movs	r2, #0
 8002b44:	461c      	mov	r4, r3
 8002b46:	4615      	mov	r5, r2
 8002b48:	e005      	b.n	8002b56 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <metal_io_read+0xf8>)
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <metal_io_read+0xfc>)
 8002b4e:	21f0      	movs	r1, #240	; 0xf0
 8002b50:	4806      	ldr	r0, [pc, #24]	; (8002b6c <metal_io_read+0x100>)
 8002b52:	f002 f947 	bl	8004de4 <__assert_func>
	return 0; /* quiet compiler */
}
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	3730      	adds	r7, #48	; 0x30
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	08005f88 	.word	0x08005f88
 8002b68:	080060f8 	.word	0x080060f8
 8002b6c:	08005f8c 	.word	0x08005f8c

08002b70 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b08f      	sub	sp, #60	; 0x3c
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff ff3e 	bl	8002a02 <metal_io_virt>
 8002b86:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	69dc      	ldr	r4, [r3, #28]
 8002b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8002ba8:	e04e      	b.n	8002c48 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <metal_io_write+0x5e>
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10b      	bne.n	8002bce <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	783b      	ldrb	r3, [r7, #0]
 8002bbc:	76fb      	strb	r3, [r7, #27]
 8002bbe:	7efa      	ldrb	r2, [r7, #27]
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	f3bf 8f5b 	dmb	ish
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	f3bf 8f5b 	dmb	ish
 8002bcc:	e03c      	b.n	8002c48 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00e      	beq.n	8002bf2 <metal_io_write+0x82>
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d10b      	bne.n	8002bf2 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	883b      	ldrh	r3, [r7, #0]
 8002be0:	833b      	strh	r3, [r7, #24]
 8002be2:	8b3a      	ldrh	r2, [r7, #24]
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f3bf 8f5b 	dmb	ish
 8002bea:	801a      	strh	r2, [r3, #0]
 8002bec:	f3bf 8f5b 	dmb	ish
 8002bf0:	e02a      	b.n	8002c48 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <metal_io_write+0xa6>
 8002bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d10b      	bne.n	8002c16 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f3bf 8f5b 	dmb	ish
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f3bf 8f5b 	dmb	ish
 8002c14:	e018      	b.n	8002c48 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <metal_io_write+0xca>
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d10b      	bne.n	8002c3a <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f3bf 8f5b 	dmb	ish
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f5b 	dmb	ish
 8002c38:	e006      	b.n	8002c48 <metal_io_write+0xd8>
		metal_assert (0);
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <metal_io_write+0xe0>)
 8002c3c:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <metal_io_write+0xe4>)
 8002c3e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <metal_io_write+0xe8>)
 8002c44:	f002 f8ce 	bl	8004de4 <__assert_func>
}
 8002c48:	bf00      	nop
 8002c4a:	3734      	adds	r7, #52	; 0x34
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}
 8002c50:	08005f88 	.word	0x08005f88
 8002c54:	08006108 	.word	0x08006108
 8002c58:	08005f8c 	.word	0x08005f8c

08002c5c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f002 f911 	bl	8004e8c <malloc>
 8002c6a:	4603      	mov	r3, r0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	free(ptr);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f002 f90d 	bl	8004e9c <free>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3307      	adds	r3, #7
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f7ff ffde 	bl	8002c5c <metal_allocate_memory>
 8002ca0:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d004      	beq.n	8002cb2 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	2100      	movs	r1, #0
 8002cac:	68b8      	ldr	r0, [r7, #8]
 8002cae:	f002 f90b 	bl	8004ec8 <memset>
	}

	return vqs;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	891b      	ldrh	r3, [r3, #8]
 8002cc8:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	3b18      	subs	r3, #24
 8002cd4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d905      	bls.n	8002cec <rproc_virtio_virtqueue_notify+0x30>
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <rproc_virtio_virtqueue_notify+0x5c>)
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <rproc_virtio_virtqueue_notify+0x60>)
 8002ce4:	2133      	movs	r1, #51	; 0x33
 8002ce6:	480e      	ldr	r0, [pc, #56]	; (8002d20 <rproc_virtio_virtqueue_notify+0x64>)
 8002ce8:	f002 f87c 	bl	8004de4 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	6810      	ldr	r0, [r2, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	6912      	ldr	r2, [r2, #16]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4798      	blx	r3
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	08005fd4 	.word	0x08005fd4
 8002d1c:	080060d8 	.word	0x080060d8
 8002d20:	08005ff0 	.word	0x08005ff0

08002d24 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b18      	subs	r3, #24
 8002d30:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	3318      	adds	r3, #24
 8002d42:	4619      	mov	r1, r3
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fe77 	bl	8002a38 <metal_io_virt_to_offset>
 8002d4a:	4601      	mov	r1, r0
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	2205      	movs	r2, #5
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff fe8b 	bl	8002a6c <metal_io_read>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b18      	subs	r3, #24
 8002d78:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	3318      	adds	r3, #24
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff fe53 	bl	8002a38 <metal_io_virt_to_offset>
 8002d92:	4601      	mov	r1, r0
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	2200      	movs	r2, #0
 8002d98:	461c      	mov	r4, r3
 8002d9a:	4615      	mov	r5, r2
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	2305      	movs	r3, #5
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4622      	mov	r2, r4
 8002da6:	462b      	mov	r3, r5
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff fee1 	bl	8002b70 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	6810      	ldr	r0, [r2, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4798      	blx	r3
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bdb0      	pop	{r4, r5, r7, pc}

08002dc6 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3b18      	subs	r3, #24
 8002dd2:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	330c      	adds	r3, #12
 8002de4:	4619      	mov	r1, r3
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff fe26 	bl	8002a38 <metal_io_virt_to_offset>
 8002dec:	4601      	mov	r1, r0
 8002dee:	2304      	movs	r3, #4
 8002df0:	2205      	movs	r2, #5
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff fe3a 	bl	8002a6c <metal_io_read>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8002e00:	68bb      	ldr	r3, [r7, #8]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8002e0a:	b5b0      	push	{r4, r5, r7, lr}
 8002e0c:	b088      	sub	sp, #32
 8002e0e:	af02      	add	r7, sp, #8
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b18      	subs	r3, #24
 8002e18:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff fe03 	bl	8002a38 <metal_io_virt_to_offset>
 8002e32:	4601      	mov	r1, r0
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	461c      	mov	r4, r3
 8002e3a:	4615      	mov	r5, r2
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2305      	movs	r3, #5
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4622      	mov	r2, r4
 8002e46:	462b      	mov	r3, r5
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff fe91 	bl	8002b70 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	6810      	ldr	r0, [r2, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4798      	blx	r3
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}

08002e66 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff4f 	bl	8002d68 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08e      	sub	sp, #56	; 0x38
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	7e5b      	ldrb	r3, [r3, #25]
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8002eec:	2050      	movs	r0, #80	; 0x50
 8002eee:	f7ff feb5 	bl	8002c5c <metal_allocate_memory>
 8002ef2:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e092      	b.n	8003024 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8002efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fea7 	bl	8002c5c <metal_allocate_memory>
 8002f0e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8081 	beq.w	800301a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8002f18:	2250      	movs	r2, #80	; 0x50
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f1e:	f001 ffd3 	bl	8004ec8 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8002f22:	2218      	movs	r2, #24
 8002f24:	2100      	movs	r1, #0
 8002f26:	6a38      	ldr	r0, [r7, #32]
 8002f28:	f001 ffce 	bl	8004ec8 <memset>
	vdev = &rpvdev->vdev;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	3318      	adds	r3, #24
 8002f30:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
 8002f36:	e025      	b.n	8002f84 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8002f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	3318      	adds	r3, #24
 8002f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8002f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5e:	f7ff fe94 	bl	8002c8a <virtqueue_allocate>
 8002f62:	6178      	str	r0, [r7, #20]
		if (!vq)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d031      	beq.n	8002fce <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8002f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	461a      	mov	r2, r3
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	4413      	add	r3, r2
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	3301      	adds	r3, #1
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
 8002f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3d5      	bcc.n	8002f38 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f90:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f96:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	6a3a      	ldr	r2, [r7, #32]
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fba:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <rproc_virtio_create_vdev+0x158>)
 8002fc6:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	3318      	adds	r3, #24
 8002fcc:	e02a      	b.n	8003024 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8002fce:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd4:	e019      	b.n	800300a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8002fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8002fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fe38 	bl	8002c74 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	3301      	adds	r3, #1
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	429a      	cmp	r2, r3
 8003010:	d3e1      	bcc.n	8002fd6 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8003012:	6a38      	ldr	r0, [r7, #32]
 8003014:	f7ff fe2e 	bl	8002c74 <metal_free_memory>
 8003018:	e000      	b.n	800301c <rproc_virtio_create_vdev+0x148>
		goto err0;
 800301a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 800301c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800301e:	f7ff fe29 	bl	8002c74 <metal_free_memory>
	return NULL;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3738      	adds	r7, #56	; 0x38
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	080060b4 	.word	0x080060b4

08003030 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800304c:	f06f 0301 	mvn.w	r3, #1
 8003050:	e019      	b.n	8003086 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	b29a      	uxth	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003082:	609a      	str	r2, [r3, #8]

	return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 80030a2:	f06f 0315 	mvn.w	r3, #21
 80030a6:	e02c      	b.n	8003102 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d101      	bne.n	80030b6 <rproc_virtio_notified+0x24>
		return 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e025      	b.n	8003102 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e01a      	b.n	80030f8 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d003      	beq.n	80030e6 <rproc_virtio_notified+0x54>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d105      	bne.n	80030f2 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 80030ec:	68b8      	ldr	r0, [r7, #8]
 80030ee:	f001 fbc8 	bl	8004882 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d3e0      	bcc.n	80030c2 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fe02 	bl	8002d24 <rproc_virtio_get_status>
 8003120:	4603      	mov	r3, r0
 8003122:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800312e:	e7f4      	b.n	800311a <rproc_virtio_wait_remote_ready+0x10>
		return;
 8003130:	bf00      	nop
 8003132:	e000      	b.n	8003136 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8003134:	bf00      	nop
	}
}
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8003144:	bf00      	nop
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	4611      	mov	r1, r2
 800314c:	f3bf 8f5b 	dmb	ish
 8003150:	e8d3 2f4f 	ldrexb	r2, [r3]
 8003154:	e8c3 1f40 	strexb	r0, r1, [r3]
 8003158:	2800      	cmp	r0, #0
 800315a:	d1f9      	bne.n	8003150 <__metal_mutex_acquire+0x14>
 800315c:	f3bf 8f5b 	dmb	ish
 8003160:	b2d3      	uxtb	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1ef      	bne.n	8003146 <__metal_mutex_acquire+0xa>
		;
	}
}
 8003166:	bf00      	nop
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f3bf 8f5b 	dmb	ish
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	f3bf 8f5b 	dmb	ish
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffcc 	bl	800313c <__metal_mutex_acquire>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffdd 	bl	8003174 <__metal_mutex_release>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <metal_list_add_before>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	601a      	str	r2, [r3, #0]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <metal_list_add_tail>:
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffdd 	bl	80031c2 <metal_list_add_before>
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <metal_list_del>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6852      	ldr	r2, [r2, #4]
 8003220:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	440a      	add	r2, r1
 800325a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	f002 021f 	and.w	r2, r2, #31
 8003262:	2001      	movs	r0, #1
 8003264:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4403      	add	r3, r0
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2101      	movs	r1, #1
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80032a0:	4013      	ands	r3, r2
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	009a      	lsls	r2, r3, #2
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	440a      	add	r2, r1
 80032c2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	f002 021f 	and.w	r2, r2, #31
 80032ca:	2001      	movs	r0, #1
 80032cc:	fa00 f202 	lsl.w	r2, r0, r2
 80032d0:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4403      	add	r3, r0
 80032d8:	400a      	ands	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 80032f2:	6839      	ldr	r1, [r7, #0]
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffc2 	bl	800327e <metal_bitmap_is_bit_set>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e002      	b.n	8003326 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d207      	bcs.n	800333e <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4619      	mov	r1, r3
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ffd8 	bl	80032e8 <metal_bitmap_is_bit_clear>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800333e:	697b      	ldr	r3, [r7, #20]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <rpmsg_init_ept>:
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	4618      	mov	r0, r3
 800335e:	f002 f9ad 	bl	80056bc <strncpy>
	ept->addr = src;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	2100      	movs	r1, #0
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ffb8 	bl	800330e <metal_bitmap_next_clear_bit>
 800339e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d206      	bcs.n	80033b6 <rpmsg_get_address+0x34>
		addr = nextbit;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4619      	mov	r1, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff48 	bl	8003246 <metal_bitmap_set_bit>
	}

	return addr;
 80033b6:	68fb      	ldr	r3, [r7, #12]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	da03      	bge.n	80033dc <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff ff69 	bl	80032ae <metal_bitmap_clear_bit>
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	da05      	bge.n	8003404 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff ff3f 	bl	800327e <metal_bitmap_is_bit_set>
 8003400:	4603      	mov	r3, r0
 8003402:	e000      	b.n	8003406 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8003404:	4b02      	ldr	r3, [pc, #8]	; (8003410 <rpmsg_is_address_set+0x2c>)
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	fffff82d 	.word	0xfffff82d

08003414 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	429a      	cmp	r2, r3
 8003426:	da05      	bge.n	8003434 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff ff0b 	bl	8003246 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8003434:	4b02      	ldr	r3, [pc, #8]	; (8003440 <rpmsg_set_address+0x2c>)
	}
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	fffff82d 	.word	0xfffff82d

08003444 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b089      	sub	sp, #36	; 0x24
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <rpmsg_send_offchannel_raw+0x2a>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d006      	beq.n	800346e <rpmsg_send_offchannel_raw+0x2a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <rpmsg_send_offchannel_raw+0x2a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d101      	bne.n	8003472 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <rpmsg_send_offchannel_raw+0x60>)
 8003470:	e014      	b.n	800349c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00c      	beq.n	800349a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	47a0      	blx	r4
 8003496:	4603      	mov	r3, r0
 8003498:	e000      	b.n	800349c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800349a:	4b02      	ldr	r3, [pc, #8]	; (80034a4 <rpmsg_send_offchannel_raw+0x60>)
}
 800349c:	4618      	mov	r0, r3
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd90      	pop	{r4, r7, pc}
 80034a4:	fffff82d 	.word	0xfffff82d

080034a8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b090      	sub	sp, #64	; 0x40
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	2220      	movs	r2, #32
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 f8f9 	bl	80056bc <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	2201      	movs	r2, #1
 80034d4:	9201      	str	r2, [sp, #4]
 80034d6:	2228      	movs	r2, #40	; 0x28
 80034d8:	9200      	str	r2, [sp, #0]
 80034da:	2235      	movs	r2, #53	; 0x35
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ffb1 	bl	8003444 <rpmsg_send_offchannel_raw>
 80034e2:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da01      	bge.n	80034ee <rpmsg_send_ns_message+0x46>
		return ret;
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	e000      	b.n	80034f0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3738      	adds	r7, #56	; 0x38
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	e04b      	b.n	80035a6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b34      	subs	r3, #52	; 0x34
 8003516:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d006      	beq.n	800352e <rpmsg_get_endpoint+0x36>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	429a      	cmp	r2, r3
 8003528:	d101      	bne.n	800352e <rpmsg_get_endpoint+0x36>
			return ept;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	e040      	b.n	80035b0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d106      	bne.n	8003546 <rpmsg_get_endpoint+0x4e>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d101      	bne.n	8003546 <rpmsg_get_endpoint+0x4e>
			return ept;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	e034      	b.n	80035b0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00c      	beq.n	8003566 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2220      	movs	r2, #32
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f002 f89e 	bl	8005694 <strncmp>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <rpmsg_get_endpoint+0xa6>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d015      	beq.n	800359e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d006      	beq.n	8003588 <rpmsg_get_endpoint+0x90>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d101      	bne.n	8003588 <rpmsg_get_endpoint+0x90>
			return ept;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	e013      	b.n	80035b0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d107      	bne.n	80035a0 <rpmsg_get_endpoint+0xa8>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d102      	bne.n	80035a0 <rpmsg_get_endpoint+0xa8>
			return ept;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	e008      	b.n	80035b0 <rpmsg_get_endpoint+0xb8>
			continue;
 800359e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d1af      	bne.n	800350e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d008      	beq.n	80035e8 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80035e0:	461a      	mov	r2, r3
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	f7ff feec 	bl	80033c0 <rpmsg_release_address>
	metal_list_del(&ept->node);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3334      	adds	r3, #52	; 0x34
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fe0f 	bl	8003210 <metal_list_del>
 80035f2:	e000      	b.n	80035f6 <rpmsg_unregister_endpoint+0x3e>
		return;
 80035f4:	bf00      	nop
}
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3334      	adds	r3, #52	; 0x34
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7ff fdee 	bl	80031f6 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	613b      	str	r3, [r7, #16]

	if (!ept)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 800363c:	4b37      	ldr	r3, [pc, #220]	; (800371c <rpmsg_create_ept+0xf8>)
 800363e:	e068      	b.n	8003712 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3358      	adds	r3, #88	; 0x58
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fda6 	bl	8003196 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d018      	beq.n	8003684 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3348      	adds	r3, #72	; 0x48
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fec2 	bl	80033e4 <rpmsg_is_address_set>
 8003660:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	3348      	adds	r3, #72	; 0x48
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fecf 	bl	8003414 <rpmsg_set_address>
 8003676:	e00c      	b.n	8003692 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	dd40      	ble.n	8003700 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8003682:	e040      	b.n	8003706 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3348      	adds	r3, #72	; 0x48
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fe79 	bl	8003382 <rpmsg_get_address>
 8003690:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff fe51 	bl	8003348 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	68b8      	ldr	r0, [r7, #8]
 80036aa:	f7ff ffa7 	bl	80035fc <rpmsg_register_endpoint>
 80036ae:	6178      	str	r0, [r7, #20]
	if (status < 0)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da06      	bge.n	80036c4 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3348      	adds	r3, #72	; 0x48
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fe7e 	bl	80033c0 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11c      	bne.n	8003704 <rpmsg_create_ept+0xe0>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d117      	bne.n	8003704 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3358      	adds	r3, #88	; 0x58
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fd67 	bl	80031ac <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 80036de:	2100      	movs	r1, #0
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff fee1 	bl	80034a8 <rpmsg_send_ns_message>
 80036e6:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3358      	adds	r3, #88	; 0x58
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fd52 	bl	8003196 <metal_mutex_acquire>
		if (status)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ff5d 	bl	80035b8 <rpmsg_unregister_endpoint>
 80036fe:	e002      	b.n	8003706 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8003704:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	3358      	adds	r3, #88	; 0x58
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fd4e 	bl	80031ac <metal_mutex_release>
	return status;
 8003710:	697b      	ldr	r3, [r7, #20]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	fffff82d 	.word	0xfffff82d

08003720 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b35      	cmp	r3, #53	; 0x35
 800373a:	d003      	beq.n	8003744 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 800373c:	2101      	movs	r1, #1
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff feb2 	bl	80034a8 <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3358      	adds	r3, #88	; 0x58
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fd24 	bl	8003196 <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff32 	bl	80035b8 <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3358      	adds	r3, #88	; 0x58
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fd27 	bl	80031ac <metal_mutex_release>
 800375e:	e000      	b.n	8003762 <rpmsg_destroy_ept+0x42>
		return;
 8003760:	bf00      	nop
}
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <__metal_cache_invalidate>:
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8003772:	6839      	ldr	r1, [r7, #0]
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fd0e 	bl	8004196 <metal_machine_cache_invalidate>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <metal_cache_invalidate>:
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffea 	bl	8003768 <__metal_cache_invalidate>
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffee 	bl	800379c <__metal_sleep_usec>
 80037c0:	4603      	mov	r3, r0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <metal_list_init>:
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	601a      	str	r2, [r3, #0]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <metal_list_is_empty>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	return list->next == list;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <metal_io_virt_to_offset>:
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	429a      	cmp	r2, r3
 800382c:	d201      	bcs.n	8003832 <metal_io_virt_to_offset+0x22>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	e001      	b.n	8003836 <metal_io_virt_to_offset+0x26>
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <__metal_mutex_init>:
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	461a      	mov	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f3bf 8f5b 	dmb	ish
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f3bf 8f5b 	dmb	ish
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <__metal_mutex_deinit>:
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <__metal_mutex_acquire>:
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800388a:	bf00      	nop
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	4611      	mov	r1, r2
 8003892:	f3bf 8f5b 	dmb	ish
 8003896:	e8d3 2f4f 	ldrexb	r2, [r3]
 800389a:	e8c3 1f40 	strexb	r0, r1, [r3]
 800389e:	2800      	cmp	r0, #0
 80038a0:	d1f9      	bne.n	8003896 <__metal_mutex_acquire+0x14>
 80038a2:	f3bf 8f5b 	dmb	ish
 80038a6:	b2d3      	uxtb	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ef      	bne.n	800388c <__metal_mutex_acquire+0xa>
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <__metal_mutex_release>:
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f3bf 8f5b 	dmb	ish
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	f3bf 8f5b 	dmb	ish
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <metal_mutex_init>:
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ffac 	bl	8003842 <__metal_mutex_init>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <metal_mutex_deinit>:
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffb7 	bl	800386e <__metal_mutex_deinit>
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <metal_mutex_acquire>:
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ffb6 	bl	8003882 <__metal_mutex_acquire>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <metal_mutex_release>:
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffc7 	bl	80038ba <__metal_mutex_release>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <rpmsg_init_ept>:
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f001 feb7 	bl	80056bc <strncpy>
	ept->addr = src;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397a:	699b      	ldr	r3, [r3, #24]
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80039a0:	78f9      	ldrb	r1, [r7, #3]
 80039a2:	4610      	mov	r0, r2
 80039a4:	4798      	blx	r3
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80039c2:	4610      	mov	r0, r2
 80039c4:	4798      	blx	r3
 80039c6:	4603      	mov	r3, r0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80039e4:	4610      	mov	r0, r2
 80039e6:	4798      	blx	r3
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af02      	add	r7, sp, #8
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	f000 fc17 	bl	8004240 <virtio_create_virtqueues>
 8003a12:	4603      	mov	r3, r0
					callbacks);
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff fd62 	bl	80034f8 <rpmsg_get_endpoint>
 8003a34:	4603      	mov	r3, r0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d901      	bls.n	8003a56 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e00f      	b.n	8003a76 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	1acb      	subs	r3, r1, r3
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]

	return buffer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01d      	beq.n	8003ad0 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <rpmsg_virtio_init_shm_pool+0x2c>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	3304      	adds	r3, #4
 8003aac:	e000      	b.n	8003ab0 <rpmsg_virtio_init_shm_pool+0x2e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <rpmsg_virtio_init_shm_pool+0x46>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f023 0303 	bic.w	r3, r3, #3
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	e000      	b.n	8003aca <rpmsg_virtio_init_shm_pool+0x48>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	6053      	str	r3, [r2, #4]
 8003ace:	e000      	b.n	8003ad2 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8003ad0:	bf00      	nop
}
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ff3f 	bl	800396e <rpmsg_virtio_get_role>
 8003af0:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10d      	bne.n	8003b14 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003b04:	f107 0114 	add.w	r1, r7, #20
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f000 fce5 	bl	80044de <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8003b14:	bf00      	nop
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff ff1f 	bl	800396e <rpmsg_virtio_get_role>
 8003b30:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10f      	bne.n	8003b58 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003b44:	f107 0114 	add.w	r1, r7, #20
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f000 fcc5 	bl	80044de <virtqueue_add_buffer>
 8003b54:	4603      	mov	r3, r0
 8003b56:	e000      	b.n	8003b5a <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f7ff fefd 	bl	800396e <rpmsg_virtio_get_role>
 8003b74:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d116      	bne.n	8003bae <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fcec 	bl	8004566 <virtqueue_get_buffer>
 8003b8e:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff4d 	bl	8003a3e <rpmsg_virtio_shm_pool_get_buffer>
 8003ba4:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8003bae:	697b      	ldr	r3, [r7, #20]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fed2 	bl	800396e <rpmsg_virtio_get_role>
 8003bca:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d107      	bne.n	8003be6 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fcc1 	bl	8004566 <virtqueue_get_buffer>
 8003be4:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff fdc5 	bl	8003782 <metal_cache_invalidate>
	}

	return data;
 8003bf8:	697b      	ldr	r3, [r7, #20]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff feaf 	bl	800396e <rpmsg_virtio_get_role>
 8003c10:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8003c1c:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8003c20:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8003c22:	68fb      	ldr	r3, [r7, #12]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b090      	sub	sp, #64	; 0x40
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8003c46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c48:	f7ff feb1 	bl	80039ae <rpmsg_virtio_get_status>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8003c5a:	4b45      	ldr	r3, [pc, #276]	; (8003d70 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8003c5c:	e083      	b.n	8003d66 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8003c64:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c6a:	e001      	b.n	8003c70 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3358      	adds	r3, #88	; 0x58
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fe47 	bl	8003908 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8003c7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c7c:	f7ff ffc1 	bl	8003c02 <_rpmsg_virtio_get_buffer_size>
 8003c80:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8003c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	dc08      	bgt.n	8003c9c <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8003c8a:	f107 0216 	add.w	r2, r7, #22
 8003c8e:	f107 0310 	add.w	r3, r7, #16
 8003c92:	4619      	mov	r1, r3
 8003c94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c96:	f7ff ff64 	bl	8003b62 <rpmsg_virtio_get_tx_buffer>
 8003c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3358      	adds	r3, #88	; 0x58
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fe3c 	bl	800391e <metal_mutex_release>
		if (buffer || !tick_count)
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10e      	bne.n	8003cca <rpmsg_virtio_send_offchannel_raw+0x9e>
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8003cb8:	4b2e      	ldr	r3, [pc, #184]	; (8003d74 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8003cba:	e054      	b.n	8003d66 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8003cbc:	200a      	movs	r0, #10
 8003cbe:	f7ff fd78 	bl	80037b2 <metal_sleep_usec>
		tick_count--;
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8003cc8:	e7d2      	b.n	8003c70 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8003cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8003cd0:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8003cd2:	e048      	b.n	8003d66 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8003cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8003cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf0:	f7ff fd8e 	bl	8003810 <metal_io_virt_to_offset>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	f107 0218 	add.w	r2, r7, #24
 8003cfa:	2310      	movs	r3, #16
 8003cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfe:	f7fe fd84 	bl	800280a <metal_io_block_write>
 8003d02:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d000      	beq.n	8003d0c <rpmsg_virtio_send_offchannel_raw+0xe0>
 8003d0a:	e7fe      	b.n	8003d0a <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8003d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0e:	3310      	adds	r3, #16
 8003d10:	4619      	mov	r1, r3
 8003d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d14:	f7ff fd7c 	bl	8003810 <metal_io_virt_to_offset>
 8003d18:	4601      	mov	r1, r0
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d20:	f7fe fd73 	bl	800280a <metal_io_block_write>
 8003d24:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8003d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d000      	beq.n	8003d30 <rpmsg_virtio_send_offchannel_raw+0x104>
 8003d2e:	e7fe      	b.n	8003d2e <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3358      	adds	r3, #88	; 0x58
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fde7 	bl	8003908 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	8afb      	ldrh	r3, [r7, #22]
 8003d3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d42:	f7ff feeb 	bl	8003b1c <rpmsg_virtio_enqueue_buffer>
 8003d46:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d000      	beq.n	8003d50 <rpmsg_virtio_send_offchannel_raw+0x124>
 8003d4e:	e7fe      	b.n	8003d4e <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fc80 	bl	800465a <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3358      	adds	r3, #88	; 0x58
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fddd 	bl	800391e <metal_mutex_release>

	return size;
 8003d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3740      	adds	r7, #64	; 0x40
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	fffff82c 	.word	0xfffff82c
 8003d74:	fffff82b 	.word	0xfffff82b
 8003d78:	fffff82e 	.word	0xfffff82e

08003d7c <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b08d      	sub	sp, #52	; 0x34
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	3358      	adds	r3, #88	; 0x58
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fdab 	bl	8003908 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8003db2:	f107 020a 	add.w	r2, r7, #10
 8003db6:	f107 030c 	add.w	r3, r7, #12
 8003dba:	4619      	mov	r1, r3
 8003dbc:	69f8      	ldr	r0, [r7, #28]
 8003dbe:	f7ff fefb 	bl	8003bb8 <rpmsg_virtio_get_rx_buffer>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	3358      	adds	r3, #88	; 0x58
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fda8 	bl	800391e <metal_mutex_release>

	while (rp_hdr) {
 8003dce:	e04c      	b.n	8003e6a <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	3358      	adds	r3, #88	; 0x58
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fd97 	bl	8003908 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4619      	mov	r1, r3
 8003de0:	69b8      	ldr	r0, [r7, #24]
 8003de2:	f7ff fe1b 	bl	8003a1c <rpmsg_get_ept_from_addr>
 8003de6:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	3358      	adds	r3, #88	; 0x58
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fd96 	bl	800391e <metal_mutex_release>

		if (!ept)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d03c      	beq.n	8003e72 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d103      	bne.n	8003e0a <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	899b      	ldrh	r3, [r3, #12]
 8003e18:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6978      	ldr	r0, [r7, #20]
 8003e2c:	47a0      	blx	r4
 8003e2e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d000      	beq.n	8003e38 <rpmsg_virtio_rx_callback+0xa8>
 8003e36:	e7fe      	b.n	8003e36 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	3358      	adds	r3, #88	; 0x58
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fd63 	bl	8003908 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	897b      	ldrh	r3, [r7, #10]
 8003e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e48:	69f8      	ldr	r0, [r7, #28]
 8003e4a:	f7ff fe47 	bl	8003adc <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8003e4e:	f107 020a 	add.w	r2, r7, #10
 8003e52:	f107 030c 	add.w	r3, r7, #12
 8003e56:	4619      	mov	r1, r3
 8003e58:	69f8      	ldr	r0, [r7, #28]
 8003e5a:	f7ff fead 	bl	8003bb8 <rpmsg_virtio_get_rx_buffer>
 8003e5e:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	3358      	adds	r3, #88	; 0x58
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fd5a 	bl	800391e <metal_mutex_release>
	while (rp_hdr) {
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1af      	bne.n	8003dd0 <rpmsg_virtio_rx_callback+0x40>
 8003e70:	e000      	b.n	8003e74 <rpmsg_virtio_rx_callback+0xe4>
			return;
 8003e72:	bf00      	nop
	}
}
 8003e74:	372c      	adds	r7, #44	; 0x2c
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}

08003e7a <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b092      	sub	sp, #72	; 0x48
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8003e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e90:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8003e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b28      	cmp	r3, #40	; 0x28
 8003ea0:	d001      	beq.n	8003ea6 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e057      	b.n	8003f56 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003eac:	f7ff fcb0 	bl	8003810 <metal_io_virt_to_offset>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	f107 0210 	add.w	r2, r7, #16
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003eba:	f7fe fc2f 	bl	800271c <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec6:	3358      	adds	r3, #88	; 0x58
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fd1d 	bl	8003908 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8003ece:	f107 0110 	add.w	r1, r7, #16
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003eda:	f7ff fb0d 	bl	80034f8 <rpmsg_get_endpoint>
 8003ede:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8003efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efc:	3358      	adds	r3, #88	; 0x58
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fd0d 	bl	800391e <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d024      	beq.n	8003f54 <rpmsg_virtio_ns_callback+0xda>
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	4798      	blx	r3
 8003f1a:	e01b      	b.n	8003f54 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d110      	bne.n	8003f44 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8003f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f24:	3358      	adds	r3, #88	; 0x58
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fcf9 	bl	800391e <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8003f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00f      	beq.n	8003f54 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8003f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	f107 0110 	add.w	r1, r7, #16
 8003f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003f40:	4798      	blx	r3
 8003f42:	e007      	b.n	8003f54 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8003f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4c:	3358      	adds	r3, #88	; 0x58
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fce5 	bl	800391e <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3748      	adds	r7, #72	; 0x48
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b094      	sub	sp, #80	; 0x50
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 8003f72:	2264      	movs	r2, #100	; 0x64
 8003f74:	2100      	movs	r1, #0
 8003f76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f78:	f000 ffa6 	bl	8004ec8 <memset>
	metal_mutex_init(&rdev->lock);
 8003f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7e:	3358      	adds	r3, #88	; 0x58
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fcab 	bl	80038dc <metal_mutex_init>
	rvdev->vdev = vdev;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	4a5d      	ldr	r2, [pc, #372]	; (8004110 <rpmsg_init_vdev+0x1b0>)
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fce5 	bl	800396e <rpmsg_virtio_get_role>
 8003fa4:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d120      	bne.n	8003fee <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8003fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 8003fb2:	4b58      	ldr	r3, [pc, #352]	; (8004114 <rpmsg_init_vdev+0x1b4>)
 8003fb4:	e0a7      	b.n	8004106 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 8003fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8003fbe:	4b56      	ldr	r3, [pc, #344]	; (8004118 <rpmsg_init_vdev+0x1b8>)
 8003fc0:	e0a1      	b.n	8004106 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fc6:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 8003fc8:	4b54      	ldr	r3, [pc, #336]	; (800411c <rpmsg_init_vdev+0x1bc>)
 8003fca:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8003fcc:	4b54      	ldr	r3, [pc, #336]	; (8004120 <rpmsg_init_vdev+0x1c0>)
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8003fd0:	4b54      	ldr	r3, [pc, #336]	; (8004124 <rpmsg_init_vdev+0x1c4>)
 8003fd2:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8003fd4:	4b54      	ldr	r3, [pc, #336]	; (8004128 <rpmsg_init_vdev+0x1c8>)
 8003fd6:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	3318      	adds	r3, #24
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8003ff4:	f107 0220 	add.w	r2, r7, #32
 8003ff8:	f107 0318 	add.w	r3, r7, #24
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	2202      	movs	r2, #2
 8004002:	2100      	movs	r1, #0
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fcf4 	bl	80039f2 <rpmsg_virtio_create_virtqueues>
 800400a:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800400c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <rpmsg_init_vdev+0xb6>
		return status;
 8004012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004014:	e077      	b.n	8004106 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8004016:	2300      	movs	r3, #0
 8004018:	643b      	str	r3, [r7, #64]	; 0x40
 800401a:	e00f      	b.n	800403c <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8004036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004038:	3301      	adds	r3, #1
 800403a:	643b      	str	r3, [r7, #64]	; 0x40
 800403c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403e:	2b01      	cmp	r3, #1
 8004040:	d9ec      	bls.n	800401c <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	2b00      	cmp	r3, #0
 8004046:	d137      	bne.n	80040b8 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8004048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800404c:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800404e:	2300      	movs	r3, #0
 8004050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004052:	e02a      	b.n	80040aa <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 8004054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004058:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800405a:	f7ff fcf0 	bl	8003a3e <rpmsg_virtio_shm_pool_get_buffer>
 800405e:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 8004066:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <rpmsg_init_vdev+0x1b8>)
 8004068:	e04d      	b.n	8004106 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800406e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004070:	6838      	ldr	r0, [r7, #0]
 8004072:	f7ff fbcd 	bl	8003810 <metal_io_virt_to_offset>
 8004076:	4601      	mov	r1, r0
 8004078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800407c:	2200      	movs	r2, #0
 800407e:	6838      	ldr	r0, [r7, #0]
 8004080:	f7fe fc39 	bl	80028f6 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004088:	f107 0110 	add.w	r1, r7, #16
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2301      	movs	r3, #1
 8004092:	2200      	movs	r2, #0
 8004094:	f000 fa23 	bl	80044de <virtqueue_add_buffer>
 8004098:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800409a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <rpmsg_init_vdev+0x144>
				return status;
 80040a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a2:	e030      	b.n	8004106 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80040a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a6:	3301      	adds	r3, #1
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ae:	895b      	ldrh	r3, [r3, #10]
 80040b0:	461a      	mov	r2, r3
 80040b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d3cd      	bcc.n	8004054 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 80040b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fb85 	bl	80037ca <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff fc85 	bl	80039d0 <rpmsg_virtio_get_features>
 80040c6:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d011      	beq.n	80040f6 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	f103 0008 	add.w	r0, r3, #8
 80040d8:	2300      	movs	r3, #0
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <rpmsg_init_vdev+0x1cc>)
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2335      	movs	r3, #53	; 0x35
 80040e2:	2235      	movs	r2, #53	; 0x35
 80040e4:	4912      	ldr	r1, [pc, #72]	; (8004130 <rpmsg_init_vdev+0x1d0>)
 80040e6:	f7ff fc25 	bl	8003934 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	3308      	adds	r3, #8
 80040ee:	4619      	mov	r1, r3
 80040f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040f2:	f7ff fa83 	bl	80035fc <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 80040fc:	2104      	movs	r1, #4
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff fc42 	bl	8003988 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8004104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004106:	4618      	mov	r0, r3
 8004108:	3748      	adds	r7, #72	; 0x48
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	08003c2d 	.word	0x08003c2d
 8004114:	fffff82d 	.word	0xfffff82d
 8004118:	fffff82e 	.word	0xfffff82e
 800411c:	08006070 	.word	0x08006070
 8004120:	08006078 	.word	0x08006078
 8004124:	08003d91 	.word	0x08003d91
 8004128:	08003d7d 	.word	0x08003d7d
 800412c:	08003e7b 	.word	0x08003e7b
 8004130:	08006080 	.word	0x08006080

08004134 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8004140:	e008      	b.n	8004154 <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	3b34      	subs	r3, #52	; 0x34
 800414c:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fae6 	bl	8003720 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fb48 	bl	80037ec <metal_list_is_empty>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ef      	beq.n	8004142 <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	669a      	str	r2, [r3, #104]	; 0x68
	rvdev->svq = 0;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	66da      	str	r2, [r3, #108]	; 0x6c

	metal_mutex_deinit(&rdev->lock);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	3358      	adds	r3, #88	; 0x58
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fbbd 	bl	80038f2 <metal_mutex_deinit>
}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3303      	adds	r3, #3
 80041dc:	005a      	lsls	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	425b      	negs	r3, r3
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	3306      	adds	r3, #6
 80041fe:	60fb      	str	r3, [r7, #12]

	return size;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <metal_io_virt_to_offset>:
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	429a      	cmp	r2, r3
 800422a:	d201      	bcs.n	8004230 <metal_io_virt_to_offset+0x22>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	e001      	b.n	8004234 <metal_io_virt_to_offset+0x26>
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b091      	sub	sp, #68	; 0x44
 8004244:	af04      	add	r7, sp, #16
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	429a      	cmp	r2, r3
 800425a:	d902      	bls.n	8004262 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800425c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8004260:	e053      	b.n	800430a <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8004262:	2300      	movs	r3, #0
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004266:	e04b      	b.n	8004300 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426e:	4613      	mov	r3, r2
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	3304      	adds	r3, #4
 800427e:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d118      	bne.n	80042ba <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4619      	mov	r1, r3
 8004294:	69f8      	ldr	r0, [r7, #28]
 8004296:	f7ff ffba 	bl	800420e <metal_io_virt_to_offset>
 800429a:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 80042a0:	461a      	mov	r2, r3
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f7ff ff8d 	bl	80041c8 <vring_size>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2200      	movs	r2, #0
 80042b2:	69b9      	ldr	r1, [r7, #24]
 80042b4:	69f8      	ldr	r0, [r7, #28]
 80042b6:	f7fe fb1e 	bl	80028f6 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	b298      	uxth	r0, r3
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042ce:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80042d0:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80042d6:	6a12      	ldr	r2, [r2, #32]
 80042d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042da:	6809      	ldr	r1, [r1, #0]
 80042dc:	9102      	str	r1, [sp, #8]
 80042de:	9201      	str	r2, [sp, #4]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	4622      	mov	r2, r4
 80042e6:	4601      	mov	r1, r0
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f8c4 	bl	8004476 <virtqueue_create>
 80042ee:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <virtio_create_virtqueues+0xba>
			return ret;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	e007      	b.n	800430a <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	3301      	adds	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d3af      	bcc.n	8004268 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3734      	adds	r7, #52	; 0x34
 800430e:	46bd      	mov	sp, r7
 8004310:	bd90      	pop	{r4, r7, pc}

08004312 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	441a      	add	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	461a      	mov	r2, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	425b      	negs	r3, r3
 8004350:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8004352:	461a      	mov	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	60da      	str	r2, [r3, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	80fb      	strh	r3, [r7, #6]
 800436e:	460b      	mov	r3, r1
 8004370:	80bb      	strh	r3, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8004376:	88ba      	ldrh	r2, [r7, #4]
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8004382:	88b9      	ldrh	r1, [r7, #4]
 8004384:	887b      	ldrh	r3, [r7, #2]
 8004386:	1acb      	subs	r3, r1, r3
 8004388:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800438a:	429a      	cmp	r2, r3
 800438c:	bf34      	ite	cc
 800438e:	2301      	movcc	r3, #1
 8004390:	2300      	movcs	r3, #0
 8004392:	b2db      	uxtb	r3, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <metal_io_virt_to_offset>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d201      	bcs.n	80043c2 <metal_io_virt_to_offset+0x22>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	e001      	b.n	80043c6 <metal_io_virt_to_offset+0x26>
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <metal_io_phys>:
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 80043e0:	2b1f      	cmp	r3, #31
 80043e2:	d805      	bhi.n	80043f0 <metal_io_phys+0x1e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	fa22 f303 	lsr.w	r3, r2, r3
 80043ee:	e000      	b.n	80043f2 <metal_io_phys+0x20>
 80043f0:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 80043f2:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d010      	beq.n	800441e <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d80b      	bhi.n	800441e <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6919      	ldr	r1, [r3, #16]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800441a:	4413      	add	r3, r2
 800441c:	e001      	b.n	8004422 <metal_io_phys+0x50>
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <metal_io_virt_to_phys>:
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ffb0 	bl	80043a0 <metal_io_virt_to_offset>
 8004440:	4603      	mov	r3, r0
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ffc4 	bl	80043d2 <metal_io_phys>
 800444a:	4603      	mov	r3, r0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff ffe1 	bl	800442e <metal_io_virt_to_phys>
 800446c:	4603      	mov	r3, r0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	460b      	mov	r3, r1
 8004484:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d121      	bne.n	80044d4 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	897a      	ldrh	r2, [r7, #10]
 80044a0:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	891a      	ldrh	r2, [r3, #8]
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	895a      	ldrh	r2, [r3, #10]
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	6a3a      	ldr	r2, [r7, #32]
 80044b6:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ca:	f000 f97a 	bl	80047c2 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 80044ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d0:	f000 f899 	bl	8004606 <virtqueue_disable_cb>
	}

	return (status);
 80044d4:	697b      	ldr	r3, [r7, #20]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	; 0x28
 80044e2:	af02      	add	r7, sp, #8
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d12c      	bne.n	800455c <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004506:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8004508:	8a7b      	ldrh	r3, [r7, #18]
 800450a:	3307      	adds	r3, #7
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004518:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	b29a      	uxth	r2, r3
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	69d9      	ldr	r1, [r3, #28]
 8004526:	8a7a      	ldrh	r2, [r7, #18]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f8a7 	bl	8004686 <vq_ring_add_buffer>
 8004538:	4603      	mov	r3, r0
 800453a:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8a3a      	ldrh	r2, [r7, #16]
 8004540:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	b29b      	uxth	r3, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8004552:	8a7b      	ldrh	r3, [r7, #18]
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f966 	bl	8004828 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800455c:	69bb      	ldr	r3, [r7, #24]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <virtqueue_get_buffer+0x20>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	885b      	ldrh	r3, [r3, #2]
 8004582:	429a      	cmp	r2, r3
 8004584:	d101      	bne.n	800458a <virtqueue_get_buffer+0x24>
		return (NULL);
 8004586:	2300      	movs	r3, #0
 8004588:	e039      	b.n	80045fe <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	b291      	uxth	r1, r2
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	8651      	strh	r1, [r2, #50]	; 0x32
 8004596:	b21a      	sxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	895b      	ldrh	r3, [r3, #10]
 800459c:	3b01      	subs	r3, #1
 800459e:	b29b      	uxth	r3, r3
 80045a0:	b21b      	sxth	r3, r3
 80045a2:	4013      	ands	r3, r2
 80045a4:	b21b      	sxth	r3, r3
 80045a6:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ac:	8bfb      	ldrh	r3, [r7, #30]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	3304      	adds	r3, #4
 80045b4:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 80045b6:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	82fb      	strh	r3, [r7, #22]
	if (len)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <virtqueue_get_buffer+0x68>
		*len = uep->len;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 80045ce:	8afb      	ldrh	r3, [r7, #22]
 80045d0:	4619      	mov	r1, r3
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f8ae 	bl	8004734 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 80045d8:	8afa      	ldrh	r2, [r7, #22]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3207      	adds	r2, #7
 80045de:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80045e2:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 80045e4:	8afa      	ldrh	r2, [r7, #22]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3207      	adds	r2, #7
 80045ea:	2100      	movs	r1, #0
 80045ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8bfa      	ldrh	r2, [r7, #30]
 80045fa:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 80045fc:	693b      	ldr	r3, [r7, #16]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	895b      	ldrh	r3, [r3, #10]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800462e:	3901      	subs	r1, #1
 8004630:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	460a      	mov	r2, r1
 8004638:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800463a:	e008      	b.n	800464e <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	b292      	uxth	r2, r2
 800464c:	801a      	strh	r2, [r3, #0]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8004662:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f91d 	bl	80048a6 <vq_ring_must_notify_host>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f94d 	bl	8004912 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8004686:	b5b0      	push	{r4, r5, r7, lr}
 8004688:	b088      	sub	sp, #32
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8004696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469a:	4413      	add	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	837b      	strh	r3, [r7, #26]
 80046a6:	e03c      	b.n	8004722 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 80046a8:	8b7b      	ldrh	r3, [r7, #26]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	4413      	add	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4619      	mov	r1, r3
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7ff fec8 	bl	8004454 <virtqueue_virt_to_phys>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2200      	movs	r2, #0
 80046c8:	461c      	mov	r4, r3
 80046ca:	4615      	mov	r5, r2
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	4413      	add	r3, r2
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	461a      	mov	r2, r3
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2200      	movs	r2, #0
 80046e6:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	da06      	bge.n	8004700 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	899b      	ldrh	r3, [r3, #12]
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	429a      	cmp	r2, r3
 8004706:	db06      	blt.n	8004716 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	899b      	ldrh	r3, [r3, #12]
 800470c:	f043 0302 	orr.w	r3, r3, #2
 8004710:	b29a      	uxth	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	89db      	ldrh	r3, [r3, #14]
 8004720:	837b      	strh	r3, [r7, #26]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	429a      	cmp	r2, r3
 8004728:	dbbe      	blt.n	80046a8 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800472a:	8b7b      	ldrh	r3, [r7, #26]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bdb0      	pop	{r4, r5, r7, pc}

08004734 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4413      	add	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	3307      	adds	r3, #7
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	889b      	ldrh	r3, [r3, #4]
 8004760:	4413      	add	r3, r2
 8004762:	b29a      	uxth	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	889b      	ldrh	r3, [r3, #4]
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	899b      	ldrh	r3, [r3, #12]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d113      	bne.n	80047a8 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8004780:	e00c      	b.n	800479c <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	89db      	ldrh	r3, [r3, #14]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	4413      	add	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	889b      	ldrh	r3, [r3, #4]
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	899b      	ldrh	r3, [r3, #12]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1ec      	bne.n	8004782 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b088      	sub	sp, #32
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	895b      	ldrh	r3, [r3, #10]
 80047d2:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3318      	adds	r3, #24
 80047d8:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	6978      	ldr	r0, [r7, #20]
 80047e2:	f7ff fd96 	bl	8004312 <vring_init>

	for (i = 0; i < size - 1; i++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e00c      	b.n	8004806 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	440b      	add	r3, r1
 80047fa:	3201      	adds	r2, #1
 80047fc:	b292      	uxth	r2, r2
 80047fe:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	3b01      	subs	r3, #1
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	429a      	cmp	r2, r3
 800480e:	dbed      	blt.n	80047ec <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	4413      	add	r3, r2
 800481a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800481e:	81da      	strh	r2, [r3, #14]
}
 8004820:	bf00      	nop
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	885b      	ldrh	r3, [r3, #2]
 800483a:	b21a      	sxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	895b      	ldrh	r3, [r3, #10]
 8004840:	3b01      	subs	r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	b21b      	sxth	r3, r3
 8004846:	4013      	ands	r3, r2
 8004848:	b21b      	sxth	r3, r3
 800484a:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	89fb      	ldrh	r3, [r7, #14]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800485a:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	885a      	ldrh	r2, [r3, #2]
 8004864:	3201      	adds	r2, #1
 8004866:	b292      	uxth	r2, r2
 8004868:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	3301      	adds	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800488a:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <virtqueue_notification+0x1c>
		vq->callback(vq);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01d      	beq.n	80048f6 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	885b      	ldrh	r3, [r3, #2]
 80048c0:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c6:	89fa      	ldrh	r2, [r7, #14]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 80048dc:	89ba      	ldrh	r2, [r7, #12]
 80048de:	89f9      	ldrh	r1, [r7, #14]
 80048e0:	897b      	ldrh	r3, [r7, #10]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fd3e 	bl	8004364 <vring_need_event>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e009      	b.n	800490a <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	4798      	blx	r3
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <HAL_HSEM_FreeCallback+0x1c>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8004942:	2002      	movs	r0, #2
 8004944:	f7fc fb96 	bl	8001074 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	240001c8 	.word	0x240001c8

08004954 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <MAILBOX_Init+0x34>)
 800495c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004960:	4a09      	ldr	r2, [pc, #36]	; (8004988 <MAILBOX_Init+0x34>)
 8004962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800496a:	4b07      	ldr	r3, [pc, #28]	; (8004988 <MAILBOX_Init+0x34>)
 800496c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8004978:	2002      	movs	r0, #2
 800497a:	f7fc fb7b 	bl	8001074 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	58024400 	.word	0x58024400

0800498c <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <MAILBOX_Poll+0x30>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d108      	bne.n	80049ae <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800499c:	2100      	movs	r1, #0
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fe fb77 	bl	8003092 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <MAILBOX_Poll+0x30>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
    return 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e001      	b.n	80049b2 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 80049ae:	f06f 030a 	mvn.w	r3, #10
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	240001c8 	.word	0x240001c8

080049c0 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7fc fb24 	bl	8001018 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 80049d0:	2100      	movs	r1, #0
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7fc fb3a 	bl	800104c <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d006      	beq.n	8004a02 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d001      	beq.n	8004a02 <is_rpmsg_ept_ready+0x20>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <is_rpmsg_ept_ready+0x22>
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d209      	bcs.n	8004a38 <metal_device_io_region+0x28>
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	3308      	adds	r3, #8
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	e000      	b.n	8004a3a <metal_device_io_region+0x2a>
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b08d      	sub	sp, #52	; 0x34
 8004a4c:	af04      	add	r7, sp, #16
 8004a4e:	6078      	str	r0, [r7, #4]
  int status = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8004a58:	4a41      	ldr	r2, [pc, #260]	; (8004b60 <OPENAMP_shmem_init+0x118>)
 8004a5a:	f107 0310 	add.w	r3, r7, #16
 8004a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a62:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8004a6e:	f107 0310 	add.w	r3, r7, #16
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fda8 	bl	80025c8 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8004a78:	483a      	ldr	r0, [pc, #232]	; (8004b64 <OPENAMP_shmem_init+0x11c>)
 8004a7a:	f7fd fc43 	bl	8002304 <metal_register_generic_device>
 8004a7e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <OPENAMP_shmem_init+0x42>
    return status;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	e066      	b.n	8004b58 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8004a8a:	f107 0318 	add.w	r3, r7, #24
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4935      	ldr	r1, [pc, #212]	; (8004b68 <OPENAMP_shmem_init+0x120>)
 8004a92:	4836      	ldr	r0, [pc, #216]	; (8004b6c <OPENAMP_shmem_init+0x124>)
 8004a94:	f7fd fbf8 	bl	8002288 <metal_device_open>
 8004a98:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <OPENAMP_shmem_init+0x5c>
    return status;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	e059      	b.n	8004b58 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8004aa4:	4a32      	ldr	r2, [pc, #200]	; (8004b70 <OPENAMP_shmem_init+0x128>)
 8004aa6:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <OPENAMP_shmem_init+0x12c>)
 8004aa8:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8004ab0:	4a31      	ldr	r2, [pc, #196]	; (8004b78 <OPENAMP_shmem_init+0x130>)
 8004ab2:	4b2f      	ldr	r3, [pc, #188]	; (8004b70 <OPENAMP_shmem_init+0x128>)
 8004ab4:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9302      	str	r3, [sp, #8]
 8004abc:	2300      	movs	r3, #0
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <OPENAMP_shmem_init+0x12c>)
 8004aca:	4929      	ldr	r1, [pc, #164]	; (8004b70 <OPENAMP_shmem_init+0x128>)
 8004acc:	f7fd fdd7 	bl	800267e <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff9b 	bl	8004a10 <metal_device_io_region>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <OPENAMP_shmem_init+0x134>)
 8004ade:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8004ae0:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <OPENAMP_shmem_init+0x134>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <OPENAMP_shmem_init+0xa6>
    return -1;
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	e034      	b.n	8004b58 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8004aee:	f107 0208 	add.w	r2, r7, #8
 8004af2:	f107 030c 	add.w	r3, r7, #12
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f929 	bl	8004d50 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <OPENAMP_shmem_init+0x138>)
 8004b02:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <OPENAMP_shmem_init+0x138>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8004b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b10:	e022      	b.n	8004b58 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <OPENAMP_shmem_init+0x138>)
 8004b1a:	6819      	ldr	r1, [r3, #0]
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <OPENAMP_shmem_init+0x138>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	461c      	mov	r4, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4623      	mov	r3, r4
 8004b34:	f7fd fda3 	bl	800267e <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff ff67 	bl	8004a10 <metal_device_io_region>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <OPENAMP_shmem_init+0x13c>)
 8004b46:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8004b48:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <OPENAMP_shmem_init+0x13c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <OPENAMP_shmem_init+0x10e>
    return -1;
 8004b50:	f04f 33ff 	mov.w	r3, #4294967295
 8004b54:	e000      	b.n	8004b58 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3724      	adds	r7, #36	; 0x24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd90      	pop	{r4, r7, pc}
 8004b60:	08006098 	.word	0x08006098
 8004b64:	24000058 	.word	0x24000058
 8004b68:	08006084 	.word	0x08006084
 8004b6c:	08006090 	.word	0x08006090
 8004b70:	38000400 	.word	0x38000400
 8004b74:	2400025c 	.word	0x2400025c
 8004b78:	38010000 	.word	0x38010000
 8004b7c:	240001cc 	.word	0x240001cc
 8004b80:	240001d4 	.word	0x240001d4
 8004b84:	240001d0 	.word	0x240001d0

08004b88 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b08b      	sub	sp, #44	; 0x2c
 8004b8c:	af04      	add	r7, sp, #16
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
  int status = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8004b9e:	f7ff fed9 	bl	8004954 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ff50 	bl	8004a48 <OPENAMP_shmem_init>
 8004ba8:	60f8      	str	r0, [r7, #12]
  if(status)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	e06a      	b.n	8004c8a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <MX_OPENAMP_Init+0x10c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f103 0218 	add.w	r2, r3, #24
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <MX_OPENAMP_Init+0x110>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	9102      	str	r1, [sp, #8]
 8004bc6:	4935      	ldr	r1, [pc, #212]	; (8004c9c <MX_OPENAMP_Init+0x114>)
 8004bc8:	9101      	str	r1, [sp, #4]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	9100      	str	r1, [sp, #0]
 8004bce:	21ff      	movs	r1, #255	; 0xff
 8004bd0:	f7fe f980 	bl	8002ed4 <rproc_virtio_create_vdev>
 8004bd4:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	e053      	b.n	8004c8a <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f7fe fa91 	bl	800310a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <MX_OPENAMP_Init+0x10c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3334      	adds	r3, #52	; 0x34
 8004bee:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8004bf8:	461c      	mov	r4, r3
 8004bfa:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <MX_OPENAMP_Init+0x118>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	6892      	ldr	r2, [r2, #8]
 8004c02:	6979      	ldr	r1, [r7, #20]
 8004c04:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8004c06:	9102      	str	r1, [sp, #8]
 8004c08:	9201      	str	r2, [sp, #4]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	4623      	mov	r3, r4
 8004c0e:	4602      	mov	r2, r0
 8004c10:	2100      	movs	r1, #0
 8004c12:	6938      	ldr	r0, [r7, #16]
 8004c14:	f7fe fa0c 	bl	8003030 <rproc_virtio_init_vring>
 8004c18:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	e032      	b.n	8004c8a <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <MX_OPENAMP_Init+0x10c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3348      	adds	r3, #72	; 0x48
 8004c2a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8004c34:	461c      	mov	r4, r3
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <MX_OPENAMP_Init+0x118>)
 8004c38:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	6979      	ldr	r1, [r7, #20]
 8004c40:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8004c42:	9102      	str	r1, [sp, #8]
 8004c44:	9201      	str	r2, [sp, #4]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	4623      	mov	r3, r4
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	6938      	ldr	r0, [r7, #16]
 8004c50:	f7fe f9ee 	bl	8003030 <rproc_virtio_init_vring>
 8004c54:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	e014      	b.n	8004c8a <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8004c60:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <MX_OPENAMP_Init+0x11c>)
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8004c68:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <MX_OPENAMP_Init+0x120>)
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <MX_OPENAMP_Init+0x11c>)
 8004c6c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8004c6e:	461a      	mov	r2, r3
 8004c70:	480e      	ldr	r0, [pc, #56]	; (8004cac <MX_OPENAMP_Init+0x124>)
 8004c72:	f7fe ff06 	bl	8003a82 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <MX_OPENAMP_Init+0x118>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <MX_OPENAMP_Init+0x124>)
 8004c7c:	9200      	str	r2, [sp, #0]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	6939      	ldr	r1, [r7, #16]
 8004c82:	480b      	ldr	r0, [pc, #44]	; (8004cb0 <MX_OPENAMP_Init+0x128>)
 8004c84:	f7ff f96c 	bl	8003f60 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd90      	pop	{r4, r7, pc}
 8004c92:	bf00      	nop
 8004c94:	240001d4 	.word	0x240001d4
 8004c98:	240001d0 	.word	0x240001d0
 8004c9c:	080049c1 	.word	0x080049c1
 8004ca0:	240001cc 	.word	0x240001cc
 8004ca4:	38000400 	.word	0x38000400
 8004ca8:	38010000 	.word	0x38010000
 8004cac:	240001d8 	.word	0x240001d8
 8004cb0:	240001e4 	.word	0x240001e4

08004cb4 <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 8004cb8:	4803      	ldr	r0, [pc, #12]	; (8004cc8 <OPENAMP_DeInit+0x14>)
 8004cba:	f7ff fa3b 	bl	8004134 <rpmsg_deinit_vdev>

  metal_finish();
 8004cbe:	f7fd fcb5 	bl	800262c <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	240001e4 	.word	0x240001e4

08004ccc <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	; 0x28
 8004cd0:	af04      	add	r7, sp, #16
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	9302      	str	r3, [sp, #8]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4904      	ldr	r1, [pc, #16]	; (8004d04 <OPENAMP_create_endpoint+0x38>)
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7fe fc96 	bl	8003624 <rpmsg_create_ept>
 8004cf8:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8004cfa:	697b      	ldr	r3, [r7, #20]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	240001e4 	.word	0x240001e4

08004d08 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8004d0c:	4b03      	ldr	r3, [pc, #12]	; (8004d1c <OPENAMP_check_for_message+0x14>)
 8004d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fe3b 	bl	800498c <MAILBOX_Poll>
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	240001e4 	.word	0x240001e4

08004d20 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8004d28:	e004      	b.n	8004d34 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <OPENAMP_Wait_EndPointready+0x2c>)
 8004d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fe2c 	bl	800498c <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff fe54 	bl	80049e2 <is_rpmsg_ept_ready>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f4      	beq.n	8004d2a <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	240001e4 	.word	0x240001e4

08004d50 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8004d5c:	228c      	movs	r2, #140	; 0x8c
 8004d5e:	2100      	movs	r1, #0
 8004d60:	481e      	ldr	r0, [pc, #120]	; (8004ddc <resource_table_init+0x8c>)
 8004d62:	f000 f8b1 	bl	8004ec8 <memset>
	resource_table.num = 1;
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <resource_table_init+0x8c>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <resource_table_init+0x8c>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <resource_table_init+0x8c>)
 8004d74:	2218      	movs	r2, #24
 8004d76:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <resource_table_init+0x90>)
 8004d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d7e:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <resource_table_init+0x8c>)
 8004d80:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 8004d82:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <resource_table_init+0x8c>)
 8004d84:	2204      	movs	r2, #4
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 8004d88:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <resource_table_init+0x8c>)
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 8004d8e:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <resource_table_init+0x8c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 8004d94:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <resource_table_init+0x90>)
 8004d96:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <resource_table_init+0x8c>)
 8004d98:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <resource_table_init+0x8c>)
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <resource_table_init+0x8c>)
 8004da2:	2204      	movs	r2, #4
 8004da4:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <resource_table_init+0x8c>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 8004dac:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <resource_table_init+0x8c>)
 8004dae:	2203      	movs	r2, #3
 8004db0:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <resource_table_init+0x8c>)
 8004db4:	2207      	movs	r2, #7
 8004db6:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <resource_table_init+0x8c>)
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <resource_table_init+0x8c>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	228c      	movs	r2, #140	; 0x8c
 8004dca:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a03      	ldr	r2, [pc, #12]	; (8004ddc <resource_table_init+0x8c>)
 8004dd0:	601a      	str	r2, [r3, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	38000000 	.word	0x38000000
 8004de0:	38000400 	.word	0x38000400

08004de4 <__assert_func>:
 8004de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004de6:	4614      	mov	r4, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <__assert_func+0x2c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4605      	mov	r5, r0
 8004df0:	68d8      	ldr	r0, [r3, #12]
 8004df2:	b14c      	cbz	r4, 8004e08 <__assert_func+0x24>
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <__assert_func+0x30>)
 8004df6:	9100      	str	r1, [sp, #0]
 8004df8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004dfc:	4906      	ldr	r1, [pc, #24]	; (8004e18 <__assert_func+0x34>)
 8004dfe:	462b      	mov	r3, r5
 8004e00:	f000 f80e 	bl	8004e20 <fiprintf>
 8004e04:	f000 fd2e 	bl	8005864 <abort>
 8004e08:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <__assert_func+0x38>)
 8004e0a:	461c      	mov	r4, r3
 8004e0c:	e7f3      	b.n	8004df6 <__assert_func+0x12>
 8004e0e:	bf00      	nop
 8004e10:	240000d4 	.word	0x240000d4
 8004e14:	08006117 	.word	0x08006117
 8004e18:	08006124 	.word	0x08006124
 8004e1c:	08006152 	.word	0x08006152

08004e20 <fiprintf>:
 8004e20:	b40e      	push	{r1, r2, r3}
 8004e22:	b503      	push	{r0, r1, lr}
 8004e24:	4601      	mov	r1, r0
 8004e26:	ab03      	add	r3, sp, #12
 8004e28:	4805      	ldr	r0, [pc, #20]	; (8004e40 <fiprintf+0x20>)
 8004e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e2e:	6800      	ldr	r0, [r0, #0]
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	f000 f95b 	bl	80050ec <_vfiprintf_r>
 8004e36:	b002      	add	sp, #8
 8004e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e3c:	b003      	add	sp, #12
 8004e3e:	4770      	bx	lr
 8004e40:	240000d4 	.word	0x240000d4

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	4d0d      	ldr	r5, [pc, #52]	; (8004e7c <__libc_init_array+0x38>)
 8004e48:	4c0d      	ldr	r4, [pc, #52]	; (8004e80 <__libc_init_array+0x3c>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	2600      	movs	r6, #0
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	4d0b      	ldr	r5, [pc, #44]	; (8004e84 <__libc_init_array+0x40>)
 8004e56:	4c0c      	ldr	r4, [pc, #48]	; (8004e88 <__libc_init_array+0x44>)
 8004e58:	f001 f828 	bl	8005eac <_init>
 8004e5c:	1b64      	subs	r4, r4, r5
 8004e5e:	10a4      	asrs	r4, r4, #2
 8004e60:	2600      	movs	r6, #0
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	080061ec 	.word	0x080061ec
 8004e80:	080061ec 	.word	0x080061ec
 8004e84:	080061ec 	.word	0x080061ec
 8004e88:	080061f0 	.word	0x080061f0

08004e8c <malloc>:
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <malloc+0xc>)
 8004e8e:	4601      	mov	r1, r0
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f000 b88d 	b.w	8004fb0 <_malloc_r>
 8004e96:	bf00      	nop
 8004e98:	240000d4 	.word	0x240000d4

08004e9c <free>:
 8004e9c:	4b02      	ldr	r3, [pc, #8]	; (8004ea8 <free+0xc>)
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	f000 b819 	b.w	8004ed8 <_free_r>
 8004ea6:	bf00      	nop
 8004ea8:	240000d4 	.word	0x240000d4

08004eac <memcpy>:
 8004eac:	440a      	add	r2, r1
 8004eae:	4291      	cmp	r1, r2
 8004eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eb4:	d100      	bne.n	8004eb8 <memcpy+0xc>
 8004eb6:	4770      	bx	lr
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ec2:	4291      	cmp	r1, r2
 8004ec4:	d1f9      	bne.n	8004eba <memcpy+0xe>
 8004ec6:	bd10      	pop	{r4, pc}

08004ec8 <memset>:
 8004ec8:	4402      	add	r2, r0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d100      	bne.n	8004ed2 <memset+0xa>
 8004ed0:	4770      	bx	lr
 8004ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed6:	e7f9      	b.n	8004ecc <memset+0x4>

08004ed8 <_free_r>:
 8004ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eda:	2900      	cmp	r1, #0
 8004edc:	d044      	beq.n	8004f68 <_free_r+0x90>
 8004ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee2:	9001      	str	r0, [sp, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8004eea:	bfb8      	it	lt
 8004eec:	18e4      	addlt	r4, r4, r3
 8004eee:	f000 fee1 	bl	8005cb4 <__malloc_lock>
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <_free_r+0x94>)
 8004ef4:	9801      	ldr	r0, [sp, #4]
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	b933      	cbnz	r3, 8004f08 <_free_r+0x30>
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	6014      	str	r4, [r2, #0]
 8004efe:	b003      	add	sp, #12
 8004f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f04:	f000 bedc 	b.w	8005cc0 <__malloc_unlock>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d908      	bls.n	8004f1e <_free_r+0x46>
 8004f0c:	6825      	ldr	r5, [r4, #0]
 8004f0e:	1961      	adds	r1, r4, r5
 8004f10:	428b      	cmp	r3, r1
 8004f12:	bf01      	itttt	eq
 8004f14:	6819      	ldreq	r1, [r3, #0]
 8004f16:	685b      	ldreq	r3, [r3, #4]
 8004f18:	1949      	addeq	r1, r1, r5
 8004f1a:	6021      	streq	r1, [r4, #0]
 8004f1c:	e7ed      	b.n	8004efa <_free_r+0x22>
 8004f1e:	461a      	mov	r2, r3
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b10b      	cbz	r3, 8004f28 <_free_r+0x50>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d9fa      	bls.n	8004f1e <_free_r+0x46>
 8004f28:	6811      	ldr	r1, [r2, #0]
 8004f2a:	1855      	adds	r5, r2, r1
 8004f2c:	42a5      	cmp	r5, r4
 8004f2e:	d10b      	bne.n	8004f48 <_free_r+0x70>
 8004f30:	6824      	ldr	r4, [r4, #0]
 8004f32:	4421      	add	r1, r4
 8004f34:	1854      	adds	r4, r2, r1
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	d1e0      	bne.n	8004efe <_free_r+0x26>
 8004f3c:	681c      	ldr	r4, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	6053      	str	r3, [r2, #4]
 8004f42:	4421      	add	r1, r4
 8004f44:	6011      	str	r1, [r2, #0]
 8004f46:	e7da      	b.n	8004efe <_free_r+0x26>
 8004f48:	d902      	bls.n	8004f50 <_free_r+0x78>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	6003      	str	r3, [r0, #0]
 8004f4e:	e7d6      	b.n	8004efe <_free_r+0x26>
 8004f50:	6825      	ldr	r5, [r4, #0]
 8004f52:	1961      	adds	r1, r4, r5
 8004f54:	428b      	cmp	r3, r1
 8004f56:	bf04      	itt	eq
 8004f58:	6819      	ldreq	r1, [r3, #0]
 8004f5a:	685b      	ldreq	r3, [r3, #4]
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	bf04      	itt	eq
 8004f60:	1949      	addeq	r1, r1, r5
 8004f62:	6021      	streq	r1, [r4, #0]
 8004f64:	6054      	str	r4, [r2, #4]
 8004f66:	e7ca      	b.n	8004efe <_free_r+0x26>
 8004f68:	b003      	add	sp, #12
 8004f6a:	bd30      	pop	{r4, r5, pc}
 8004f6c:	24000260 	.word	0x24000260

08004f70 <sbrk_aligned>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	4e0e      	ldr	r6, [pc, #56]	; (8004fac <sbrk_aligned+0x3c>)
 8004f74:	460c      	mov	r4, r1
 8004f76:	6831      	ldr	r1, [r6, #0]
 8004f78:	4605      	mov	r5, r0
 8004f7a:	b911      	cbnz	r1, 8004f82 <sbrk_aligned+0x12>
 8004f7c:	f000 fb7a 	bl	8005674 <_sbrk_r>
 8004f80:	6030      	str	r0, [r6, #0]
 8004f82:	4621      	mov	r1, r4
 8004f84:	4628      	mov	r0, r5
 8004f86:	f000 fb75 	bl	8005674 <_sbrk_r>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	d00a      	beq.n	8004fa4 <sbrk_aligned+0x34>
 8004f8e:	1cc4      	adds	r4, r0, #3
 8004f90:	f024 0403 	bic.w	r4, r4, #3
 8004f94:	42a0      	cmp	r0, r4
 8004f96:	d007      	beq.n	8004fa8 <sbrk_aligned+0x38>
 8004f98:	1a21      	subs	r1, r4, r0
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 fb6a 	bl	8005674 <_sbrk_r>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d101      	bne.n	8004fa8 <sbrk_aligned+0x38>
 8004fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8004fa8:	4620      	mov	r0, r4
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	24000264 	.word	0x24000264

08004fb0 <_malloc_r>:
 8004fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb4:	1ccd      	adds	r5, r1, #3
 8004fb6:	f025 0503 	bic.w	r5, r5, #3
 8004fba:	3508      	adds	r5, #8
 8004fbc:	2d0c      	cmp	r5, #12
 8004fbe:	bf38      	it	cc
 8004fc0:	250c      	movcc	r5, #12
 8004fc2:	2d00      	cmp	r5, #0
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	db01      	blt.n	8004fcc <_malloc_r+0x1c>
 8004fc8:	42a9      	cmp	r1, r5
 8004fca:	d905      	bls.n	8004fd8 <_malloc_r+0x28>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd8:	4e2e      	ldr	r6, [pc, #184]	; (8005094 <_malloc_r+0xe4>)
 8004fda:	f000 fe6b 	bl	8005cb4 <__malloc_lock>
 8004fde:	6833      	ldr	r3, [r6, #0]
 8004fe0:	461c      	mov	r4, r3
 8004fe2:	bb34      	cbnz	r4, 8005032 <_malloc_r+0x82>
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f7ff ffc2 	bl	8004f70 <sbrk_aligned>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	4604      	mov	r4, r0
 8004ff0:	d14d      	bne.n	800508e <_malloc_r+0xde>
 8004ff2:	6834      	ldr	r4, [r6, #0]
 8004ff4:	4626      	mov	r6, r4
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	d140      	bne.n	800507c <_malloc_r+0xcc>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4638      	mov	r0, r7
 8005000:	eb04 0803 	add.w	r8, r4, r3
 8005004:	f000 fb36 	bl	8005674 <_sbrk_r>
 8005008:	4580      	cmp	r8, r0
 800500a:	d13a      	bne.n	8005082 <_malloc_r+0xd2>
 800500c:	6821      	ldr	r1, [r4, #0]
 800500e:	3503      	adds	r5, #3
 8005010:	1a6d      	subs	r5, r5, r1
 8005012:	f025 0503 	bic.w	r5, r5, #3
 8005016:	3508      	adds	r5, #8
 8005018:	2d0c      	cmp	r5, #12
 800501a:	bf38      	it	cc
 800501c:	250c      	movcc	r5, #12
 800501e:	4629      	mov	r1, r5
 8005020:	4638      	mov	r0, r7
 8005022:	f7ff ffa5 	bl	8004f70 <sbrk_aligned>
 8005026:	3001      	adds	r0, #1
 8005028:	d02b      	beq.n	8005082 <_malloc_r+0xd2>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	442b      	add	r3, r5
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	e00e      	b.n	8005050 <_malloc_r+0xa0>
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	1b52      	subs	r2, r2, r5
 8005036:	d41e      	bmi.n	8005076 <_malloc_r+0xc6>
 8005038:	2a0b      	cmp	r2, #11
 800503a:	d916      	bls.n	800506a <_malloc_r+0xba>
 800503c:	1961      	adds	r1, r4, r5
 800503e:	42a3      	cmp	r3, r4
 8005040:	6025      	str	r5, [r4, #0]
 8005042:	bf18      	it	ne
 8005044:	6059      	strne	r1, [r3, #4]
 8005046:	6863      	ldr	r3, [r4, #4]
 8005048:	bf08      	it	eq
 800504a:	6031      	streq	r1, [r6, #0]
 800504c:	5162      	str	r2, [r4, r5]
 800504e:	604b      	str	r3, [r1, #4]
 8005050:	4638      	mov	r0, r7
 8005052:	f104 060b 	add.w	r6, r4, #11
 8005056:	f000 fe33 	bl	8005cc0 <__malloc_unlock>
 800505a:	f026 0607 	bic.w	r6, r6, #7
 800505e:	1d23      	adds	r3, r4, #4
 8005060:	1af2      	subs	r2, r6, r3
 8005062:	d0b6      	beq.n	8004fd2 <_malloc_r+0x22>
 8005064:	1b9b      	subs	r3, r3, r6
 8005066:	50a3      	str	r3, [r4, r2]
 8005068:	e7b3      	b.n	8004fd2 <_malloc_r+0x22>
 800506a:	6862      	ldr	r2, [r4, #4]
 800506c:	42a3      	cmp	r3, r4
 800506e:	bf0c      	ite	eq
 8005070:	6032      	streq	r2, [r6, #0]
 8005072:	605a      	strne	r2, [r3, #4]
 8005074:	e7ec      	b.n	8005050 <_malloc_r+0xa0>
 8005076:	4623      	mov	r3, r4
 8005078:	6864      	ldr	r4, [r4, #4]
 800507a:	e7b2      	b.n	8004fe2 <_malloc_r+0x32>
 800507c:	4634      	mov	r4, r6
 800507e:	6876      	ldr	r6, [r6, #4]
 8005080:	e7b9      	b.n	8004ff6 <_malloc_r+0x46>
 8005082:	230c      	movs	r3, #12
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	4638      	mov	r0, r7
 8005088:	f000 fe1a 	bl	8005cc0 <__malloc_unlock>
 800508c:	e7a1      	b.n	8004fd2 <_malloc_r+0x22>
 800508e:	6025      	str	r5, [r4, #0]
 8005090:	e7de      	b.n	8005050 <_malloc_r+0xa0>
 8005092:	bf00      	nop
 8005094:	24000260 	.word	0x24000260

08005098 <__sfputc_r>:
 8005098:	6893      	ldr	r3, [r2, #8]
 800509a:	3b01      	subs	r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	b410      	push	{r4}
 80050a0:	6093      	str	r3, [r2, #8]
 80050a2:	da08      	bge.n	80050b6 <__sfputc_r+0x1e>
 80050a4:	6994      	ldr	r4, [r2, #24]
 80050a6:	42a3      	cmp	r3, r4
 80050a8:	db01      	blt.n	80050ae <__sfputc_r+0x16>
 80050aa:	290a      	cmp	r1, #10
 80050ac:	d103      	bne.n	80050b6 <__sfputc_r+0x1e>
 80050ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b2:	f000 bb17 	b.w	80056e4 <__swbuf_r>
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	1c58      	adds	r0, r3, #1
 80050ba:	6010      	str	r0, [r2, #0]
 80050bc:	7019      	strb	r1, [r3, #0]
 80050be:	4608      	mov	r0, r1
 80050c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <__sfputs_r>:
 80050c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c8:	4606      	mov	r6, r0
 80050ca:	460f      	mov	r7, r1
 80050cc:	4614      	mov	r4, r2
 80050ce:	18d5      	adds	r5, r2, r3
 80050d0:	42ac      	cmp	r4, r5
 80050d2:	d101      	bne.n	80050d8 <__sfputs_r+0x12>
 80050d4:	2000      	movs	r0, #0
 80050d6:	e007      	b.n	80050e8 <__sfputs_r+0x22>
 80050d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050dc:	463a      	mov	r2, r7
 80050de:	4630      	mov	r0, r6
 80050e0:	f7ff ffda 	bl	8005098 <__sfputc_r>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d1f3      	bne.n	80050d0 <__sfputs_r+0xa>
 80050e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050ec <_vfiprintf_r>:
 80050ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	460d      	mov	r5, r1
 80050f2:	b09d      	sub	sp, #116	; 0x74
 80050f4:	4614      	mov	r4, r2
 80050f6:	4698      	mov	r8, r3
 80050f8:	4606      	mov	r6, r0
 80050fa:	b118      	cbz	r0, 8005104 <_vfiprintf_r+0x18>
 80050fc:	6983      	ldr	r3, [r0, #24]
 80050fe:	b90b      	cbnz	r3, 8005104 <_vfiprintf_r+0x18>
 8005100:	f000 fcd2 	bl	8005aa8 <__sinit>
 8005104:	4b89      	ldr	r3, [pc, #548]	; (800532c <_vfiprintf_r+0x240>)
 8005106:	429d      	cmp	r5, r3
 8005108:	d11b      	bne.n	8005142 <_vfiprintf_r+0x56>
 800510a:	6875      	ldr	r5, [r6, #4]
 800510c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800510e:	07d9      	lsls	r1, r3, #31
 8005110:	d405      	bmi.n	800511e <_vfiprintf_r+0x32>
 8005112:	89ab      	ldrh	r3, [r5, #12]
 8005114:	059a      	lsls	r2, r3, #22
 8005116:	d402      	bmi.n	800511e <_vfiprintf_r+0x32>
 8005118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800511a:	f000 fd63 	bl	8005be4 <__retarget_lock_acquire_recursive>
 800511e:	89ab      	ldrh	r3, [r5, #12]
 8005120:	071b      	lsls	r3, r3, #28
 8005122:	d501      	bpl.n	8005128 <_vfiprintf_r+0x3c>
 8005124:	692b      	ldr	r3, [r5, #16]
 8005126:	b9eb      	cbnz	r3, 8005164 <_vfiprintf_r+0x78>
 8005128:	4629      	mov	r1, r5
 800512a:	4630      	mov	r0, r6
 800512c:	f000 fb2c 	bl	8005788 <__swsetup_r>
 8005130:	b1c0      	cbz	r0, 8005164 <_vfiprintf_r+0x78>
 8005132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005134:	07dc      	lsls	r4, r3, #31
 8005136:	d50e      	bpl.n	8005156 <_vfiprintf_r+0x6a>
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	b01d      	add	sp, #116	; 0x74
 800513e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005142:	4b7b      	ldr	r3, [pc, #492]	; (8005330 <_vfiprintf_r+0x244>)
 8005144:	429d      	cmp	r5, r3
 8005146:	d101      	bne.n	800514c <_vfiprintf_r+0x60>
 8005148:	68b5      	ldr	r5, [r6, #8]
 800514a:	e7df      	b.n	800510c <_vfiprintf_r+0x20>
 800514c:	4b79      	ldr	r3, [pc, #484]	; (8005334 <_vfiprintf_r+0x248>)
 800514e:	429d      	cmp	r5, r3
 8005150:	bf08      	it	eq
 8005152:	68f5      	ldreq	r5, [r6, #12]
 8005154:	e7da      	b.n	800510c <_vfiprintf_r+0x20>
 8005156:	89ab      	ldrh	r3, [r5, #12]
 8005158:	0598      	lsls	r0, r3, #22
 800515a:	d4ed      	bmi.n	8005138 <_vfiprintf_r+0x4c>
 800515c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800515e:	f000 fd42 	bl	8005be6 <__retarget_lock_release_recursive>
 8005162:	e7e9      	b.n	8005138 <_vfiprintf_r+0x4c>
 8005164:	2300      	movs	r3, #0
 8005166:	9309      	str	r3, [sp, #36]	; 0x24
 8005168:	2320      	movs	r3, #32
 800516a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800516e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005172:	2330      	movs	r3, #48	; 0x30
 8005174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005338 <_vfiprintf_r+0x24c>
 8005178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800517c:	f04f 0901 	mov.w	r9, #1
 8005180:	4623      	mov	r3, r4
 8005182:	469a      	mov	sl, r3
 8005184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005188:	b10a      	cbz	r2, 800518e <_vfiprintf_r+0xa2>
 800518a:	2a25      	cmp	r2, #37	; 0x25
 800518c:	d1f9      	bne.n	8005182 <_vfiprintf_r+0x96>
 800518e:	ebba 0b04 	subs.w	fp, sl, r4
 8005192:	d00b      	beq.n	80051ac <_vfiprintf_r+0xc0>
 8005194:	465b      	mov	r3, fp
 8005196:	4622      	mov	r2, r4
 8005198:	4629      	mov	r1, r5
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff ff93 	bl	80050c6 <__sfputs_r>
 80051a0:	3001      	adds	r0, #1
 80051a2:	f000 80aa 	beq.w	80052fa <_vfiprintf_r+0x20e>
 80051a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051a8:	445a      	add	r2, fp
 80051aa:	9209      	str	r2, [sp, #36]	; 0x24
 80051ac:	f89a 3000 	ldrb.w	r3, [sl]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a2 	beq.w	80052fa <_vfiprintf_r+0x20e>
 80051b6:	2300      	movs	r3, #0
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051c0:	f10a 0a01 	add.w	sl, sl, #1
 80051c4:	9304      	str	r3, [sp, #16]
 80051c6:	9307      	str	r3, [sp, #28]
 80051c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051cc:	931a      	str	r3, [sp, #104]	; 0x68
 80051ce:	4654      	mov	r4, sl
 80051d0:	2205      	movs	r2, #5
 80051d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d6:	4858      	ldr	r0, [pc, #352]	; (8005338 <_vfiprintf_r+0x24c>)
 80051d8:	f7fb f892 	bl	8000300 <memchr>
 80051dc:	9a04      	ldr	r2, [sp, #16]
 80051de:	b9d8      	cbnz	r0, 8005218 <_vfiprintf_r+0x12c>
 80051e0:	06d1      	lsls	r1, r2, #27
 80051e2:	bf44      	itt	mi
 80051e4:	2320      	movmi	r3, #32
 80051e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ea:	0713      	lsls	r3, r2, #28
 80051ec:	bf44      	itt	mi
 80051ee:	232b      	movmi	r3, #43	; 0x2b
 80051f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051f4:	f89a 3000 	ldrb.w	r3, [sl]
 80051f8:	2b2a      	cmp	r3, #42	; 0x2a
 80051fa:	d015      	beq.n	8005228 <_vfiprintf_r+0x13c>
 80051fc:	9a07      	ldr	r2, [sp, #28]
 80051fe:	4654      	mov	r4, sl
 8005200:	2000      	movs	r0, #0
 8005202:	f04f 0c0a 	mov.w	ip, #10
 8005206:	4621      	mov	r1, r4
 8005208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800520c:	3b30      	subs	r3, #48	; 0x30
 800520e:	2b09      	cmp	r3, #9
 8005210:	d94e      	bls.n	80052b0 <_vfiprintf_r+0x1c4>
 8005212:	b1b0      	cbz	r0, 8005242 <_vfiprintf_r+0x156>
 8005214:	9207      	str	r2, [sp, #28]
 8005216:	e014      	b.n	8005242 <_vfiprintf_r+0x156>
 8005218:	eba0 0308 	sub.w	r3, r0, r8
 800521c:	fa09 f303 	lsl.w	r3, r9, r3
 8005220:	4313      	orrs	r3, r2
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	46a2      	mov	sl, r4
 8005226:	e7d2      	b.n	80051ce <_vfiprintf_r+0xe2>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	1d19      	adds	r1, r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	9103      	str	r1, [sp, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	bfbb      	ittet	lt
 8005234:	425b      	neglt	r3, r3
 8005236:	f042 0202 	orrlt.w	r2, r2, #2
 800523a:	9307      	strge	r3, [sp, #28]
 800523c:	9307      	strlt	r3, [sp, #28]
 800523e:	bfb8      	it	lt
 8005240:	9204      	strlt	r2, [sp, #16]
 8005242:	7823      	ldrb	r3, [r4, #0]
 8005244:	2b2e      	cmp	r3, #46	; 0x2e
 8005246:	d10c      	bne.n	8005262 <_vfiprintf_r+0x176>
 8005248:	7863      	ldrb	r3, [r4, #1]
 800524a:	2b2a      	cmp	r3, #42	; 0x2a
 800524c:	d135      	bne.n	80052ba <_vfiprintf_r+0x1ce>
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	9203      	str	r2, [sp, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfb8      	it	lt
 800525a:	f04f 33ff 	movlt.w	r3, #4294967295
 800525e:	3402      	adds	r4, #2
 8005260:	9305      	str	r3, [sp, #20]
 8005262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005348 <_vfiprintf_r+0x25c>
 8005266:	7821      	ldrb	r1, [r4, #0]
 8005268:	2203      	movs	r2, #3
 800526a:	4650      	mov	r0, sl
 800526c:	f7fb f848 	bl	8000300 <memchr>
 8005270:	b140      	cbz	r0, 8005284 <_vfiprintf_r+0x198>
 8005272:	2340      	movs	r3, #64	; 0x40
 8005274:	eba0 000a 	sub.w	r0, r0, sl
 8005278:	fa03 f000 	lsl.w	r0, r3, r0
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	4303      	orrs	r3, r0
 8005280:	3401      	adds	r4, #1
 8005282:	9304      	str	r3, [sp, #16]
 8005284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005288:	482c      	ldr	r0, [pc, #176]	; (800533c <_vfiprintf_r+0x250>)
 800528a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800528e:	2206      	movs	r2, #6
 8005290:	f7fb f836 	bl	8000300 <memchr>
 8005294:	2800      	cmp	r0, #0
 8005296:	d03f      	beq.n	8005318 <_vfiprintf_r+0x22c>
 8005298:	4b29      	ldr	r3, [pc, #164]	; (8005340 <_vfiprintf_r+0x254>)
 800529a:	bb1b      	cbnz	r3, 80052e4 <_vfiprintf_r+0x1f8>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	3307      	adds	r3, #7
 80052a0:	f023 0307 	bic.w	r3, r3, #7
 80052a4:	3308      	adds	r3, #8
 80052a6:	9303      	str	r3, [sp, #12]
 80052a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052aa:	443b      	add	r3, r7
 80052ac:	9309      	str	r3, [sp, #36]	; 0x24
 80052ae:	e767      	b.n	8005180 <_vfiprintf_r+0x94>
 80052b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052b4:	460c      	mov	r4, r1
 80052b6:	2001      	movs	r0, #1
 80052b8:	e7a5      	b.n	8005206 <_vfiprintf_r+0x11a>
 80052ba:	2300      	movs	r3, #0
 80052bc:	3401      	adds	r4, #1
 80052be:	9305      	str	r3, [sp, #20]
 80052c0:	4619      	mov	r1, r3
 80052c2:	f04f 0c0a 	mov.w	ip, #10
 80052c6:	4620      	mov	r0, r4
 80052c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052cc:	3a30      	subs	r2, #48	; 0x30
 80052ce:	2a09      	cmp	r2, #9
 80052d0:	d903      	bls.n	80052da <_vfiprintf_r+0x1ee>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0c5      	beq.n	8005262 <_vfiprintf_r+0x176>
 80052d6:	9105      	str	r1, [sp, #20]
 80052d8:	e7c3      	b.n	8005262 <_vfiprintf_r+0x176>
 80052da:	fb0c 2101 	mla	r1, ip, r1, r2
 80052de:	4604      	mov	r4, r0
 80052e0:	2301      	movs	r3, #1
 80052e2:	e7f0      	b.n	80052c6 <_vfiprintf_r+0x1da>
 80052e4:	ab03      	add	r3, sp, #12
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	462a      	mov	r2, r5
 80052ea:	4b16      	ldr	r3, [pc, #88]	; (8005344 <_vfiprintf_r+0x258>)
 80052ec:	a904      	add	r1, sp, #16
 80052ee:	4630      	mov	r0, r6
 80052f0:	f3af 8000 	nop.w
 80052f4:	4607      	mov	r7, r0
 80052f6:	1c78      	adds	r0, r7, #1
 80052f8:	d1d6      	bne.n	80052a8 <_vfiprintf_r+0x1bc>
 80052fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052fc:	07d9      	lsls	r1, r3, #31
 80052fe:	d405      	bmi.n	800530c <_vfiprintf_r+0x220>
 8005300:	89ab      	ldrh	r3, [r5, #12]
 8005302:	059a      	lsls	r2, r3, #22
 8005304:	d402      	bmi.n	800530c <_vfiprintf_r+0x220>
 8005306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005308:	f000 fc6d 	bl	8005be6 <__retarget_lock_release_recursive>
 800530c:	89ab      	ldrh	r3, [r5, #12]
 800530e:	065b      	lsls	r3, r3, #25
 8005310:	f53f af12 	bmi.w	8005138 <_vfiprintf_r+0x4c>
 8005314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005316:	e711      	b.n	800513c <_vfiprintf_r+0x50>
 8005318:	ab03      	add	r3, sp, #12
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	462a      	mov	r2, r5
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <_vfiprintf_r+0x258>)
 8005320:	a904      	add	r1, sp, #16
 8005322:	4630      	mov	r0, r6
 8005324:	f000 f880 	bl	8005428 <_printf_i>
 8005328:	e7e4      	b.n	80052f4 <_vfiprintf_r+0x208>
 800532a:	bf00      	nop
 800532c:	080061ac 	.word	0x080061ac
 8005330:	080061cc 	.word	0x080061cc
 8005334:	0800618c 	.word	0x0800618c
 8005338:	08006158 	.word	0x08006158
 800533c:	08006162 	.word	0x08006162
 8005340:	00000000 	.word	0x00000000
 8005344:	080050c7 	.word	0x080050c7
 8005348:	0800615e 	.word	0x0800615e

0800534c <_printf_common>:
 800534c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005350:	4616      	mov	r6, r2
 8005352:	4699      	mov	r9, r3
 8005354:	688a      	ldr	r2, [r1, #8]
 8005356:	690b      	ldr	r3, [r1, #16]
 8005358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800535c:	4293      	cmp	r3, r2
 800535e:	bfb8      	it	lt
 8005360:	4613      	movlt	r3, r2
 8005362:	6033      	str	r3, [r6, #0]
 8005364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005368:	4607      	mov	r7, r0
 800536a:	460c      	mov	r4, r1
 800536c:	b10a      	cbz	r2, 8005372 <_printf_common+0x26>
 800536e:	3301      	adds	r3, #1
 8005370:	6033      	str	r3, [r6, #0]
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	0699      	lsls	r1, r3, #26
 8005376:	bf42      	ittt	mi
 8005378:	6833      	ldrmi	r3, [r6, #0]
 800537a:	3302      	addmi	r3, #2
 800537c:	6033      	strmi	r3, [r6, #0]
 800537e:	6825      	ldr	r5, [r4, #0]
 8005380:	f015 0506 	ands.w	r5, r5, #6
 8005384:	d106      	bne.n	8005394 <_printf_common+0x48>
 8005386:	f104 0a19 	add.w	sl, r4, #25
 800538a:	68e3      	ldr	r3, [r4, #12]
 800538c:	6832      	ldr	r2, [r6, #0]
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	42ab      	cmp	r3, r5
 8005392:	dc26      	bgt.n	80053e2 <_printf_common+0x96>
 8005394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005398:	1e13      	subs	r3, r2, #0
 800539a:	6822      	ldr	r2, [r4, #0]
 800539c:	bf18      	it	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	0692      	lsls	r2, r2, #26
 80053a2:	d42b      	bmi.n	80053fc <_printf_common+0xb0>
 80053a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053a8:	4649      	mov	r1, r9
 80053aa:	4638      	mov	r0, r7
 80053ac:	47c0      	blx	r8
 80053ae:	3001      	adds	r0, #1
 80053b0:	d01e      	beq.n	80053f0 <_printf_common+0xa4>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	68e5      	ldr	r5, [r4, #12]
 80053b6:	6832      	ldr	r2, [r6, #0]
 80053b8:	f003 0306 	and.w	r3, r3, #6
 80053bc:	2b04      	cmp	r3, #4
 80053be:	bf08      	it	eq
 80053c0:	1aad      	subeq	r5, r5, r2
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	6922      	ldr	r2, [r4, #16]
 80053c6:	bf0c      	ite	eq
 80053c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053cc:	2500      	movne	r5, #0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	bfc4      	itt	gt
 80053d2:	1a9b      	subgt	r3, r3, r2
 80053d4:	18ed      	addgt	r5, r5, r3
 80053d6:	2600      	movs	r6, #0
 80053d8:	341a      	adds	r4, #26
 80053da:	42b5      	cmp	r5, r6
 80053dc:	d11a      	bne.n	8005414 <_printf_common+0xc8>
 80053de:	2000      	movs	r0, #0
 80053e0:	e008      	b.n	80053f4 <_printf_common+0xa8>
 80053e2:	2301      	movs	r3, #1
 80053e4:	4652      	mov	r2, sl
 80053e6:	4649      	mov	r1, r9
 80053e8:	4638      	mov	r0, r7
 80053ea:	47c0      	blx	r8
 80053ec:	3001      	adds	r0, #1
 80053ee:	d103      	bne.n	80053f8 <_printf_common+0xac>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f8:	3501      	adds	r5, #1
 80053fa:	e7c6      	b.n	800538a <_printf_common+0x3e>
 80053fc:	18e1      	adds	r1, r4, r3
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	2030      	movs	r0, #48	; 0x30
 8005402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005406:	4422      	add	r2, r4
 8005408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800540c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005410:	3302      	adds	r3, #2
 8005412:	e7c7      	b.n	80053a4 <_printf_common+0x58>
 8005414:	2301      	movs	r3, #1
 8005416:	4622      	mov	r2, r4
 8005418:	4649      	mov	r1, r9
 800541a:	4638      	mov	r0, r7
 800541c:	47c0      	blx	r8
 800541e:	3001      	adds	r0, #1
 8005420:	d0e6      	beq.n	80053f0 <_printf_common+0xa4>
 8005422:	3601      	adds	r6, #1
 8005424:	e7d9      	b.n	80053da <_printf_common+0x8e>
	...

08005428 <_printf_i>:
 8005428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	7e0f      	ldrb	r7, [r1, #24]
 800542e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005430:	2f78      	cmp	r7, #120	; 0x78
 8005432:	4691      	mov	r9, r2
 8005434:	4680      	mov	r8, r0
 8005436:	460c      	mov	r4, r1
 8005438:	469a      	mov	sl, r3
 800543a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800543e:	d807      	bhi.n	8005450 <_printf_i+0x28>
 8005440:	2f62      	cmp	r7, #98	; 0x62
 8005442:	d80a      	bhi.n	800545a <_printf_i+0x32>
 8005444:	2f00      	cmp	r7, #0
 8005446:	f000 80d8 	beq.w	80055fa <_printf_i+0x1d2>
 800544a:	2f58      	cmp	r7, #88	; 0x58
 800544c:	f000 80a3 	beq.w	8005596 <_printf_i+0x16e>
 8005450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005458:	e03a      	b.n	80054d0 <_printf_i+0xa8>
 800545a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800545e:	2b15      	cmp	r3, #21
 8005460:	d8f6      	bhi.n	8005450 <_printf_i+0x28>
 8005462:	a101      	add	r1, pc, #4	; (adr r1, 8005468 <_printf_i+0x40>)
 8005464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005468:	080054c1 	.word	0x080054c1
 800546c:	080054d5 	.word	0x080054d5
 8005470:	08005451 	.word	0x08005451
 8005474:	08005451 	.word	0x08005451
 8005478:	08005451 	.word	0x08005451
 800547c:	08005451 	.word	0x08005451
 8005480:	080054d5 	.word	0x080054d5
 8005484:	08005451 	.word	0x08005451
 8005488:	08005451 	.word	0x08005451
 800548c:	08005451 	.word	0x08005451
 8005490:	08005451 	.word	0x08005451
 8005494:	080055e1 	.word	0x080055e1
 8005498:	08005505 	.word	0x08005505
 800549c:	080055c3 	.word	0x080055c3
 80054a0:	08005451 	.word	0x08005451
 80054a4:	08005451 	.word	0x08005451
 80054a8:	08005603 	.word	0x08005603
 80054ac:	08005451 	.word	0x08005451
 80054b0:	08005505 	.word	0x08005505
 80054b4:	08005451 	.word	0x08005451
 80054b8:	08005451 	.word	0x08005451
 80054bc:	080055cb 	.word	0x080055cb
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	1d1a      	adds	r2, r3, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	602a      	str	r2, [r5, #0]
 80054c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0a3      	b.n	800561c <_printf_i+0x1f4>
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	6829      	ldr	r1, [r5, #0]
 80054d8:	0606      	lsls	r6, r0, #24
 80054da:	f101 0304 	add.w	r3, r1, #4
 80054de:	d50a      	bpl.n	80054f6 <_printf_i+0xce>
 80054e0:	680e      	ldr	r6, [r1, #0]
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	2e00      	cmp	r6, #0
 80054e6:	da03      	bge.n	80054f0 <_printf_i+0xc8>
 80054e8:	232d      	movs	r3, #45	; 0x2d
 80054ea:	4276      	negs	r6, r6
 80054ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f0:	485e      	ldr	r0, [pc, #376]	; (800566c <_printf_i+0x244>)
 80054f2:	230a      	movs	r3, #10
 80054f4:	e019      	b.n	800552a <_printf_i+0x102>
 80054f6:	680e      	ldr	r6, [r1, #0]
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054fe:	bf18      	it	ne
 8005500:	b236      	sxthne	r6, r6
 8005502:	e7ef      	b.n	80054e4 <_printf_i+0xbc>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	6820      	ldr	r0, [r4, #0]
 8005508:	1d19      	adds	r1, r3, #4
 800550a:	6029      	str	r1, [r5, #0]
 800550c:	0601      	lsls	r1, r0, #24
 800550e:	d501      	bpl.n	8005514 <_printf_i+0xec>
 8005510:	681e      	ldr	r6, [r3, #0]
 8005512:	e002      	b.n	800551a <_printf_i+0xf2>
 8005514:	0646      	lsls	r6, r0, #25
 8005516:	d5fb      	bpl.n	8005510 <_printf_i+0xe8>
 8005518:	881e      	ldrh	r6, [r3, #0]
 800551a:	4854      	ldr	r0, [pc, #336]	; (800566c <_printf_i+0x244>)
 800551c:	2f6f      	cmp	r7, #111	; 0x6f
 800551e:	bf0c      	ite	eq
 8005520:	2308      	moveq	r3, #8
 8005522:	230a      	movne	r3, #10
 8005524:	2100      	movs	r1, #0
 8005526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800552a:	6865      	ldr	r5, [r4, #4]
 800552c:	60a5      	str	r5, [r4, #8]
 800552e:	2d00      	cmp	r5, #0
 8005530:	bfa2      	ittt	ge
 8005532:	6821      	ldrge	r1, [r4, #0]
 8005534:	f021 0104 	bicge.w	r1, r1, #4
 8005538:	6021      	strge	r1, [r4, #0]
 800553a:	b90e      	cbnz	r6, 8005540 <_printf_i+0x118>
 800553c:	2d00      	cmp	r5, #0
 800553e:	d04d      	beq.n	80055dc <_printf_i+0x1b4>
 8005540:	4615      	mov	r5, r2
 8005542:	fbb6 f1f3 	udiv	r1, r6, r3
 8005546:	fb03 6711 	mls	r7, r3, r1, r6
 800554a:	5dc7      	ldrb	r7, [r0, r7]
 800554c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005550:	4637      	mov	r7, r6
 8005552:	42bb      	cmp	r3, r7
 8005554:	460e      	mov	r6, r1
 8005556:	d9f4      	bls.n	8005542 <_printf_i+0x11a>
 8005558:	2b08      	cmp	r3, #8
 800555a:	d10b      	bne.n	8005574 <_printf_i+0x14c>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	07de      	lsls	r6, r3, #31
 8005560:	d508      	bpl.n	8005574 <_printf_i+0x14c>
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	6861      	ldr	r1, [r4, #4]
 8005566:	4299      	cmp	r1, r3
 8005568:	bfde      	ittt	le
 800556a:	2330      	movle	r3, #48	; 0x30
 800556c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005574:	1b52      	subs	r2, r2, r5
 8005576:	6122      	str	r2, [r4, #16]
 8005578:	f8cd a000 	str.w	sl, [sp]
 800557c:	464b      	mov	r3, r9
 800557e:	aa03      	add	r2, sp, #12
 8005580:	4621      	mov	r1, r4
 8005582:	4640      	mov	r0, r8
 8005584:	f7ff fee2 	bl	800534c <_printf_common>
 8005588:	3001      	adds	r0, #1
 800558a:	d14c      	bne.n	8005626 <_printf_i+0x1fe>
 800558c:	f04f 30ff 	mov.w	r0, #4294967295
 8005590:	b004      	add	sp, #16
 8005592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005596:	4835      	ldr	r0, [pc, #212]	; (800566c <_printf_i+0x244>)
 8005598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800559c:	6829      	ldr	r1, [r5, #0]
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80055a4:	6029      	str	r1, [r5, #0]
 80055a6:	061d      	lsls	r5, r3, #24
 80055a8:	d514      	bpl.n	80055d4 <_printf_i+0x1ac>
 80055aa:	07df      	lsls	r7, r3, #31
 80055ac:	bf44      	itt	mi
 80055ae:	f043 0320 	orrmi.w	r3, r3, #32
 80055b2:	6023      	strmi	r3, [r4, #0]
 80055b4:	b91e      	cbnz	r6, 80055be <_printf_i+0x196>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	f023 0320 	bic.w	r3, r3, #32
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	2310      	movs	r3, #16
 80055c0:	e7b0      	b.n	8005524 <_printf_i+0xfc>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	f043 0320 	orr.w	r3, r3, #32
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	2378      	movs	r3, #120	; 0x78
 80055cc:	4828      	ldr	r0, [pc, #160]	; (8005670 <_printf_i+0x248>)
 80055ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055d2:	e7e3      	b.n	800559c <_printf_i+0x174>
 80055d4:	0659      	lsls	r1, r3, #25
 80055d6:	bf48      	it	mi
 80055d8:	b2b6      	uxthmi	r6, r6
 80055da:	e7e6      	b.n	80055aa <_printf_i+0x182>
 80055dc:	4615      	mov	r5, r2
 80055de:	e7bb      	b.n	8005558 <_printf_i+0x130>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	6826      	ldr	r6, [r4, #0]
 80055e4:	6961      	ldr	r1, [r4, #20]
 80055e6:	1d18      	adds	r0, r3, #4
 80055e8:	6028      	str	r0, [r5, #0]
 80055ea:	0635      	lsls	r5, r6, #24
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	d501      	bpl.n	80055f4 <_printf_i+0x1cc>
 80055f0:	6019      	str	r1, [r3, #0]
 80055f2:	e002      	b.n	80055fa <_printf_i+0x1d2>
 80055f4:	0670      	lsls	r0, r6, #25
 80055f6:	d5fb      	bpl.n	80055f0 <_printf_i+0x1c8>
 80055f8:	8019      	strh	r1, [r3, #0]
 80055fa:	2300      	movs	r3, #0
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	4615      	mov	r5, r2
 8005600:	e7ba      	b.n	8005578 <_printf_i+0x150>
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	1d1a      	adds	r2, r3, #4
 8005606:	602a      	str	r2, [r5, #0]
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	6862      	ldr	r2, [r4, #4]
 800560c:	2100      	movs	r1, #0
 800560e:	4628      	mov	r0, r5
 8005610:	f7fa fe76 	bl	8000300 <memchr>
 8005614:	b108      	cbz	r0, 800561a <_printf_i+0x1f2>
 8005616:	1b40      	subs	r0, r0, r5
 8005618:	6060      	str	r0, [r4, #4]
 800561a:	6863      	ldr	r3, [r4, #4]
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	2300      	movs	r3, #0
 8005620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005624:	e7a8      	b.n	8005578 <_printf_i+0x150>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	462a      	mov	r2, r5
 800562a:	4649      	mov	r1, r9
 800562c:	4640      	mov	r0, r8
 800562e:	47d0      	blx	sl
 8005630:	3001      	adds	r0, #1
 8005632:	d0ab      	beq.n	800558c <_printf_i+0x164>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	079b      	lsls	r3, r3, #30
 8005638:	d413      	bmi.n	8005662 <_printf_i+0x23a>
 800563a:	68e0      	ldr	r0, [r4, #12]
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	4298      	cmp	r0, r3
 8005640:	bfb8      	it	lt
 8005642:	4618      	movlt	r0, r3
 8005644:	e7a4      	b.n	8005590 <_printf_i+0x168>
 8005646:	2301      	movs	r3, #1
 8005648:	4632      	mov	r2, r6
 800564a:	4649      	mov	r1, r9
 800564c:	4640      	mov	r0, r8
 800564e:	47d0      	blx	sl
 8005650:	3001      	adds	r0, #1
 8005652:	d09b      	beq.n	800558c <_printf_i+0x164>
 8005654:	3501      	adds	r5, #1
 8005656:	68e3      	ldr	r3, [r4, #12]
 8005658:	9903      	ldr	r1, [sp, #12]
 800565a:	1a5b      	subs	r3, r3, r1
 800565c:	42ab      	cmp	r3, r5
 800565e:	dcf2      	bgt.n	8005646 <_printf_i+0x21e>
 8005660:	e7eb      	b.n	800563a <_printf_i+0x212>
 8005662:	2500      	movs	r5, #0
 8005664:	f104 0619 	add.w	r6, r4, #25
 8005668:	e7f5      	b.n	8005656 <_printf_i+0x22e>
 800566a:	bf00      	nop
 800566c:	08006169 	.word	0x08006169
 8005670:	0800617a 	.word	0x0800617a

08005674 <_sbrk_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_sbrk_r+0x1c>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	f7fb fa3e 	bl	8000b00 <_sbrk>
 8005684:	1c43      	adds	r3, r0, #1
 8005686:	d102      	bne.n	800568e <_sbrk_r+0x1a>
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	b103      	cbz	r3, 800568e <_sbrk_r+0x1a>
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	bd38      	pop	{r3, r4, r5, pc}
 8005690:	24000268 	.word	0x24000268

08005694 <strncmp>:
 8005694:	b510      	push	{r4, lr}
 8005696:	b17a      	cbz	r2, 80056b8 <strncmp+0x24>
 8005698:	4603      	mov	r3, r0
 800569a:	3901      	subs	r1, #1
 800569c:	1884      	adds	r4, r0, r2
 800569e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80056a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80056a6:	4290      	cmp	r0, r2
 80056a8:	d101      	bne.n	80056ae <strncmp+0x1a>
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	d101      	bne.n	80056b2 <strncmp+0x1e>
 80056ae:	1a80      	subs	r0, r0, r2
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d1f3      	bne.n	800569e <strncmp+0xa>
 80056b6:	e7fa      	b.n	80056ae <strncmp+0x1a>
 80056b8:	4610      	mov	r0, r2
 80056ba:	e7f9      	b.n	80056b0 <strncmp+0x1c>

080056bc <strncpy>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	3901      	subs	r1, #1
 80056c0:	4603      	mov	r3, r0
 80056c2:	b132      	cbz	r2, 80056d2 <strncpy+0x16>
 80056c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80056c8:	f803 4b01 	strb.w	r4, [r3], #1
 80056cc:	3a01      	subs	r2, #1
 80056ce:	2c00      	cmp	r4, #0
 80056d0:	d1f7      	bne.n	80056c2 <strncpy+0x6>
 80056d2:	441a      	add	r2, r3
 80056d4:	2100      	movs	r1, #0
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d100      	bne.n	80056dc <strncpy+0x20>
 80056da:	bd10      	pop	{r4, pc}
 80056dc:	f803 1b01 	strb.w	r1, [r3], #1
 80056e0:	e7f9      	b.n	80056d6 <strncpy+0x1a>
	...

080056e4 <__swbuf_r>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	460e      	mov	r6, r1
 80056e8:	4614      	mov	r4, r2
 80056ea:	4605      	mov	r5, r0
 80056ec:	b118      	cbz	r0, 80056f6 <__swbuf_r+0x12>
 80056ee:	6983      	ldr	r3, [r0, #24]
 80056f0:	b90b      	cbnz	r3, 80056f6 <__swbuf_r+0x12>
 80056f2:	f000 f9d9 	bl	8005aa8 <__sinit>
 80056f6:	4b21      	ldr	r3, [pc, #132]	; (800577c <__swbuf_r+0x98>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d12b      	bne.n	8005754 <__swbuf_r+0x70>
 80056fc:	686c      	ldr	r4, [r5, #4]
 80056fe:	69a3      	ldr	r3, [r4, #24]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	071a      	lsls	r2, r3, #28
 8005706:	d52f      	bpl.n	8005768 <__swbuf_r+0x84>
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	b36b      	cbz	r3, 8005768 <__swbuf_r+0x84>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1ac0      	subs	r0, r0, r3
 8005712:	6963      	ldr	r3, [r4, #20]
 8005714:	b2f6      	uxtb	r6, r6
 8005716:	4283      	cmp	r3, r0
 8005718:	4637      	mov	r7, r6
 800571a:	dc04      	bgt.n	8005726 <__swbuf_r+0x42>
 800571c:	4621      	mov	r1, r4
 800571e:	4628      	mov	r0, r5
 8005720:	f000 f92e 	bl	8005980 <_fflush_r>
 8005724:	bb30      	cbnz	r0, 8005774 <__swbuf_r+0x90>
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	3b01      	subs	r3, #1
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	6022      	str	r2, [r4, #0]
 8005732:	701e      	strb	r6, [r3, #0]
 8005734:	6963      	ldr	r3, [r4, #20]
 8005736:	3001      	adds	r0, #1
 8005738:	4283      	cmp	r3, r0
 800573a:	d004      	beq.n	8005746 <__swbuf_r+0x62>
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	07db      	lsls	r3, r3, #31
 8005740:	d506      	bpl.n	8005750 <__swbuf_r+0x6c>
 8005742:	2e0a      	cmp	r6, #10
 8005744:	d104      	bne.n	8005750 <__swbuf_r+0x6c>
 8005746:	4621      	mov	r1, r4
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f919 	bl	8005980 <_fflush_r>
 800574e:	b988      	cbnz	r0, 8005774 <__swbuf_r+0x90>
 8005750:	4638      	mov	r0, r7
 8005752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <__swbuf_r+0x9c>)
 8005756:	429c      	cmp	r4, r3
 8005758:	d101      	bne.n	800575e <__swbuf_r+0x7a>
 800575a:	68ac      	ldr	r4, [r5, #8]
 800575c:	e7cf      	b.n	80056fe <__swbuf_r+0x1a>
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <__swbuf_r+0xa0>)
 8005760:	429c      	cmp	r4, r3
 8005762:	bf08      	it	eq
 8005764:	68ec      	ldreq	r4, [r5, #12]
 8005766:	e7ca      	b.n	80056fe <__swbuf_r+0x1a>
 8005768:	4621      	mov	r1, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f000 f80c 	bl	8005788 <__swsetup_r>
 8005770:	2800      	cmp	r0, #0
 8005772:	d0cb      	beq.n	800570c <__swbuf_r+0x28>
 8005774:	f04f 37ff 	mov.w	r7, #4294967295
 8005778:	e7ea      	b.n	8005750 <__swbuf_r+0x6c>
 800577a:	bf00      	nop
 800577c:	080061ac 	.word	0x080061ac
 8005780:	080061cc 	.word	0x080061cc
 8005784:	0800618c 	.word	0x0800618c

08005788 <__swsetup_r>:
 8005788:	4b32      	ldr	r3, [pc, #200]	; (8005854 <__swsetup_r+0xcc>)
 800578a:	b570      	push	{r4, r5, r6, lr}
 800578c:	681d      	ldr	r5, [r3, #0]
 800578e:	4606      	mov	r6, r0
 8005790:	460c      	mov	r4, r1
 8005792:	b125      	cbz	r5, 800579e <__swsetup_r+0x16>
 8005794:	69ab      	ldr	r3, [r5, #24]
 8005796:	b913      	cbnz	r3, 800579e <__swsetup_r+0x16>
 8005798:	4628      	mov	r0, r5
 800579a:	f000 f985 	bl	8005aa8 <__sinit>
 800579e:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <__swsetup_r+0xd0>)
 80057a0:	429c      	cmp	r4, r3
 80057a2:	d10f      	bne.n	80057c4 <__swsetup_r+0x3c>
 80057a4:	686c      	ldr	r4, [r5, #4]
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ac:	0719      	lsls	r1, r3, #28
 80057ae:	d42c      	bmi.n	800580a <__swsetup_r+0x82>
 80057b0:	06dd      	lsls	r5, r3, #27
 80057b2:	d411      	bmi.n	80057d8 <__swsetup_r+0x50>
 80057b4:	2309      	movs	r3, #9
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	f04f 30ff 	mov.w	r0, #4294967295
 80057c2:	e03e      	b.n	8005842 <__swsetup_r+0xba>
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <__swsetup_r+0xd4>)
 80057c6:	429c      	cmp	r4, r3
 80057c8:	d101      	bne.n	80057ce <__swsetup_r+0x46>
 80057ca:	68ac      	ldr	r4, [r5, #8]
 80057cc:	e7eb      	b.n	80057a6 <__swsetup_r+0x1e>
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <__swsetup_r+0xd8>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	bf08      	it	eq
 80057d4:	68ec      	ldreq	r4, [r5, #12]
 80057d6:	e7e6      	b.n	80057a6 <__swsetup_r+0x1e>
 80057d8:	0758      	lsls	r0, r3, #29
 80057da:	d512      	bpl.n	8005802 <__swsetup_r+0x7a>
 80057dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057de:	b141      	cbz	r1, 80057f2 <__swsetup_r+0x6a>
 80057e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057e4:	4299      	cmp	r1, r3
 80057e6:	d002      	beq.n	80057ee <__swsetup_r+0x66>
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff fb75 	bl	8004ed8 <_free_r>
 80057ee:	2300      	movs	r3, #0
 80057f0:	6363      	str	r3, [r4, #52]	; 0x34
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	2300      	movs	r3, #0
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f043 0308 	orr.w	r3, r3, #8
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	b94b      	cbnz	r3, 8005822 <__swsetup_r+0x9a>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d003      	beq.n	8005822 <__swsetup_r+0x9a>
 800581a:	4621      	mov	r1, r4
 800581c:	4630      	mov	r0, r6
 800581e:	f000 fa09 	bl	8005c34 <__smakebuf_r>
 8005822:	89a0      	ldrh	r0, [r4, #12]
 8005824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005828:	f010 0301 	ands.w	r3, r0, #1
 800582c:	d00a      	beq.n	8005844 <__swsetup_r+0xbc>
 800582e:	2300      	movs	r3, #0
 8005830:	60a3      	str	r3, [r4, #8]
 8005832:	6963      	ldr	r3, [r4, #20]
 8005834:	425b      	negs	r3, r3
 8005836:	61a3      	str	r3, [r4, #24]
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	b943      	cbnz	r3, 800584e <__swsetup_r+0xc6>
 800583c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005840:	d1ba      	bne.n	80057b8 <__swsetup_r+0x30>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	0781      	lsls	r1, r0, #30
 8005846:	bf58      	it	pl
 8005848:	6963      	ldrpl	r3, [r4, #20]
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	e7f4      	b.n	8005838 <__swsetup_r+0xb0>
 800584e:	2000      	movs	r0, #0
 8005850:	e7f7      	b.n	8005842 <__swsetup_r+0xba>
 8005852:	bf00      	nop
 8005854:	240000d4 	.word	0x240000d4
 8005858:	080061ac 	.word	0x080061ac
 800585c:	080061cc 	.word	0x080061cc
 8005860:	0800618c 	.word	0x0800618c

08005864 <abort>:
 8005864:	b508      	push	{r3, lr}
 8005866:	2006      	movs	r0, #6
 8005868:	f000 fa58 	bl	8005d1c <raise>
 800586c:	2001      	movs	r0, #1
 800586e:	f7fb f8cf 	bl	8000a10 <_exit>
	...

08005874 <__sflush_r>:
 8005874:	898a      	ldrh	r2, [r1, #12]
 8005876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	4605      	mov	r5, r0
 800587c:	0710      	lsls	r0, r2, #28
 800587e:	460c      	mov	r4, r1
 8005880:	d458      	bmi.n	8005934 <__sflush_r+0xc0>
 8005882:	684b      	ldr	r3, [r1, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	dc05      	bgt.n	8005894 <__sflush_r+0x20>
 8005888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	dc02      	bgt.n	8005894 <__sflush_r+0x20>
 800588e:	2000      	movs	r0, #0
 8005890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005896:	2e00      	cmp	r6, #0
 8005898:	d0f9      	beq.n	800588e <__sflush_r+0x1a>
 800589a:	2300      	movs	r3, #0
 800589c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058a0:	682f      	ldr	r7, [r5, #0]
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	d032      	beq.n	800590c <__sflush_r+0x98>
 80058a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	075a      	lsls	r2, r3, #29
 80058ac:	d505      	bpl.n	80058ba <__sflush_r+0x46>
 80058ae:	6863      	ldr	r3, [r4, #4]
 80058b0:	1ac0      	subs	r0, r0, r3
 80058b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058b4:	b10b      	cbz	r3, 80058ba <__sflush_r+0x46>
 80058b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058b8:	1ac0      	subs	r0, r0, r3
 80058ba:	2300      	movs	r3, #0
 80058bc:	4602      	mov	r2, r0
 80058be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c0:	6a21      	ldr	r1, [r4, #32]
 80058c2:	4628      	mov	r0, r5
 80058c4:	47b0      	blx	r6
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	d106      	bne.n	80058da <__sflush_r+0x66>
 80058cc:	6829      	ldr	r1, [r5, #0]
 80058ce:	291d      	cmp	r1, #29
 80058d0:	d82c      	bhi.n	800592c <__sflush_r+0xb8>
 80058d2:	4a2a      	ldr	r2, [pc, #168]	; (800597c <__sflush_r+0x108>)
 80058d4:	40ca      	lsrs	r2, r1
 80058d6:	07d6      	lsls	r6, r2, #31
 80058d8:	d528      	bpl.n	800592c <__sflush_r+0xb8>
 80058da:	2200      	movs	r2, #0
 80058dc:	6062      	str	r2, [r4, #4]
 80058de:	04d9      	lsls	r1, r3, #19
 80058e0:	6922      	ldr	r2, [r4, #16]
 80058e2:	6022      	str	r2, [r4, #0]
 80058e4:	d504      	bpl.n	80058f0 <__sflush_r+0x7c>
 80058e6:	1c42      	adds	r2, r0, #1
 80058e8:	d101      	bne.n	80058ee <__sflush_r+0x7a>
 80058ea:	682b      	ldr	r3, [r5, #0]
 80058ec:	b903      	cbnz	r3, 80058f0 <__sflush_r+0x7c>
 80058ee:	6560      	str	r0, [r4, #84]	; 0x54
 80058f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058f2:	602f      	str	r7, [r5, #0]
 80058f4:	2900      	cmp	r1, #0
 80058f6:	d0ca      	beq.n	800588e <__sflush_r+0x1a>
 80058f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058fc:	4299      	cmp	r1, r3
 80058fe:	d002      	beq.n	8005906 <__sflush_r+0x92>
 8005900:	4628      	mov	r0, r5
 8005902:	f7ff fae9 	bl	8004ed8 <_free_r>
 8005906:	2000      	movs	r0, #0
 8005908:	6360      	str	r0, [r4, #52]	; 0x34
 800590a:	e7c1      	b.n	8005890 <__sflush_r+0x1c>
 800590c:	6a21      	ldr	r1, [r4, #32]
 800590e:	2301      	movs	r3, #1
 8005910:	4628      	mov	r0, r5
 8005912:	47b0      	blx	r6
 8005914:	1c41      	adds	r1, r0, #1
 8005916:	d1c7      	bne.n	80058a8 <__sflush_r+0x34>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0c4      	beq.n	80058a8 <__sflush_r+0x34>
 800591e:	2b1d      	cmp	r3, #29
 8005920:	d001      	beq.n	8005926 <__sflush_r+0xb2>
 8005922:	2b16      	cmp	r3, #22
 8005924:	d101      	bne.n	800592a <__sflush_r+0xb6>
 8005926:	602f      	str	r7, [r5, #0]
 8005928:	e7b1      	b.n	800588e <__sflush_r+0x1a>
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	e7ad      	b.n	8005890 <__sflush_r+0x1c>
 8005934:	690f      	ldr	r7, [r1, #16]
 8005936:	2f00      	cmp	r7, #0
 8005938:	d0a9      	beq.n	800588e <__sflush_r+0x1a>
 800593a:	0793      	lsls	r3, r2, #30
 800593c:	680e      	ldr	r6, [r1, #0]
 800593e:	bf08      	it	eq
 8005940:	694b      	ldreq	r3, [r1, #20]
 8005942:	600f      	str	r7, [r1, #0]
 8005944:	bf18      	it	ne
 8005946:	2300      	movne	r3, #0
 8005948:	eba6 0807 	sub.w	r8, r6, r7
 800594c:	608b      	str	r3, [r1, #8]
 800594e:	f1b8 0f00 	cmp.w	r8, #0
 8005952:	dd9c      	ble.n	800588e <__sflush_r+0x1a>
 8005954:	6a21      	ldr	r1, [r4, #32]
 8005956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005958:	4643      	mov	r3, r8
 800595a:	463a      	mov	r2, r7
 800595c:	4628      	mov	r0, r5
 800595e:	47b0      	blx	r6
 8005960:	2800      	cmp	r0, #0
 8005962:	dc06      	bgt.n	8005972 <__sflush_r+0xfe>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596a:	81a3      	strh	r3, [r4, #12]
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	e78e      	b.n	8005890 <__sflush_r+0x1c>
 8005972:	4407      	add	r7, r0
 8005974:	eba8 0800 	sub.w	r8, r8, r0
 8005978:	e7e9      	b.n	800594e <__sflush_r+0xda>
 800597a:	bf00      	nop
 800597c:	20400001 	.word	0x20400001

08005980 <_fflush_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	690b      	ldr	r3, [r1, #16]
 8005984:	4605      	mov	r5, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b913      	cbnz	r3, 8005990 <_fflush_r+0x10>
 800598a:	2500      	movs	r5, #0
 800598c:	4628      	mov	r0, r5
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	b118      	cbz	r0, 800599a <_fflush_r+0x1a>
 8005992:	6983      	ldr	r3, [r0, #24]
 8005994:	b90b      	cbnz	r3, 800599a <_fflush_r+0x1a>
 8005996:	f000 f887 	bl	8005aa8 <__sinit>
 800599a:	4b14      	ldr	r3, [pc, #80]	; (80059ec <_fflush_r+0x6c>)
 800599c:	429c      	cmp	r4, r3
 800599e:	d11b      	bne.n	80059d8 <_fflush_r+0x58>
 80059a0:	686c      	ldr	r4, [r5, #4]
 80059a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0ef      	beq.n	800598a <_fflush_r+0xa>
 80059aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059ac:	07d0      	lsls	r0, r2, #31
 80059ae:	d404      	bmi.n	80059ba <_fflush_r+0x3a>
 80059b0:	0599      	lsls	r1, r3, #22
 80059b2:	d402      	bmi.n	80059ba <_fflush_r+0x3a>
 80059b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059b6:	f000 f915 	bl	8005be4 <__retarget_lock_acquire_recursive>
 80059ba:	4628      	mov	r0, r5
 80059bc:	4621      	mov	r1, r4
 80059be:	f7ff ff59 	bl	8005874 <__sflush_r>
 80059c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c4:	07da      	lsls	r2, r3, #31
 80059c6:	4605      	mov	r5, r0
 80059c8:	d4e0      	bmi.n	800598c <_fflush_r+0xc>
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	059b      	lsls	r3, r3, #22
 80059ce:	d4dd      	bmi.n	800598c <_fflush_r+0xc>
 80059d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d2:	f000 f908 	bl	8005be6 <__retarget_lock_release_recursive>
 80059d6:	e7d9      	b.n	800598c <_fflush_r+0xc>
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <_fflush_r+0x70>)
 80059da:	429c      	cmp	r4, r3
 80059dc:	d101      	bne.n	80059e2 <_fflush_r+0x62>
 80059de:	68ac      	ldr	r4, [r5, #8]
 80059e0:	e7df      	b.n	80059a2 <_fflush_r+0x22>
 80059e2:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <_fflush_r+0x74>)
 80059e4:	429c      	cmp	r4, r3
 80059e6:	bf08      	it	eq
 80059e8:	68ec      	ldreq	r4, [r5, #12]
 80059ea:	e7da      	b.n	80059a2 <_fflush_r+0x22>
 80059ec:	080061ac 	.word	0x080061ac
 80059f0:	080061cc 	.word	0x080061cc
 80059f4:	0800618c 	.word	0x0800618c

080059f8 <std>:
 80059f8:	2300      	movs	r3, #0
 80059fa:	b510      	push	{r4, lr}
 80059fc:	4604      	mov	r4, r0
 80059fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a06:	6083      	str	r3, [r0, #8]
 8005a08:	8181      	strh	r1, [r0, #12]
 8005a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a0c:	81c2      	strh	r2, [r0, #14]
 8005a0e:	6183      	str	r3, [r0, #24]
 8005a10:	4619      	mov	r1, r3
 8005a12:	2208      	movs	r2, #8
 8005a14:	305c      	adds	r0, #92	; 0x5c
 8005a16:	f7ff fa57 	bl	8004ec8 <memset>
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <std+0x38>)
 8005a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <std+0x3c>)
 8005a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <std+0x40>)
 8005a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a26:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <std+0x44>)
 8005a28:	6224      	str	r4, [r4, #32]
 8005a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	bf00      	nop
 8005a30:	08005d55 	.word	0x08005d55
 8005a34:	08005d77 	.word	0x08005d77
 8005a38:	08005daf 	.word	0x08005daf
 8005a3c:	08005dd3 	.word	0x08005dd3

08005a40 <_cleanup_r>:
 8005a40:	4901      	ldr	r1, [pc, #4]	; (8005a48 <_cleanup_r+0x8>)
 8005a42:	f000 b8af 	b.w	8005ba4 <_fwalk_reent>
 8005a46:	bf00      	nop
 8005a48:	08005981 	.word	0x08005981

08005a4c <__sfmoreglue>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	2268      	movs	r2, #104	; 0x68
 8005a50:	1e4d      	subs	r5, r1, #1
 8005a52:	4355      	muls	r5, r2
 8005a54:	460e      	mov	r6, r1
 8005a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a5a:	f7ff faa9 	bl	8004fb0 <_malloc_r>
 8005a5e:	4604      	mov	r4, r0
 8005a60:	b140      	cbz	r0, 8005a74 <__sfmoreglue+0x28>
 8005a62:	2100      	movs	r1, #0
 8005a64:	e9c0 1600 	strd	r1, r6, [r0]
 8005a68:	300c      	adds	r0, #12
 8005a6a:	60a0      	str	r0, [r4, #8]
 8005a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a70:	f7ff fa2a 	bl	8004ec8 <memset>
 8005a74:	4620      	mov	r0, r4
 8005a76:	bd70      	pop	{r4, r5, r6, pc}

08005a78 <__sfp_lock_acquire>:
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <__sfp_lock_acquire+0x8>)
 8005a7a:	f000 b8b3 	b.w	8005be4 <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	2400026d 	.word	0x2400026d

08005a84 <__sfp_lock_release>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__sfp_lock_release+0x8>)
 8005a86:	f000 b8ae 	b.w	8005be6 <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	2400026d 	.word	0x2400026d

08005a90 <__sinit_lock_acquire>:
 8005a90:	4801      	ldr	r0, [pc, #4]	; (8005a98 <__sinit_lock_acquire+0x8>)
 8005a92:	f000 b8a7 	b.w	8005be4 <__retarget_lock_acquire_recursive>
 8005a96:	bf00      	nop
 8005a98:	2400026e 	.word	0x2400026e

08005a9c <__sinit_lock_release>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <__sinit_lock_release+0x8>)
 8005a9e:	f000 b8a2 	b.w	8005be6 <__retarget_lock_release_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	2400026e 	.word	0x2400026e

08005aa8 <__sinit>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	4604      	mov	r4, r0
 8005aac:	f7ff fff0 	bl	8005a90 <__sinit_lock_acquire>
 8005ab0:	69a3      	ldr	r3, [r4, #24]
 8005ab2:	b11b      	cbz	r3, 8005abc <__sinit+0x14>
 8005ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab8:	f7ff bff0 	b.w	8005a9c <__sinit_lock_release>
 8005abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <__sinit+0x68>)
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <__sinit+0x6c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005aca:	42a3      	cmp	r3, r4
 8005acc:	bf04      	itt	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	61a3      	streq	r3, [r4, #24]
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 f820 	bl	8005b18 <__sfp>
 8005ad8:	6060      	str	r0, [r4, #4]
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 f81c 	bl	8005b18 <__sfp>
 8005ae0:	60a0      	str	r0, [r4, #8]
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 f818 	bl	8005b18 <__sfp>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	60e0      	str	r0, [r4, #12]
 8005aec:	2104      	movs	r1, #4
 8005aee:	6860      	ldr	r0, [r4, #4]
 8005af0:	f7ff ff82 	bl	80059f8 <std>
 8005af4:	68a0      	ldr	r0, [r4, #8]
 8005af6:	2201      	movs	r2, #1
 8005af8:	2109      	movs	r1, #9
 8005afa:	f7ff ff7d 	bl	80059f8 <std>
 8005afe:	68e0      	ldr	r0, [r4, #12]
 8005b00:	2202      	movs	r2, #2
 8005b02:	2112      	movs	r1, #18
 8005b04:	f7ff ff78 	bl	80059f8 <std>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	61a3      	str	r3, [r4, #24]
 8005b0c:	e7d2      	b.n	8005ab4 <__sinit+0xc>
 8005b0e:	bf00      	nop
 8005b10:	08006154 	.word	0x08006154
 8005b14:	08005a41 	.word	0x08005a41

08005b18 <__sfp>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	4607      	mov	r7, r0
 8005b1c:	f7ff ffac 	bl	8005a78 <__sfp_lock_acquire>
 8005b20:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <__sfp+0x84>)
 8005b22:	681e      	ldr	r6, [r3, #0]
 8005b24:	69b3      	ldr	r3, [r6, #24]
 8005b26:	b913      	cbnz	r3, 8005b2e <__sfp+0x16>
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f7ff ffbd 	bl	8005aa8 <__sinit>
 8005b2e:	3648      	adds	r6, #72	; 0x48
 8005b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	d503      	bpl.n	8005b40 <__sfp+0x28>
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	b30b      	cbz	r3, 8005b80 <__sfp+0x68>
 8005b3c:	6836      	ldr	r6, [r6, #0]
 8005b3e:	e7f7      	b.n	8005b30 <__sfp+0x18>
 8005b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b44:	b9d5      	cbnz	r5, 8005b7c <__sfp+0x64>
 8005b46:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <__sfp+0x88>)
 8005b48:	60e3      	str	r3, [r4, #12]
 8005b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b50:	f000 f847 	bl	8005be2 <__retarget_lock_init_recursive>
 8005b54:	f7ff ff96 	bl	8005a84 <__sfp_lock_release>
 8005b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b60:	6025      	str	r5, [r4, #0]
 8005b62:	61a5      	str	r5, [r4, #24]
 8005b64:	2208      	movs	r2, #8
 8005b66:	4629      	mov	r1, r5
 8005b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b6c:	f7ff f9ac 	bl	8004ec8 <memset>
 8005b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b78:	4620      	mov	r0, r4
 8005b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b7c:	3468      	adds	r4, #104	; 0x68
 8005b7e:	e7d9      	b.n	8005b34 <__sfp+0x1c>
 8005b80:	2104      	movs	r1, #4
 8005b82:	4638      	mov	r0, r7
 8005b84:	f7ff ff62 	bl	8005a4c <__sfmoreglue>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	6030      	str	r0, [r6, #0]
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d1d5      	bne.n	8005b3c <__sfp+0x24>
 8005b90:	f7ff ff78 	bl	8005a84 <__sfp_lock_release>
 8005b94:	230c      	movs	r3, #12
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	e7ee      	b.n	8005b78 <__sfp+0x60>
 8005b9a:	bf00      	nop
 8005b9c:	08006154 	.word	0x08006154
 8005ba0:	ffff0001 	.word	0xffff0001

08005ba4 <_fwalk_reent>:
 8005ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba8:	4606      	mov	r6, r0
 8005baa:	4688      	mov	r8, r1
 8005bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bb0:	2700      	movs	r7, #0
 8005bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8005bba:	d505      	bpl.n	8005bc8 <_fwalk_reent+0x24>
 8005bbc:	6824      	ldr	r4, [r4, #0]
 8005bbe:	2c00      	cmp	r4, #0
 8005bc0:	d1f7      	bne.n	8005bb2 <_fwalk_reent+0xe>
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc8:	89ab      	ldrh	r3, [r5, #12]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d907      	bls.n	8005bde <_fwalk_reent+0x3a>
 8005bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	d003      	beq.n	8005bde <_fwalk_reent+0x3a>
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4630      	mov	r0, r6
 8005bda:	47c0      	blx	r8
 8005bdc:	4307      	orrs	r7, r0
 8005bde:	3568      	adds	r5, #104	; 0x68
 8005be0:	e7e9      	b.n	8005bb6 <_fwalk_reent+0x12>

08005be2 <__retarget_lock_init_recursive>:
 8005be2:	4770      	bx	lr

08005be4 <__retarget_lock_acquire_recursive>:
 8005be4:	4770      	bx	lr

08005be6 <__retarget_lock_release_recursive>:
 8005be6:	4770      	bx	lr

08005be8 <__swhatbuf_r>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	460e      	mov	r6, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	b096      	sub	sp, #88	; 0x58
 8005bf4:	4614      	mov	r4, r2
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	da08      	bge.n	8005c0c <__swhatbuf_r+0x24>
 8005bfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	602a      	str	r2, [r5, #0]
 8005c02:	061a      	lsls	r2, r3, #24
 8005c04:	d410      	bmi.n	8005c28 <__swhatbuf_r+0x40>
 8005c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c0a:	e00e      	b.n	8005c2a <__swhatbuf_r+0x42>
 8005c0c:	466a      	mov	r2, sp
 8005c0e:	f000 f907 	bl	8005e20 <_fstat_r>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dbf1      	blt.n	8005bfa <__swhatbuf_r+0x12>
 8005c16:	9a01      	ldr	r2, [sp, #4]
 8005c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c20:	425a      	negs	r2, r3
 8005c22:	415a      	adcs	r2, r3
 8005c24:	602a      	str	r2, [r5, #0]
 8005c26:	e7ee      	b.n	8005c06 <__swhatbuf_r+0x1e>
 8005c28:	2340      	movs	r3, #64	; 0x40
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	b016      	add	sp, #88	; 0x58
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c34 <__smakebuf_r>:
 8005c34:	898b      	ldrh	r3, [r1, #12]
 8005c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c38:	079d      	lsls	r5, r3, #30
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	d507      	bpl.n	8005c50 <__smakebuf_r+0x1c>
 8005c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	6123      	str	r3, [r4, #16]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	6163      	str	r3, [r4, #20]
 8005c4c:	b002      	add	sp, #8
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	ab01      	add	r3, sp, #4
 8005c52:	466a      	mov	r2, sp
 8005c54:	f7ff ffc8 	bl	8005be8 <__swhatbuf_r>
 8005c58:	9900      	ldr	r1, [sp, #0]
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7ff f9a7 	bl	8004fb0 <_malloc_r>
 8005c62:	b948      	cbnz	r0, 8005c78 <__smakebuf_r+0x44>
 8005c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c68:	059a      	lsls	r2, r3, #22
 8005c6a:	d4ef      	bmi.n	8005c4c <__smakebuf_r+0x18>
 8005c6c:	f023 0303 	bic.w	r3, r3, #3
 8005c70:	f043 0302 	orr.w	r3, r3, #2
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	e7e3      	b.n	8005c40 <__smakebuf_r+0xc>
 8005c78:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <__smakebuf_r+0x7c>)
 8005c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	6020      	str	r0, [r4, #0]
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	9b00      	ldr	r3, [sp, #0]
 8005c88:	6163      	str	r3, [r4, #20]
 8005c8a:	9b01      	ldr	r3, [sp, #4]
 8005c8c:	6120      	str	r0, [r4, #16]
 8005c8e:	b15b      	cbz	r3, 8005ca8 <__smakebuf_r+0x74>
 8005c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c94:	4630      	mov	r0, r6
 8005c96:	f000 f8d5 	bl	8005e44 <_isatty_r>
 8005c9a:	b128      	cbz	r0, 8005ca8 <__smakebuf_r+0x74>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f023 0303 	bic.w	r3, r3, #3
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	89a0      	ldrh	r0, [r4, #12]
 8005caa:	4305      	orrs	r5, r0
 8005cac:	81a5      	strh	r5, [r4, #12]
 8005cae:	e7cd      	b.n	8005c4c <__smakebuf_r+0x18>
 8005cb0:	08005a41 	.word	0x08005a41

08005cb4 <__malloc_lock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__malloc_lock+0x8>)
 8005cb6:	f7ff bf95 	b.w	8005be4 <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	2400026c 	.word	0x2400026c

08005cc0 <__malloc_unlock>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	; (8005cc8 <__malloc_unlock+0x8>)
 8005cc2:	f7ff bf90 	b.w	8005be6 <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	2400026c 	.word	0x2400026c

08005ccc <_raise_r>:
 8005ccc:	291f      	cmp	r1, #31
 8005cce:	b538      	push	{r3, r4, r5, lr}
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	460d      	mov	r5, r1
 8005cd4:	d904      	bls.n	8005ce0 <_raise_r+0x14>
 8005cd6:	2316      	movs	r3, #22
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	f04f 30ff 	mov.w	r0, #4294967295
 8005cde:	bd38      	pop	{r3, r4, r5, pc}
 8005ce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ce2:	b112      	cbz	r2, 8005cea <_raise_r+0x1e>
 8005ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ce8:	b94b      	cbnz	r3, 8005cfe <_raise_r+0x32>
 8005cea:	4620      	mov	r0, r4
 8005cec:	f000 f830 	bl	8005d50 <_getpid_r>
 8005cf0:	462a      	mov	r2, r5
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cfa:	f000 b817 	b.w	8005d2c <_kill_r>
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d00a      	beq.n	8005d18 <_raise_r+0x4c>
 8005d02:	1c59      	adds	r1, r3, #1
 8005d04:	d103      	bne.n	8005d0e <_raise_r+0x42>
 8005d06:	2316      	movs	r3, #22
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	e7e7      	b.n	8005cde <_raise_r+0x12>
 8005d0e:	2400      	movs	r4, #0
 8005d10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d14:	4628      	mov	r0, r5
 8005d16:	4798      	blx	r3
 8005d18:	2000      	movs	r0, #0
 8005d1a:	e7e0      	b.n	8005cde <_raise_r+0x12>

08005d1c <raise>:
 8005d1c:	4b02      	ldr	r3, [pc, #8]	; (8005d28 <raise+0xc>)
 8005d1e:	4601      	mov	r1, r0
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	f7ff bfd3 	b.w	8005ccc <_raise_r>
 8005d26:	bf00      	nop
 8005d28:	240000d4 	.word	0x240000d4

08005d2c <_kill_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4d07      	ldr	r5, [pc, #28]	; (8005d4c <_kill_r+0x20>)
 8005d30:	2300      	movs	r3, #0
 8005d32:	4604      	mov	r4, r0
 8005d34:	4608      	mov	r0, r1
 8005d36:	4611      	mov	r1, r2
 8005d38:	602b      	str	r3, [r5, #0]
 8005d3a:	f7fa fe57 	bl	80009ec <_kill>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d102      	bne.n	8005d48 <_kill_r+0x1c>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	b103      	cbz	r3, 8005d48 <_kill_r+0x1c>
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	bd38      	pop	{r3, r4, r5, pc}
 8005d4a:	bf00      	nop
 8005d4c:	24000268 	.word	0x24000268

08005d50 <_getpid_r>:
 8005d50:	f7fa be44 	b.w	80009dc <_getpid>

08005d54 <__sread>:
 8005d54:	b510      	push	{r4, lr}
 8005d56:	460c      	mov	r4, r1
 8005d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5c:	f000 f894 	bl	8005e88 <_read_r>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	bfab      	itete	ge
 8005d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d66:	89a3      	ldrhlt	r3, [r4, #12]
 8005d68:	181b      	addge	r3, r3, r0
 8005d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d6e:	bfac      	ite	ge
 8005d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d72:	81a3      	strhlt	r3, [r4, #12]
 8005d74:	bd10      	pop	{r4, pc}

08005d76 <__swrite>:
 8005d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	898b      	ldrh	r3, [r1, #12]
 8005d7e:	05db      	lsls	r3, r3, #23
 8005d80:	4605      	mov	r5, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	4616      	mov	r6, r2
 8005d86:	d505      	bpl.n	8005d94 <__swrite+0x1e>
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f000 f868 	bl	8005e64 <_lseek_r>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d9e:	81a3      	strh	r3, [r4, #12]
 8005da0:	4632      	mov	r2, r6
 8005da2:	463b      	mov	r3, r7
 8005da4:	4628      	mov	r0, r5
 8005da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005daa:	f000 b817 	b.w	8005ddc <_write_r>

08005dae <__sseek>:
 8005dae:	b510      	push	{r4, lr}
 8005db0:	460c      	mov	r4, r1
 8005db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db6:	f000 f855 	bl	8005e64 <_lseek_r>
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	bf15      	itete	ne
 8005dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dca:	81a3      	strheq	r3, [r4, #12]
 8005dcc:	bf18      	it	ne
 8005dce:	81a3      	strhne	r3, [r4, #12]
 8005dd0:	bd10      	pop	{r4, pc}

08005dd2 <__sclose>:
 8005dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd6:	f000 b813 	b.w	8005e00 <_close_r>
	...

08005ddc <_write_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d07      	ldr	r5, [pc, #28]	; (8005dfc <_write_r+0x20>)
 8005de0:	4604      	mov	r4, r0
 8005de2:	4608      	mov	r0, r1
 8005de4:	4611      	mov	r1, r2
 8005de6:	2200      	movs	r2, #0
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fa fe37 	bl	8000a5e <_write>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_write_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_write_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	24000268 	.word	0x24000268

08005e00 <_close_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d06      	ldr	r5, [pc, #24]	; (8005e1c <_close_r+0x1c>)
 8005e04:	2300      	movs	r3, #0
 8005e06:	4604      	mov	r4, r0
 8005e08:	4608      	mov	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fa fe43 	bl	8000a96 <_close>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_close_r+0x1a>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_close_r+0x1a>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	24000268 	.word	0x24000268

08005e20 <_fstat_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	; (8005e40 <_fstat_r+0x20>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	f7fa fe3e 	bl	8000aae <_fstat>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d102      	bne.n	8005e3c <_fstat_r+0x1c>
 8005e36:	682b      	ldr	r3, [r5, #0]
 8005e38:	b103      	cbz	r3, 8005e3c <_fstat_r+0x1c>
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	24000268 	.word	0x24000268

08005e44 <_isatty_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4d06      	ldr	r5, [pc, #24]	; (8005e60 <_isatty_r+0x1c>)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fa fe3d 	bl	8000ace <_isatty>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_isatty_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_isatty_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	24000268 	.word	0x24000268

08005e64 <_lseek_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d07      	ldr	r5, [pc, #28]	; (8005e84 <_lseek_r+0x20>)
 8005e68:	4604      	mov	r4, r0
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	602a      	str	r2, [r5, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f7fa fe36 	bl	8000ae4 <_lseek>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_lseek_r+0x1e>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_lseek_r+0x1e>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	24000268 	.word	0x24000268

08005e88 <_read_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4d07      	ldr	r5, [pc, #28]	; (8005ea8 <_read_r+0x20>)
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	4608      	mov	r0, r1
 8005e90:	4611      	mov	r1, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f7fa fdc4 	bl	8000a24 <_read>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_read_r+0x1e>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_read_r+0x1e>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	24000268 	.word	0x24000268

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
