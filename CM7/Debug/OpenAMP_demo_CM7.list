
OpenAMP_demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b38  08006b38  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006b38  08006b38  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b38  08006b38  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  08006b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  240001e4  08006d24  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000374  08006d24  00020374  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  08006d24  00030000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1c9  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041ff  00000000  00000000  0003a3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003fa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00044387  00000000  00000000  00040d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be63  00000000  00000000  000850c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a0110  00000000  00000000  000a0f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0024103a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cac  00000000  00000000  0024108c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080067e8 	.word	0x080067e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	080067e8 	.word	0x080067e8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003b4:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <SystemInit+0xfc>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ba:	4a3c      	ldr	r2, [pc, #240]	; (80004ac <SystemInit+0xfc>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003c4:	4b39      	ldr	r3, [pc, #228]	; (80004ac <SystemInit+0xfc>)
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a38      	ldr	r2, [pc, #224]	; (80004ac <SystemInit+0xfc>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003d0:	4b37      	ldr	r3, [pc, #220]	; (80004b0 <SystemInit+0x100>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f003 030f 	and.w	r3, r3, #15
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d807      	bhi.n	80003ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <SystemInit+0x100>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f023 030f 	bic.w	r3, r3, #15
 80003e4:	4a32      	ldr	r2, [pc, #200]	; (80004b0 <SystemInit+0x100>)
 80003e6:	f043 0307 	orr.w	r3, r3, #7
 80003ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <SystemInit+0x104>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a30      	ldr	r2, [pc, #192]	; (80004b4 <SystemInit+0x104>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f8:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <SystemInit+0x104>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <SystemInit+0x104>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	492c      	ldr	r1, [pc, #176]	; (80004b4 <SystemInit+0x104>)
 8000404:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <SystemInit+0x108>)
 8000406:	4013      	ands	r3, r2
 8000408:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800040a:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <SystemInit+0x100>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0308 	and.w	r3, r3, #8
 8000412:	2b00      	cmp	r3, #0
 8000414:	d007      	beq.n	8000426 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000416:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <SystemInit+0x100>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	4a24      	ldr	r2, [pc, #144]	; (80004b0 <SystemInit+0x100>)
 8000420:	f043 0307 	orr.w	r3, r3, #7
 8000424:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000426:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <SystemInit+0x104>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <SystemInit+0x104>)
 800043a:	4a20      	ldr	r2, [pc, #128]	; (80004bc <SystemInit+0x10c>)
 800043c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800043e:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <SystemInit+0x104>)
 8000440:	4a1f      	ldr	r2, [pc, #124]	; (80004c0 <SystemInit+0x110>)
 8000442:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <SystemInit+0x104>)
 8000446:	4a1f      	ldr	r2, [pc, #124]	; (80004c4 <SystemInit+0x114>)
 8000448:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <SystemInit+0x104>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <SystemInit+0x104>)
 8000452:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <SystemInit+0x114>)
 8000454:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <SystemInit+0x104>)
 8000458:	2200      	movs	r2, #0
 800045a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <SystemInit+0x104>)
 800045e:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <SystemInit+0x114>)
 8000460:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <SystemInit+0x104>)
 8000464:	2200      	movs	r2, #0
 8000466:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <SystemInit+0x104>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <SystemInit+0x104>)
 800046e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <SystemInit+0x104>)
 8000476:	2200      	movs	r2, #0
 8000478:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <SystemInit+0x118>)
 800047c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <SystemInit+0x118>)
 8000480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000484:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <SystemInit+0x11c>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <SystemInit+0x120>)
 800048c:	4013      	ands	r3, r2
 800048e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000492:	d202      	bcs.n	800049a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <SystemInit+0x124>)
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <SystemInit+0x128>)
 800049c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80004a0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	52002000 	.word	0x52002000
 80004b4:	58024400 	.word	0x58024400
 80004b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004bc:	02020200 	.word	0x02020200
 80004c0:	01ff0000 	.word	0x01ff0000
 80004c4:	01010280 	.word	0x01010280
 80004c8:	580000c0 	.word	0x580000c0
 80004cc:	5c001000 	.word	0x5c001000
 80004d0:	ffff0000 	.word	0xffff0000
 80004d4:	51008108 	.word	0x51008108
 80004d8:	52004000 	.word	0x52004000

080004dc <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_GPIO_Init+0x84>)
 80004f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f8:	4a19      	ldr	r2, [pc, #100]	; (8000560 <MX_GPIO_Init+0x84>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_GPIO_Init+0x84>)
 8000504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_GPIO_Init+0x84>)
 8000512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <MX_GPIO_Init+0x84>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_GPIO_Init+0x84>)
 8000522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <MX_GPIO_Init+0x88>)
 8000536:	f000 ffef 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800053a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_GPIO_Init+0x88>)
 8000554:	f000 fe30 	bl	80011b8 <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	58024400 	.word	0x58024400
 8000564:	58022000 	.word	0x58022000

08000568 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d101      	bne.n	8000582 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <rpmsg_send+0x3c>)
 8000580:	e00c      	b.n	800059c <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800058a:	2301      	movs	r3, #1
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f003 fc7b 	bl	8003e90 <rpmsg_send_offchannel_raw>
 800059a:	4603      	mov	r3, r0
					 len, true);
}
 800059c:	4618      	mov	r0, r3
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	fffff829 	.word	0xfffff829

080005a8 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2220      	movs	r2, #32
 80005ba:	68b9      	ldr	r1, [r7, #8]
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 fd1b 	bl	8005ff8 <strncpy>
	ept->addr = src;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	69ba      	ldr	r2, [r7, #24]
 80005d2:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	69fa      	ldr	r2, [r7, #28]
 80005d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */

	/* USER CODE END Boot_Mode_Sequence_0 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80005ea:	f000 f9ef 	bl	80009cc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005ee:	4b5b      	ldr	r3, [pc, #364]	; (800075c <main+0x178>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d11b      	bne.n	8000632 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000600:	f3bf 8f6f 	isb	sy
}
 8000604:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <main+0x178>)
 8000608:	2200      	movs	r2, #0
 800060a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800060e:	f3bf 8f4f 	dsb	sy
}
 8000612:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000614:	f3bf 8f6f 	isb	sy
}
 8000618:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800061a:	4b50      	ldr	r3, [pc, #320]	; (800075c <main+0x178>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a4f      	ldr	r2, [pc, #316]	; (800075c <main+0x178>)
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000626:	f3bf 8f4f 	dsb	sy
}
 800062a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800062c:	f3bf 8f6f 	isb	sy
}
 8000630:	e000      	b.n	8000634 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000632:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000634:	4b49      	ldr	r3, [pc, #292]	; (800075c <main+0x178>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800063c:	2b00      	cmp	r3, #0
 800063e:	d138      	bne.n	80006b2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <main+0x178>)
 8000642:	2200      	movs	r2, #0
 8000644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000648:	f3bf 8f4f 	dsb	sy
}
 800064c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800064e:	4b43      	ldr	r3, [pc, #268]	; (800075c <main+0x178>)
 8000650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000654:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	0b5b      	lsrs	r3, r3, #13
 800065a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800065e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	08db      	lsrs	r3, r3, #3
 8000664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000668:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	015a      	lsls	r2, r3, #5
 800066e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000672:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000678:	4938      	ldr	r1, [pc, #224]	; (800075c <main+0x178>)
 800067a:	4313      	orrs	r3, r2
 800067c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	607a      	str	r2, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1ef      	bne.n	800066a <main+0x86>
    } while(sets-- != 0U);
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	60ba      	str	r2, [r7, #8]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1e5      	bne.n	8000660 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
}
 8000698:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <main+0x178>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a2f      	ldr	r2, [pc, #188]	; (800075c <main+0x178>)
 80006a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a6:	f3bf 8f4f 	dsb	sy
}
 80006aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ac:	f3bf 8f6f 	isb	sy
}
 80006b0:	e000      	b.n	80006b4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006b2:	bf00      	nop
	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <main+0x17c>)
 80006b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ba:	601a      	str	r2, [r3, #0]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80006bc:	bf00      	nop
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <main+0x180>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <main+0xf4>
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <main+0x17c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	4923      	ldr	r1, [pc, #140]	; (8000760 <main+0x17c>)
 80006d2:	600a      	str	r2, [r1, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	dcf2      	bgt.n	80006be <main+0xda>
		;
	if (timeout < 0) {
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <main+0x17c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da01      	bge.n	80006e4 <main+0x100>
		Error_Handler();
 80006e0:	f000 f9a1 	bl	8000a26 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006e4:	f000 fb3e 	bl	8000d64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006e8:	f000 f840 	bl	800076c <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <main+0x180>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <main+0x180>)
 80006f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <main+0x180>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 ff38 	bl	8001580 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f000 ff4e 	bl	80015b4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <main+0x17c>)
 800071a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071e:	601a      	str	r2, [r3, #0]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000720:	bf00      	nop
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x180>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d106      	bne.n	800073c <main+0x158>
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <main+0x17c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	490a      	ldr	r1, [pc, #40]	; (8000760 <main+0x17c>)
 8000736:	600a      	str	r2, [r1, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	dcf2      	bgt.n	8000722 <main+0x13e>
		;
	if (timeout < 0) {
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <main+0x17c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	da01      	bge.n	8000748 <main+0x164>
		Error_Handler();
 8000744:	f000 f96f 	bl	8000a26 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000748:	f7ff fec8 	bl	80004dc <MX_GPIO_Init>
	MX_TIM14_Init();
 800074c:	f000 fa94 	bl	8000c78 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	OpenAMP_init();
 8000750:	f000 f8ce 	bl	80008f0 <OpenAMP_init>
	HAL_TIM_Base_Start_IT(&htim14);
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <main+0x184>)
 8000756:	f001 ff7d 	bl	8002654 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800075a:	e7fe      	b.n	800075a <main+0x176>
 800075c:	e000ed00 	.word	0xe000ed00
 8000760:	24000204 	.word	0x24000204
 8000764:	58024400 	.word	0x58024400
 8000768:	2400025c 	.word	0x2400025c

0800076c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	; 0x70
 8000770:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	224c      	movs	r2, #76	; 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 f842 	bl	8005804 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f005 f83c 	bl	8005804 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800078c:	2004      	movs	r0, #4
 800078e:	f000 ff51 	bl	8001634 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <SystemClock_Config+0xec>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <SystemClock_Config+0xec>)
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <SystemClock_Config+0xec>)
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <SystemClock_Config+0xf0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <SystemClock_Config+0xf0>)
 80007b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xf0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80007c4:	bf00      	nop
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <SystemClock_Config+0xf0>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d2:	d1f8      	bne.n	80007c6 <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 80007ea:	230c      	movs	r3, #12
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80007f2:	2305      	movs	r3, #5
 80007f4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007fe:	2302      	movs	r3, #2
 8000800:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4618      	mov	r0, r3
 800080c:	f000 ff6c 	bl	80016e8 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xae>
		Error_Handler();
 8000816:	f000 f906 	bl	8000a26 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800081a:	233f      	movs	r3, #63	; 0x3f
 800081c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fb80 	bl	8001f44 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xe2>
		Error_Handler();
 800084a:	f000 f8ec 	bl	8000a26 <Error_Handler>
	}
}
 800084e:	bf00      	nop
 8000850:	3770      	adds	r7, #112	; 0x70
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	58000400 	.word	0x58000400
 800085c:	58024800 	.word	0x58024800

08000860 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	if (htim == &htim14) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d12f      	bne.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x70>
		status = OPENAMP_send(&rp_endpoint, data_table[myidx],
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000878:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
				strlen(data_table[myidx]));
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fd33 	bl	80002f4 <strlen>
 800088e:	4603      	mov	r3, r0
		status = OPENAMP_send(&rp_endpoint, data_table[myidx],
 8000890:	461a      	mov	r2, r3
 8000892:	4621      	mov	r1, r4
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000896:	f7ff fe67 	bl	8000568 <rpmsg_send>
 800089a:	4603      	mov	r3, r0
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800089e:	6013      	str	r3, [r2, #0]

		if (status < 0)
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	da01      	bge.n	80008ac <HAL_TIM_PeriodElapsedCallback+0x4c>
			Error_Handler();
 80008a8:	f000 f8bd 	bl	8000a26 <Error_Handler>

		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	480e      	ldr	r0, [pc, #56]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80008b2:	f000 fe4a 	bl	800154a <HAL_GPIO_TogglePin>
		myidx++;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008c0:	701a      	strb	r2, [r3, #0]

		if (myidx > 5)
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b05      	cmp	r3, #5
 80008c8:	d902      	bls.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x70>
			myidx = 0;
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
	}

}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	2400025c 	.word	0x2400025c
 80008dc:	24000208 	.word	0x24000208
 80008e0:	240000b8 	.word	0x240000b8
 80008e4:	24000218 	.word	0x24000218
 80008e8:	24000200 	.word	0x24000200
 80008ec:	58022000 	.word	0x58022000

080008f0 <OpenAMP_init>:

static void OpenAMP_init() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af02      	add	r7, sp, #8
	MAILBOX_Init();
 80008f6:	f004 fce3 	bl	80052c0 <MAILBOX_Init>

	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY,
 80008fa:	2300      	movs	r3, #0
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	2300      	movs	r3, #0
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	f04f 32ff 	mov.w	r2, #4294967295
 800090a:	4909      	ldr	r1, [pc, #36]	; (8000930 <OpenAMP_init+0x40>)
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <OpenAMP_init+0x44>)
 800090e:	f7ff fe4b 	bl	80005a8 <rpmsg_init_ept>
	RPMSG_ADDR_ANY,
	NULL, NULL);

	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb) != HAL_OK)
 8000912:	4909      	ldr	r1, [pc, #36]	; (8000938 <OpenAMP_init+0x48>)
 8000914:	2000      	movs	r0, #0
 8000916:	f004 fded 	bl	80054f4 <MX_OPENAMP_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <OpenAMP_init+0x34>
		Error_Handler();
 8000920:	f000 f881 	bl	8000a26 <Error_Handler>

	OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <OpenAMP_init+0x44>)
 8000926:	f004 fe99 	bl	800565c <OPENAMP_Wait_EndPointready>

}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08006800 	.word	0x08006800
 8000934:	24000218 	.word	0x24000218
 8000938:	08000991 	.word	0x08000991

0800093c <rpmsg_recv_callback>:

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv) {
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]

	received_data_int = *((unsigned int*) data);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a06      	ldr	r2, [pc, #24]	; (8000968 <rpmsg_recv_callback+0x2c>)
 8000950:	6013      	str	r3, [r2, #0]
	message_received = 1;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <rpmsg_recv_callback+0x30>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
	return 0;
 8000958:	2300      	movs	r3, #0

}
 800095a:	4618      	mov	r0, r3
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	24000214 	.word	0x24000214
 800096c:	2400020c 	.word	0x2400020c

08000970 <service_destroy_cb>:
	}
	message_received = 0;
	return 0;
}

void service_destroy_cb(struct rpmsg_endpoint *ept) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

	service_created = 0;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <service_destroy_cb+0x1c>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]

}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	24000210 	.word	0x24000210

08000990 <new_service_cb>:
void new_service_cb(struct rpmsg_endpoint *rdev, const char *name,
		uint32_t dest) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]

	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <new_service_cb+0x2c>)
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <new_service_cb+0x30>)
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <new_service_cb+0x34>)
 80009a8:	f004 fe3a 	bl	8005620 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <new_service_cb+0x38>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	601a      	str	r2, [r3, #0]

}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08000971 	.word	0x08000971
 80009c0:	0800093d 	.word	0x0800093d
 80009c4:	24000218 	.word	0x24000218
 80009c8:	24000210 	.word	0x24000210

080009cc <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80009de:	f000 fb6f 	bl	80010c0 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009e2:	2301      	movs	r3, #1
 80009e4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x38000000;
 80009ea:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80009ee:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80009f0:	230f      	movs	r3, #15
 80009f2:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80009fc:	2303      	movs	r3, #3
 80009fe:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a10:	463b      	mov	r3, r7
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fb8c 	bl	8001130 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a18:	2004      	movs	r0, #4
 8000a1a:	f000 fb69 	bl	80010f0 <HAL_MPU_Enable>

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2a:	b672      	cpsid	i
}
 8000a2c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a2e:	e7fe      	b.n	8000a2e <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x3c>)
 8000a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_MspInit+0x3c>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x3c>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	207d      	movs	r0, #125	; 0x7d
 8000a5a:	f000 fafc 	bl	8001056 <HAL_NVIC_SetPriority>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000a5e:	207d      	movs	r0, #125	; 0x7d
 8000a60:	f000 fb13 	bl	800108a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	58024400 	.word	0x58024400

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f9c4 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000aca:	f001 fe3b 	bl	8002744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2400025c 	.word	0x2400025c

08000ad8 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000adc:	f000 fd90 	bl	8001600 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_kill>:

int _kill(int pid, int sig)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <_kill+0x20>)
 8000b00:	2216      	movs	r2, #22
 8000b02:	601a      	str	r2, [r3, #0]
	return -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	2400036c 	.word	0x2400036c

08000b18 <_exit>:

void _exit (int status)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ffe5 	bl	8000af4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b2a:	e7fe      	b.n	8000b2a <_exit+0x12>

08000b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4601      	mov	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
	}

return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf1      	blt.n	8000b78 <_write+0x12>
	}
	return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:

int _close(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d205      	bcs.n	8000c44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <_sbrk+0x6c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	24080000 	.word	0x24080000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	24000258 	.word	0x24000258
 8000c70:	24000378 	.word	0x24000378
 8000c74:	2400036c 	.word	0x2400036c

08000c78 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_TIM14_Init+0x40>)
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <MX_TIM14_Init+0x44>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7500-1;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_TIM14_Init+0x40>)
 8000c84:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000c88:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_TIM14_Init+0x40>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_TIM14_Init+0x40>)
 8000c92:	2232      	movs	r2, #50	; 0x32
 8000c94:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_TIM14_Init+0x40>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_TIM14_Init+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM14_Init+0x40>)
 8000ca4:	f001 fc7e 	bl	80025a4 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000cae:	f7ff feba 	bl	8000a26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2400025c 	.word	0x2400025c
 8000cbc:	40002000 	.word	0x40002000

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d116      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_TIM_Base_MspInit+0x4c>)
 8000cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_TIM_Base_MspInit+0x4c>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_TIM_Base_MspInit+0x4c>)
 8000ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	202d      	movs	r0, #45	; 0x2d
 8000cf6:	f000 f9ae 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000cfa:	202d      	movs	r0, #45	; 0x2d
 8000cfc:	f000 f9c5 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40002000 	.word	0x40002000
 8000d0c:	58024400 	.word	0x58024400

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d14:	f7ff fb4c 	bl	80003b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f004 fd1f 	bl	8005780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc4f 	bl	80005e4 <main>
  bx  lr
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d50:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8000d54:	08006b40 	.word	0x08006b40
  ldr r2, =_sbss
 8000d58:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8000d5c:	24000374 	.word	0x24000374

08000d60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC3_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f968 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d70:	f001 fa9e 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8000d74:	4602      	mov	r2, r0
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_Init+0x68>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	4913      	ldr	r1, [pc, #76]	; (8000dd0 <HAL_Init+0x6c>)
 8000d82:	5ccb      	ldrb	r3, [r1, r3]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_Init+0x68>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_Init+0x6c>)
 8000d98:	5cd3      	ldrb	r3, [r2, r3]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	fa22 f303 	lsr.w	r3, r2, r3
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_Init+0x70>)
 8000da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_Init+0x74>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f814 	bl	8000ddc <HAL_InitTick>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e002      	b.n	8000dc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff fe37 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	080069f0 	.word	0x080069f0
 8000dd4:	24000004 	.word	0x24000004
 8000dd8:	24000000 	.word	0x24000000

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_InitTick+0x60>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e021      	b.n	8000e34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_InitTick+0x64>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_InitTick+0x60>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f94d 	bl	80010a6 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f917 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_InitTick+0x68>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	240000d4 	.word	0x240000d4
 8000e40:	24000000 	.word	0x24000000
 8000e44:	240000d0 	.word	0x240000d0

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	240000d4 	.word	0x240000d4
 8000e6c:	240002a8 	.word	0x240002a8

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	240002a8 	.word	0x240002a8

08000e88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetREVID+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0c1b      	lsrs	r3, r3, #16
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	5c001000 	.word	0x5c001000

08000ea0 <__NVIC_SetPriorityGrouping>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff40 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff90 	bl	8000f94 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5f 	bl	8000f40 <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff33 	bl	8000f04 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa4 	bl	8000ffc <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010c4:	f3bf 8f5f 	dmb	sy
}
 80010c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_MPU_Disable+0x28>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_MPU_Disable+0x28>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_MPU_Disable+0x2c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	e000ed90 	.word	0xe000ed90

080010f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_MPU_Enable+0x38>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_MPU_Enable+0x3c>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_MPU_Enable+0x3c>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800110e:	f3bf 8f4f 	dsb	sy
}
 8001112:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001114:	f3bf 8f6f 	isb	sy
}
 8001118:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed90 	.word	0xe000ed90
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	785a      	ldrb	r2, [r3, #1]
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800113e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d029      	beq.n	800119c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
 8001154:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7adb      	ldrb	r3, [r3, #11]
 800115a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800115c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7a9b      	ldrb	r3, [r3, #10]
 8001162:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001164:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7b5b      	ldrb	r3, [r3, #13]
 800116a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800116c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
 8001172:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001174:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7bdb      	ldrb	r3, [r3, #15]
 800117a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800117c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7a5b      	ldrb	r3, [r3, #9]
 8001182:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001184:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a1b      	ldrb	r3, [r3, #8]
 800118a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800118c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001196:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001198:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800119a:	e005      	b.n	80011a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_MPU_ConfigRegion+0x84>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed90 	.word	0xe000ed90

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_GPIO_Init+0x234>)
 80011c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ca:	e194      	b.n	80014f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8186 	beq.w	80014f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <HAL_GPIO_Init+0x44>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d130      	bne.n	800125e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001232:	2201      	movs	r2, #1
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 0201 	and.w	r2, r3, #1
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b03      	cmp	r3, #3
 8001268:	d017      	beq.n	800129a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d123      	bne.n	80012ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0203 	and.w	r2, r3, #3
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80e0 	beq.w	80014f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_GPIO_Init+0x238>)
 8001332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <HAL_GPIO_Init+0x238>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_GPIO_Init+0x238>)
 8001342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <HAL_GPIO_Init+0x23c>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_GPIO_Init+0x240>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d052      	beq.n	8001420 <HAL_GPIO_Init+0x268>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_GPIO_Init+0x244>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d031      	beq.n	80013e6 <HAL_GPIO_Init+0x22e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_GPIO_Init+0x248>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d02b      	beq.n	80013e2 <HAL_GPIO_Init+0x22a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_GPIO_Init+0x24c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x226>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_GPIO_Init+0x250>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x222>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_GPIO_Init+0x254>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x21e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1a      	ldr	r2, [pc, #104]	; (8001410 <HAL_GPIO_Init+0x258>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x21a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_GPIO_Init+0x25c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x216>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x260>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x212>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_GPIO_Init+0x264>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x20e>
 80013c2:	2309      	movs	r3, #9
 80013c4:	e02d      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013c6:	230a      	movs	r3, #10
 80013c8:	e02b      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013ca:	2308      	movs	r3, #8
 80013cc:	e029      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013ce:	2307      	movs	r3, #7
 80013d0:	e027      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013d2:	2306      	movs	r3, #6
 80013d4:	e025      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e023      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013da:	2304      	movs	r3, #4
 80013dc:	e021      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013de:	2303      	movs	r3, #3
 80013e0:	e01f      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e01d      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e01b      	b.n	8001422 <HAL_GPIO_Init+0x26a>
 80013ea:	bf00      	nop
 80013ec:	58000080 	.word	0x58000080
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58000400 	.word	0x58000400
 80013f8:	58020000 	.word	0x58020000
 80013fc:	58020400 	.word	0x58020400
 8001400:	58020800 	.word	0x58020800
 8001404:	58020c00 	.word	0x58020c00
 8001408:	58021000 	.word	0x58021000
 800140c:	58021400 	.word	0x58021400
 8001410:	58021800 	.word	0x58021800
 8001414:	58021c00 	.word	0x58021c00
 8001418:	58022000 	.word	0x58022000
 800141c:	58022400 	.word	0x58022400
 8001420:	2300      	movs	r3, #0
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001432:	4938      	ldr	r1, [pc, #224]	; (8001514 <HAL_GPIO_Init+0x35c>)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	3301      	adds	r3, #1
 80014f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f ae63 	bne.w	80011cc <HAL_GPIO_Init+0x14>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	; 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	58000400 	.word	0x58000400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001534:	e003      	b.n	800153e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	041a      	lsls	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	041a      	lsls	r2, r3, #16
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43d9      	mvns	r1, r3
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	400b      	ands	r3, r1
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_HSEM_FastTake+0x2c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3320      	adds	r3, #32
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_HSEM_FastTake+0x30>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	e000      	b.n	800159e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	58026400 	.word	0x58026400
 80015b0:	80000300 	.word	0x80000300

080015b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80015be:	4906      	ldr	r1, [pc, #24]	; (80015d8 <HAL_HSEM_Release+0x24>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	58026400 	.word	0x58026400

080015dc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_HSEM_ActivateNotification+0x20>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4904      	ldr	r1, [pc, #16]	; (80015fc <HAL_HSEM_ActivateNotification+0x20>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
#endif
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	58026500 	.word	0x58026500

08001600 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_HSEM_IRQHandler+0x30>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_HSEM_IRQHandler+0x30>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	43db      	mvns	r3, r3
 8001614:	4906      	ldr	r1, [pc, #24]	; (8001630 <HAL_HSEM_IRQHandler+0x30>)
 8001616:	4013      	ands	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_HSEM_IRQHandler+0x30>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f003 fe3d 	bl	80052a0 <HAL_HSEM_FreeCallback>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	58026500 	.word	0x58026500

08001634 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	2b06      	cmp	r3, #6
 8001646:	d00a      	beq.n	800165e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e040      	b.n	80016dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e03e      	b.n	80016dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001666:	491f      	ldr	r1, [pc, #124]	; (80016e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4313      	orrs	r3, r2
 800166c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800166e:	f7ff fbff 	bl	8000e70 <HAL_GetTick>
 8001672:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001674:	e009      	b.n	800168a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001676:	f7ff fbfb 	bl	8000e70 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001684:	d901      	bls.n	800168a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e028      	b.n	80016dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001696:	d1ee      	bne.n	8001676 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b1e      	cmp	r3, #30
 800169c:	d008      	beq.n	80016b0 <HAL_PWREx_ConfigSupply+0x7c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b2e      	cmp	r3, #46	; 0x2e
 80016a2:	d005      	beq.n	80016b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b1d      	cmp	r3, #29
 80016a8:	d002      	beq.n	80016b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b2d      	cmp	r3, #45	; 0x2d
 80016ae:	d114      	bne.n	80016da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80016b0:	f7ff fbde 	bl	8000e70 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016b6:	e009      	b.n	80016cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016b8:	f7ff fbda 	bl	8000e70 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c6:	d901      	bls.n	80016cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e007      	b.n	80016dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	d1ee      	bne.n	80016b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	58024800 	.word	0x58024800

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f000 bc1d 	b.w	8001f36 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 8087 	beq.w	8001818 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170a:	4b99      	ldr	r3, [pc, #612]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001714:	4b96      	ldr	r3, [pc, #600]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	2b10      	cmp	r3, #16
 800171e:	d007      	beq.n	8001730 <HAL_RCC_OscConfig+0x48>
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	2b18      	cmp	r3, #24
 8001724:	d110      	bne.n	8001748 <HAL_RCC_OscConfig+0x60>
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d10b      	bne.n	8001748 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	4b8f      	ldr	r3, [pc, #572]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d06c      	beq.n	8001816 <HAL_RCC_OscConfig+0x12e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d168      	bne.n	8001816 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e3f6      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001750:	d106      	bne.n	8001760 <HAL_RCC_OscConfig+0x78>
 8001752:	4b87      	ldr	r3, [pc, #540]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a86      	ldr	r2, [pc, #536]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e02e      	b.n	80017be <HAL_RCC_OscConfig+0xd6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x9a>
 8001768:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a80      	ldr	r2, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b7e      	ldr	r3, [pc, #504]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a7d      	ldr	r2, [pc, #500]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e01d      	b.n	80017be <HAL_RCC_OscConfig+0xd6>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0xbe>
 800178c:	4b78      	ldr	r3, [pc, #480]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a77      	ldr	r2, [pc, #476]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b75      	ldr	r3, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a74      	ldr	r2, [pc, #464]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800179e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0xd6>
 80017a6:	4b72      	ldr	r3, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a71      	ldr	r2, [pc, #452]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80017ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a6e      	ldr	r2, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80017b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d013      	beq.n	80017ee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb53 	bl	8000e70 <HAL_GetTick>
 80017ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ce:	f7ff fb4f 	bl	8000e70 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e3aa      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e0:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0xe6>
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff fb3f 	bl	8000e70 <HAL_GetTick>
 80017f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f6:	f7ff fb3b 	bl	8000e70 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e396      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x10e>
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001816:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80cb 	beq.w	80019bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001826:	4b52      	ldr	r3, [pc, #328]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800182e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_RCC_OscConfig+0x164>
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2b18      	cmp	r3, #24
 8001840:	d156      	bne.n	80018f0 <HAL_RCC_OscConfig+0x208>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d151      	bne.n	80018f0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800184c:	4b48      	ldr	r3, [pc, #288]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x17c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e368      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 0219 	bic.w	r2, r3, #25
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	493f      	ldr	r1, [pc, #252]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001876:	f7ff fafb 	bl	8000e70 <HAL_GetTick>
 800187a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff faf7 	bl	8000e70 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e352      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	f7ff faf4 	bl	8000e88 <HAL_GetREVID>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d817      	bhi.n	80018da <HAL_RCC_OscConfig+0x1f2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_OscConfig+0x1dc>
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018ba:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c2:	e07b      	b.n	80019bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	031b      	lsls	r3, r3, #12
 80018d2:	4927      	ldr	r1, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d8:	e070      	b.n	80019bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	061b      	lsls	r3, r3, #24
 80018e8:	4921      	ldr	r1, [pc, #132]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ee:	e065      	b.n	80019bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d048      	beq.n	800198a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 0219 	bic.w	r2, r3, #25
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	491a      	ldr	r1, [pc, #104]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fab1 	bl	8000e70 <HAL_GetTick>
 800190e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff faad 	bl	8000e70 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e308      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	f7ff faaa 	bl	8000e88 <HAL_GetREVID>
 8001934:	4603      	mov	r3, r0
 8001936:	f241 0203 	movw	r2, #4099	; 0x1003
 800193a:	4293      	cmp	r3, r2
 800193c:	d81a      	bhi.n	8001974 <HAL_RCC_OscConfig+0x28c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d108      	bne.n	8001958 <HAL_RCC_OscConfig+0x270>
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6053      	str	r3, [r2, #4]
 8001956:	e031      	b.n	80019bc <HAL_RCC_OscConfig+0x2d4>
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	031b      	lsls	r3, r3, #12
 8001966:	4902      	ldr	r1, [pc, #8]	; (8001970 <HAL_RCC_OscConfig+0x288>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e026      	b.n	80019bc <HAL_RCC_OscConfig+0x2d4>
 800196e:	bf00      	nop
 8001970:	58024400 	.word	0x58024400
 8001974:	4b9a      	ldr	r3, [pc, #616]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	4997      	ldr	r1, [pc, #604]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
 8001988:	e018      	b.n	80019bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b95      	ldr	r3, [pc, #596]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a94      	ldr	r2, [pc, #592]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fa6b 	bl	8000e70 <HAL_GetTick>
 800199a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fa67 	bl	8000e70 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e2c2      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019b0:	4b8b      	ldr	r3, [pc, #556]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a9 	beq.w	8001b1c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019d4:	4b82      	ldr	r3, [pc, #520]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d007      	beq.n	80019f0 <HAL_RCC_OscConfig+0x308>
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b18      	cmp	r3, #24
 80019e4:	d13a      	bne.n	8001a5c <HAL_RCC_OscConfig+0x374>
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d135      	bne.n	8001a5c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019f0:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_OscConfig+0x320>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b80      	cmp	r3, #128	; 0x80
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e296      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a08:	f7ff fa3e 	bl	8000e88 <HAL_GetREVID>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d817      	bhi.n	8001a46 <HAL_RCC_OscConfig+0x35e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d108      	bne.n	8001a30 <HAL_RCC_OscConfig+0x348>
 8001a1e:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a26:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a2e:	e075      	b.n	8001b1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a30:	4b6b      	ldr	r3, [pc, #428]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	069b      	lsls	r3, r3, #26
 8001a3e:	4968      	ldr	r1, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a44:	e06a      	b.n	8001b1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a46:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	061b      	lsls	r3, r3, #24
 8001a54:	4962      	ldr	r1, [pc, #392]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a5a:	e05f      	b.n	8001b1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d042      	beq.n	8001aea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a64:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5d      	ldr	r2, [pc, #372]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff f9fe 	bl	8000e70 <HAL_GetTick>
 8001a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a78:	f7ff f9fa 	bl	8000e70 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e255      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a8a:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a96:	f7ff f9f7 	bl	8000e88 <HAL_GetREVID>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d817      	bhi.n	8001ad4 <HAL_RCC_OscConfig+0x3ec>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d108      	bne.n	8001abe <HAL_RCC_OscConfig+0x3d6>
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aba:	6053      	str	r3, [r2, #4]
 8001abc:	e02e      	b.n	8001b1c <HAL_RCC_OscConfig+0x434>
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	069b      	lsls	r3, r3, #26
 8001acc:	4944      	ldr	r1, [pc, #272]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e023      	b.n	8001b1c <HAL_RCC_OscConfig+0x434>
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	493f      	ldr	r1, [pc, #252]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
 8001ae8:	e018      	b.n	8001b1c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f9bb 	bl	8000e70 <HAL_GetTick>
 8001afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001afe:	f7ff f9b7 	bl	8000e70 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e212      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d036      	beq.n	8001b96 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d019      	beq.n	8001b64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f998 	bl	8000e70 <HAL_GetTick>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f994 	bl	8000e70 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1ef      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x45c>
 8001b62:	e018      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b70:	f7ff f97e 	bl	8000e70 <HAL_GetTick>
 8001b74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f97a 	bl	8000e70 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1d5      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d039      	beq.n	8001c16 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f95b 	bl	8000e70 <HAL_GetTick>
 8001bba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bbe:	f7ff f957 	bl	8000e70 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1b2      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4d6>
 8001bdc:	e01b      	b.n	8001c16 <HAL_RCC_OscConfig+0x52e>
 8001bde:	bf00      	nop
 8001be0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001be4:	4b9b      	ldr	r3, [pc, #620]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a9a      	ldr	r2, [pc, #616]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f93e 	bl	8000e70 <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bf8:	f7ff f93a 	bl	8000e70 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e195      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c0a:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8081 	beq.w	8001d26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c24:	4b8c      	ldr	r3, [pc, #560]	; (8001e58 <HAL_RCC_OscConfig+0x770>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a8b      	ldr	r2, [pc, #556]	; (8001e58 <HAL_RCC_OscConfig+0x770>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f91e 	bl	8000e70 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff f91a 	bl	8000e70 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e175      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c4a:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCC_OscConfig+0x770>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x584>
 8001c5e:	4b7d      	ldr	r3, [pc, #500]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a7c      	ldr	r2, [pc, #496]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	e02d      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5e0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5a6>
 8001c74:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a76      	ldr	r2, [pc, #472]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	4b74      	ldr	r3, [pc, #464]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a73      	ldr	r2, [pc, #460]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c86:	f023 0304 	bic.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5e0>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c8>
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca2:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a6b      	ldr	r2, [pc, #428]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5e0>
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbc:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001cc2:	f023 0304 	bic.w	r3, r3, #4
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d015      	beq.n	8001cfc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f8ce 	bl	8000e70 <HAL_GetTick>
 8001cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff f8ca 	bl	8000e70 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e123      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cee:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0ee      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x5f0>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f8b8 	bl	8000e70 <HAL_GetTick>
 8001d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7ff f8b4 	bl	8000e70 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e10d      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d1a:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ee      	bne.n	8001d04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8102 	beq.w	8001f34 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d30:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d38:	2b18      	cmp	r3, #24
 8001d3a:	f000 80bd 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	f040 809e 	bne.w	8001e84 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a41      	ldr	r2, [pc, #260]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f88c 	bl	8000e70 <HAL_GetTick>
 8001d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f888 	bl	8000e70 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0e3      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <HAL_RCC_OscConfig+0x774>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	4931      	ldr	r1, [pc, #196]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	628b      	str	r3, [r1, #40]	; 0x28
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	3b01      	subs	r3, #1
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	3b01      	subs	r3, #1
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	061b      	lsls	r3, r3, #24
 8001dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001dc4:	4923      	ldr	r1, [pc, #140]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x778>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001de2:	00d2      	lsls	r2, r2, #3
 8001de4:	491b      	ldr	r1, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f023 020c 	bic.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4917      	ldr	r1, [pc, #92]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	f023 0202 	bic.w	r2, r3, #2
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	4912      	ldr	r1, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f811 	bl	8000e70 <HAL_GetTick>
 8001e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e50:	e011      	b.n	8001e76 <HAL_RCC_OscConfig+0x78e>
 8001e52:	bf00      	nop
 8001e54:	58024400 	.word	0x58024400
 8001e58:	58024800 	.word	0x58024800
 8001e5c:	fffffc0c 	.word	0xfffffc0c
 8001e60:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff f804 	bl	8000e70 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e05f      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e76:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <HAL_RCC_OscConfig+0x858>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x77c>
 8001e82:	e057      	b.n	8001f34 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCC_OscConfig+0x858>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_RCC_OscConfig+0x858>)
 8001e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe ffee 	bl	8000e70 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe ffea 	bl	8000e70 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e045      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_RCC_OscConfig+0x858>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x7b0>
 8001eb6:	e03d      	b.n	8001f34 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <HAL_RCC_OscConfig+0x858>)
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCC_OscConfig+0x858>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d031      	beq.n	8001f30 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d12a      	bne.n	8001f30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d122      	bne.n	8001f30 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d11a      	bne.n	8001f30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0a5b      	lsrs	r3, r3, #9
 8001efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d111      	bne.n	8001f30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0c1b      	lsrs	r3, r3, #16
 8001f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0e1b      	lsrs	r3, r3, #24
 8001f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3730      	adds	r7, #48	; 0x30
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	58024400 	.word	0x58024400

08001f44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e19c      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b8a      	ldr	r3, [pc, #552]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 030f 	and.w	r3, r3, #15
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b87      	ldr	r3, [pc, #540]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 020f 	bic.w	r2, r3, #15
 8001f6e:	4985      	ldr	r1, [pc, #532]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b83      	ldr	r3, [pc, #524]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e184      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	4b7b      	ldr	r3, [pc, #492]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d908      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fa4:	4b78      	ldr	r3, [pc, #480]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4975      	ldr	r1, [pc, #468]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d908      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fd2:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	496a      	ldr	r1, [pc, #424]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	4b64      	ldr	r3, [pc, #400]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d908      	bls.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002000:	4b61      	ldr	r3, [pc, #388]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	495e      	ldr	r1, [pc, #376]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 800200e:	4313      	orrs	r3, r2
 8002010:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800202a:	429a      	cmp	r2, r3
 800202c:	d908      	bls.n	8002040 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800202e:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4953      	ldr	r1, [pc, #332]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 800203c:	4313      	orrs	r3, r2
 800203e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d010      	beq.n	800206e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	429a      	cmp	r2, r3
 800205a:	d908      	bls.n	800206e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f023 020f 	bic.w	r2, r3, #15
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4947      	ldr	r1, [pc, #284]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 800206a:	4313      	orrs	r3, r2
 800206c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d055      	beq.n	8002126 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800207a:	4b43      	ldr	r3, [pc, #268]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4940      	ldr	r1, [pc, #256]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002088:	4313      	orrs	r3, r2
 800208a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002094:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d121      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0f6      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d115      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0ea      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020c4:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0de      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020d4:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d6      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f023 0207 	bic.w	r2, r3, #7
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4925      	ldr	r1, [pc, #148]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7fe febb 	bl	8000e70 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fe:	f7fe feb7 	bl	8000e70 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0be      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	429a      	cmp	r2, r3
 8002124:	d1eb      	bne.n	80020fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d010      	beq.n	8002154 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	429a      	cmp	r2, r3
 8002140:	d208      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f023 020f 	bic.w	r2, r3, #15
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x244>)
 8002150:	4313      	orrs	r3, r2
 8002152:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d214      	bcs.n	800218c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 020f 	bic.w	r2, r3, #15
 800216a:	4906      	ldr	r1, [pc, #24]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <HAL_RCC_ClockConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e086      	b.n	8002292 <HAL_RCC_ClockConfig+0x34e>
 8002184:	52002000 	.word	0x52002000
 8002188:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d208      	bcs.n	80021ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	4939      	ldr	r1, [pc, #228]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d208      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	492e      	ldr	r1, [pc, #184]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d010      	beq.n	8002216 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002200:	429a      	cmp	r2, r3
 8002202:	d208      	bcs.n	8002216 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4922      	ldr	r1, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 8002212:	4313      	orrs	r3, r2
 8002214:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d010      	beq.n	8002244 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800222e:	429a      	cmp	r2, r3
 8002230:	d208      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4917      	ldr	r1, [pc, #92]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 8002240:	4313      	orrs	r3, r2
 8002242:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002244:	f000 f834 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	4912      	ldr	r1, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x35c>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_RCC_ClockConfig+0x358>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_RCC_ClockConfig+0x35c>)
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x360>)
 800227a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_RCC_ClockConfig+0x364>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_RCC_ClockConfig+0x368>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fda8 	bl	8000ddc <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	58024400 	.word	0x58024400
 80022a0:	080069f0 	.word	0x080069f0
 80022a4:	24000004 	.word	0x24000004
 80022a8:	24000000 	.word	0x24000000
 80022ac:	240000d0 	.word	0x240000d0

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b6:	4bb3      	ldr	r3, [pc, #716]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022be:	2b18      	cmp	r3, #24
 80022c0:	f200 8155 	bhi.w	800256e <HAL_RCC_GetSysClockFreq+0x2be>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	08002331 	.word	0x08002331
 80022d0:	0800256f 	.word	0x0800256f
 80022d4:	0800256f 	.word	0x0800256f
 80022d8:	0800256f 	.word	0x0800256f
 80022dc:	0800256f 	.word	0x0800256f
 80022e0:	0800256f 	.word	0x0800256f
 80022e4:	0800256f 	.word	0x0800256f
 80022e8:	0800256f 	.word	0x0800256f
 80022ec:	08002357 	.word	0x08002357
 80022f0:	0800256f 	.word	0x0800256f
 80022f4:	0800256f 	.word	0x0800256f
 80022f8:	0800256f 	.word	0x0800256f
 80022fc:	0800256f 	.word	0x0800256f
 8002300:	0800256f 	.word	0x0800256f
 8002304:	0800256f 	.word	0x0800256f
 8002308:	0800256f 	.word	0x0800256f
 800230c:	0800235d 	.word	0x0800235d
 8002310:	0800256f 	.word	0x0800256f
 8002314:	0800256f 	.word	0x0800256f
 8002318:	0800256f 	.word	0x0800256f
 800231c:	0800256f 	.word	0x0800256f
 8002320:	0800256f 	.word	0x0800256f
 8002324:	0800256f 	.word	0x0800256f
 8002328:	0800256f 	.word	0x0800256f
 800232c:	08002363 	.word	0x08002363
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002330:	4b94      	ldr	r3, [pc, #592]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800233c:	4b91      	ldr	r3, [pc, #580]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	4a90      	ldr	r2, [pc, #576]	; (8002588 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800234e:	e111      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002350:	4b8d      	ldr	r3, [pc, #564]	; (8002588 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002352:	61bb      	str	r3, [r7, #24]
    break;
 8002354:	e10e      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002356:	4b8d      	ldr	r3, [pc, #564]	; (800258c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002358:	61bb      	str	r3, [r7, #24]
    break;
 800235a:	e10b      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800235c:	4b8c      	ldr	r3, [pc, #560]	; (8002590 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800235e:	61bb      	str	r3, [r7, #24]
    break;
 8002360:	e108      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800236c:	4b85      	ldr	r3, [pc, #532]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002376:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002378:	4b82      	ldr	r3, [pc, #520]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002382:	4b80      	ldr	r3, [pc, #512]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	08db      	lsrs	r3, r3, #3
 8002388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80e1 	beq.w	8002568 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	f000 8083 	beq.w	80024b4 <HAL_RCC_GetSysClockFreq+0x204>
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	f200 80a1 	bhi.w	80024f8 <HAL_RCC_GetSysClockFreq+0x248>
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x114>
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d056      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x1c0>
 80023c2:	e099      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023c4:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02d      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023d0:	4b6c      	ldr	r3, [pc, #432]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	4a6b      	ldr	r2, [pc, #428]	; (8002588 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fa:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240a:	ed97 6a02 	vldr	s12, [r7, #8]
 800240e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002594 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800241e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002426:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800242a:	e087      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002436:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002598 <HAL_RCC_GetSysClockFreq+0x2e8>
 800243a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800243e:	4b51      	ldr	r3, [pc, #324]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800244e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002452:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002594 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800245e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800246e:	e065      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800259c <HAL_RCC_GetSysClockFreq+0x2ec>
 800247e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002482:	4b40      	ldr	r3, [pc, #256]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002492:	ed97 6a02 	vldr	s12, [r7, #8]
 8002496:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002594 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800249e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024b2:	e043      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80024c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002594 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024f6:	e021      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002502:	eddf 6a26 	vldr	s13, [pc, #152]	; 800259c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251a:	ed97 6a02 	vldr	s12, [r7, #8]
 800251e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002594 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800253a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	0a5b      	lsrs	r3, r3, #9
 8002542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002546:	3301      	adds	r3, #1
 8002548:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002554:	edd7 6a07 	vldr	s13, [r7, #28]
 8002558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002560:	ee17 3a90 	vmov	r3, s15
 8002564:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002566:	e005      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
    break;
 800256c:	e002      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002570:	61bb      	str	r3, [r7, #24]
    break;
 8002572:	bf00      	nop
  }

  return sysclockfreq;
 8002574:	69bb      	ldr	r3, [r7, #24]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	58024400 	.word	0x58024400
 8002588:	03d09000 	.word	0x03d09000
 800258c:	003d0900 	.word	0x003d0900
 8002590:	017d7840 	.word	0x017d7840
 8002594:	46000000 	.word	0x46000000
 8002598:	4c742400 	.word	0x4c742400
 800259c:	4a742400 	.word	0x4a742400
 80025a0:	4bbebc20 	.word	0x4bbebc20

080025a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e049      	b.n	800264a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fb78 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 f9f6 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e054      	b.n	8002716 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_TIM_Base_Start_IT+0xd0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d022      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d01d      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a22      	ldr	r2, [pc, #136]	; (8002728 <HAL_TIM_Base_Start_IT+0xd4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d018      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_TIM_Base_Start_IT+0xd8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <HAL_TIM_Base_Start_IT+0xdc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00e      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <HAL_TIM_Base_Start_IT+0xe0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_TIM_Base_Start_IT+0xe4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x80>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_TIM_Base_Start_IT+0xe8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d115      	bne.n	8002700 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_TIM_Base_Start_IT+0xec>)
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d015      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0xbe>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ec:	d011      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fe:	e008      	b.n	8002712 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e000      	b.n	8002714 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40010000 	.word	0x40010000
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800
 8002730:	40000c00 	.word	0x40000c00
 8002734:	40010400 	.word	0x40010400
 8002738:	40001800 	.word	0x40001800
 800273c:	40014000 	.word	0x40014000
 8002740:	00010007 	.word	0x00010007

08002744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0202 	mvn.w	r2, #2
 8002770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f905 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8f7 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f908 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0204 	mvn.w	r2, #4
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8db 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8cd 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8de 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0208 	mvn.w	r2, #8
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8b1 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8a3 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f8b4 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	d122      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b10      	cmp	r3, #16
 8002862:	d11b      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0210 	mvn.w	r2, #16
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2208      	movs	r2, #8
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f887 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f879 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f88a 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0201 	mvn.w	r2, #1
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fd ffcc 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b80      	cmp	r3, #128	; 0x80
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f914 	bl	8002b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d10e      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b80      	cmp	r3, #128	; 0x80
 8002910:	d107      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800291a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f907 	bl	8002b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d10e      	bne.n	800294e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d107      	bne.n	800294e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f838 	bl	80029be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0220 	mvn.w	r2, #32
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8c7 	bl	8002b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a40      	ldr	r2, [pc, #256]	; (8002ae8 <TIM_Base_SetConfig+0x114>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d00f      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a3d      	ldr	r2, [pc, #244]	; (8002aec <TIM_Base_SetConfig+0x118>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00b      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3c      	ldr	r2, [pc, #240]	; (8002af0 <TIM_Base_SetConfig+0x11c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3b      	ldr	r2, [pc, #236]	; (8002af4 <TIM_Base_SetConfig+0x120>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3a      	ldr	r2, [pc, #232]	; (8002af8 <TIM_Base_SetConfig+0x124>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d108      	bne.n	8002a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <TIM_Base_SetConfig+0x114>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01f      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d01b      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <TIM_Base_SetConfig+0x118>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d017      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <TIM_Base_SetConfig+0x11c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <TIM_Base_SetConfig+0x120>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a29      	ldr	r2, [pc, #164]	; (8002af8 <TIM_Base_SetConfig+0x124>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <TIM_Base_SetConfig+0x128>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <TIM_Base_SetConfig+0x12c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <TIM_Base_SetConfig+0x130>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <TIM_Base_SetConfig+0x114>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00f      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <TIM_Base_SetConfig+0x124>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <TIM_Base_SetConfig+0x128>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <TIM_Base_SetConfig+0x12c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_Base_SetConfig+0xf8>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <TIM_Base_SetConfig+0x130>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d103      	bne.n	8002ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	615a      	str	r2, [r3, #20]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	40010400 	.word	0x40010400
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40014400 	.word	0x40014400
 8002b04:	40014800 	.word	0x40014800

08002b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	601a      	str	r2, [r3, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffdd 	bl	8002b66 <metal_list_add_before>
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f001 ff93 	bl	8004aec <metal_machine_cache_flush>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8002bd8:	6839      	ldr	r1, [r7, #0]
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f001 ff91 	bl	8004b02 <metal_machine_cache_invalidate>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8002bf2:	6839      	ldr	r1, [r7, #0]
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ffdd 	bl	8002bb4 <__metal_cache_flush>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffdd 	bl	8002bce <__metal_cache_invalidate>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <metal_bus_register+0x20>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <metal_bus_register+0x20>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <metal_bus_register+0x26>
		return -EINVAL;
 8002c3c:	f06f 0315 	mvn.w	r3, #21
 8002c40:	e026      	b.n	8002c90 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f82b 	bl	8002ca4 <metal_bus_find>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <metal_bus_register+0x3e>
		return -EEXIST;
 8002c54:	f06f 0310 	mvn.w	r3, #16
 8002c58:	e01a      	b.n	8002c90 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	331c      	adds	r3, #28
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff70 	bl	8002b44 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480b      	ldr	r0, [pc, #44]	; (8002c98 <metal_bus_register+0x7c>)
 8002c6c:	f7ff ff95 	bl	8002b9a <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <metal_bus_register+0x80>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d90a      	bls.n	8002c8e <metal_bus_register+0x72>
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <metal_bus_register+0x80>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <metal_bus_register+0x72>
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <metal_bus_register+0x80>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	4905      	ldr	r1, [pc, #20]	; (8002ca0 <metal_bus_register+0x84>)
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	4798      	blx	r3
	return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	240002b4 	.word	0x240002b4
 8002c9c:	240002ac 	.word	0x240002ac
 8002ca0:	08006810 	.word	0x08006810

08002ca4 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <metal_bus_find+0x58>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e017      	b.n	8002ce6 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3b24      	subs	r3, #36	; 0x24
 8002cba:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fb0c 	bl	80002e0 <strcmp>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e007      	b.n	8002ce6 <metal_bus_find+0x42>
			continue;
		if (result)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <metal_bus_find+0x3e>
			*result = bus;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	601a      	str	r2, [r3, #0]
		return 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e005      	b.n	8002cf2 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <metal_bus_find+0x5c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d1e3      	bne.n	8002cb6 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8002cee:	f06f 0301 	mvn.w	r3, #1
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	240002ac 	.word	0x240002ac
 8002d00:	240002b4 	.word	0x240002b4

08002d04 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <metal_device_open+0x2e>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <metal_device_open+0x2e>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <metal_device_open+0x2e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8002d32:	f06f 0315 	mvn.w	r3, #21
 8002d36:	e01f      	b.n	8002d78 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8002d38:	f107 0310 	add.w	r3, r7, #16
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff ffb0 	bl	8002ca4 <metal_bus_find>
 8002d44:	6178      	str	r0, [r7, #20]
	if (error)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <metal_device_open+0x4c>
		return error;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	e013      	b.n	8002d78 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <metal_device_open+0x5a>
		return -ENODEV;
 8002d58:	f06f 0312 	mvn.w	r3, #18
 8002d5c:	e00c      	b.n	8002d78 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	6938      	ldr	r0, [r7, #16]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	4798      	blx	r3
 8002d6a:	6178      	str	r0, [r7, #20]
	if (error)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <metal_device_open+0x72>
		return error;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	e000      	b.n	8002d78 <metal_device_open+0x74>

	return 0;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <metal_register_generic_device+0x22>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d902      	bls.n	8002da8 <metal_register_generic_device+0x28>
		return -EINVAL;
 8002da2:	f06f 0315 	mvn.w	r3, #21
 8002da6:	e009      	b.n	8002dbc <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <metal_register_generic_device+0x44>)
 8002dac:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	336c      	adds	r3, #108	; 0x6c
 8002db2:	4619      	mov	r1, r3
 8002db4:	4804      	ldr	r0, [pc, #16]	; (8002dc8 <metal_register_generic_device+0x48>)
 8002db6:	f7ff fef0 	bl	8002b9a <metal_list_add_tail>
			    &device->node);
	return 0;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	240000d8 	.word	0x240000d8
 8002dc8:	240002c4 	.word	0x240002c4

08002dcc <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <metal_generic_dev_open+0x58>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e017      	b.n	8002e10 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3b6c      	subs	r3, #108	; 0x6c
 8002de4:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fa77 	bl	80002e0 <strcmp>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e007      	b.n	8002e10 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8002e06:	6938      	ldr	r0, [r7, #16]
 8002e08:	f000 f88c 	bl	8002f24 <metal_generic_dev_sys_open>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	e005      	b.n	8002e1c <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <metal_generic_dev_open+0x5c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d1e3      	bne.n	8002de0 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8002e18:	f06f 0312 	mvn.w	r3, #18
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	240002ac 	.word	0x240002ac
 8002e28:	240002c4 	.word	0x240002c4

08002e2c <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d009      	beq.n	8002e56 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e52:	f002 fcc9 	bl	80057e8 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e02f      	b.n	8002ebc <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d114      	bne.n	8002e8c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	4413      	add	r3, r2
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	4413      	add	r3, r2
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7ff feae 	bl	8002be8 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	461a      	mov	r2, r3
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	4413      	add	r3, r2
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	4413      	add	r3, r2
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7ff fea6 	bl	8002c02 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	dbcb      	blt.n	8002e5c <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	e017      	b.n	8002f12 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	461a      	mov	r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4619      	mov	r1, r3
 8002f08:	f7ff fe7b 	bl	8002c02 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	dbe3      	blt.n	8002ee2 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e013      	b.n	8002f5a <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8002f4e:	68b8      	ldr	r0, [r7, #8]
 8002f50:	f000 f81e 	bl	8002f90 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3e6      	bcc.n	8002f32 <metal_generic_dev_sys_open+0xe>
 8002f64:	e000      	b.n	8002f68 <metal_generic_dev_sys_open+0x44>
			break;
 8002f66:	bf00      	nop
	}

	return 0;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8002f7c:	4803      	ldr	r0, [pc, #12]	; (8002f8c <metal_sys_init+0x18>)
 8002f7e:	f7ff fe4d 	bl	8002c1c <metal_bus_register>
	return 0;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	240000d8 	.word	0x240000d8

08002f90 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	613b      	str	r3, [r7, #16]
	if (psize) {
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02c      	beq.n	8003004 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e013      	b.n	8002ff2 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	6819      	ldr	r1, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f001 fd9b 	bl	8004b18 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	d9e2      	bls.n	8002fca <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <metal_list_init>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	int error = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 800303c:	2220      	movs	r2, #32
 800303e:	2100      	movs	r1, #0
 8003040:	4810      	ldr	r0, [pc, #64]	; (8003084 <metal_init+0x54>)
 8003042:	f002 fbdf 	bl	8005804 <memset>

	_metal.common.log_handler   = params->log_handler;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <metal_init+0x54>)
 800304c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	791a      	ldrb	r2, [r3, #4]
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <metal_init+0x54>)
 8003054:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8003056:	480c      	ldr	r0, [pc, #48]	; (8003088 <metal_init+0x58>)
 8003058:	f7ff ffd8 	bl	800300c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 800305c:	480b      	ldr	r0, [pc, #44]	; (800308c <metal_init+0x5c>)
 800305e:	f7ff ffd5 	bl	800300c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8003062:	480b      	ldr	r0, [pc, #44]	; (8003090 <metal_init+0x60>)
 8003064:	f7ff ffd2 	bl	800300c <metal_list_init>

	error = metal_sys_init(params);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff83 	bl	8002f74 <metal_sys_init>
 800306e:	60f8      	str	r0, [r7, #12]
	if (error)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <metal_init+0x4a>
		return error;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	e000      	b.n	800307c <metal_init+0x4c>

	return error;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	240002ac 	.word	0x240002ac
 8003088:	240002b4 	.word	0x240002b4
 800308c:	240002bc 	.word	0x240002bc
 8003090:	240002c4 	.word	0x240002c4

08003094 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d009      	beq.n	80030bc <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d804      	bhi.n	80030bc <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
		: NULL);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	e000      	b.n	80030be <metal_io_virt+0x2a>
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 80030ca:	b5b0      	push	{r4, r5, r7, lr}
 80030cc:	b08a      	sub	sp, #40	; 0x28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
 80030e8:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	605a      	str	r2, [r3, #4]
	io->size = size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003100:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	2b1f      	cmp	r3, #31
 8003106:	d904      	bls.n	8003112 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f04f 32ff 	mov.w	r2, #4294967295
 800310e:	611a      	str	r2, [r3, #16]
 8003110:	e006      	b.n	8003120 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8003112:	2201      	movs	r2, #1
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003124:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8003126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00b      	beq.n	8003144 <metal_io_init+0x7a>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003130:	f103 0418 	add.w	r4, r3, #24
 8003134:	4615      	mov	r5, r2
 8003136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800313a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800313e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003142:	e00a      	b.n	800315a <metal_io_init+0x90>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f103 0418 	add.w	r4, r3, #24
 800314a:	f107 0510 	add.w	r5, r7, #16
 800314e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003152:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003156:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff ff18 	bl	8002f90 <metal_sys_io_mem_map>
}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	; 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bdb0      	pop	{r4, r5, r7, pc}

08003168 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff ff8b 	bl	8003094 <metal_io_virt>
 800317e:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d902      	bls.n	8003194 <metal_io_block_read+0x2c>
		return -ERANGE;
 800318e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8003192:	e05c      	b.n	800324e <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	441a      	add	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d904      	bls.n	80031ac <metal_io_block_read+0x44>
		len = io->size - offset;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	603b      	str	r3, [r7, #0]
	retlen = len;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a1c      	ldr	r4, [r3, #32]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2305      	movs	r3, #5
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	47a0      	blx	r4
 80031ca:	6178      	str	r0, [r7, #20]
 80031cc:	e03e      	b.n	800324c <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 80031ce:	f3bf 8f5b 	dmb	ish
		while ( len && (
 80031d2:	e00c      	b.n	80031ee <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	701a      	strb	r2, [r3, #0]
			dest++;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	3301      	adds	r3, #1
 80031e0:	61bb      	str	r3, [r7, #24]
			ptr++;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
			len--;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	603b      	str	r3, [r7, #0]
		while ( len && (
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d017      	beq.n	8003224 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ea      	bne.n	80031d4 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8003208:	e00c      	b.n	8003224 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	3304      	adds	r3, #4
 8003216:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3304      	adds	r3, #4
 800321c:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3b04      	subs	r3, #4
 8003222:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b03      	cmp	r3, #3
 8003228:	dcef      	bgt.n	800320a <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 800322a:	e00c      	b.n	8003246 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	3301      	adds	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	3b01      	subs	r3, #1
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ef      	bne.n	800322c <metal_io_block_read+0xc4>
	}
	return retlen;
 800324c:	697b      	ldr	r3, [r7, #20]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}

08003256 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8003256:	b590      	push	{r4, r7, lr}
 8003258:	b08b      	sub	sp, #44	; 0x2c
 800325a:	af02      	add	r7, sp, #8
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff ff14 	bl	8003094 <metal_io_virt>
 800326c:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d902      	bls.n	8003282 <metal_io_block_write+0x2c>
		return -ERANGE;
 800327c:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8003280:	e05b      	b.n	800333a <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	441a      	add	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	d904      	bls.n	800329a <metal_io_block_write+0x44>
		len = io->size - offset;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	603b      	str	r3, [r7, #0]
	retlen = len;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d017      	beq.n	80032d6 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	2305      	movs	r3, #5
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	47a0      	blx	r4
 80032b8:	6178      	str	r0, [r7, #20]
 80032ba:	e03d      	b.n	8003338 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	701a      	strb	r2, [r3, #0]
			ptr++;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3301      	adds	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
			source++;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61bb      	str	r3, [r7, #24]
			len--;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	603b      	str	r3, [r7, #0]
		while ( len && (
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ea      	bne.n	80032bc <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e5      	bne.n	80032bc <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80032f0:	e00c      	b.n	800330c <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	3304      	adds	r3, #4
 8003304:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	3b04      	subs	r3, #4
 800330a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b03      	cmp	r3, #3
 8003310:	dcef      	bgt.n	80032f2 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8003312:	e00c      	b.n	800332e <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3301      	adds	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	3301      	adds	r3, #1
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	3b01      	subs	r3, #1
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ef      	bne.n	8003314 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8003334:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8003338:	697b      	ldr	r3, [r7, #20]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}

08003342 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8003342:	b590      	push	{r4, r7, lr}
 8003344:	b08b      	sub	sp, #44	; 0x2c
 8003346:	af02      	add	r7, sp, #8
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff fe9d 	bl	8003094 <metal_io_virt>
 800335a:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	d902      	bls.n	8003370 <metal_io_block_set+0x2e>
		return -ERANGE;
 800336a:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800336e:	e05d      	b.n	800342c <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	441a      	add	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d904      	bls.n	8003388 <metal_io_block_set+0x46>
		len = io->size - offset;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	603b      	str	r3, [r7, #0]
	retlen = len;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003398:	79fa      	ldrb	r2, [r7, #7]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2305      	movs	r3, #5
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	47a0      	blx	r4
 80033a6:	e040      	b.n	800342a <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 80033ac:	2301      	movs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e00a      	b.n	80033c8 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 80033b2:	79fa      	ldrb	r2, [r7, #7]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d9f1      	bls.n	80033b2 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 80033ce:	e008      	b.n	80033e2 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	79fa      	ldrb	r2, [r7, #7]
 80033d4:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	3b01      	subs	r3, #1
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <metal_io_block_set+0xc4>
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ee      	bne.n	80033d0 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80033f2:	e008      	b.n	8003406 <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3304      	adds	r3, #4
 80033fe:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	3b04      	subs	r3, #4
 8003404:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b03      	cmp	r3, #3
 800340a:	dcf3      	bgt.n	80033f4 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 800340c:	e008      	b.n	8003420 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	79fa      	ldrb	r2, [r7, #7]
 8003412:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	3301      	adds	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	3b01      	subs	r3, #1
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f3      	bne.n	800340e <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8003426:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800342a:	693b      	ldr	r3, [r7, #16]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3724      	adds	r7, #36	; 0x24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd90      	pop	{r4, r7, pc}

08003434 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8003434:	b40e      	push	{r1, r2, r3}
 8003436:	b480      	push	{r7}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	b003      	add	sp, #12
 800344c:	4770      	bx	lr

0800344e <metal_io_virt>:
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
		: NULL);
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d009      	beq.n	8003476 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d804      	bhi.n	8003476 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4413      	add	r3, r2
 8003474:	e000      	b.n	8003478 <metal_io_virt+0x2a>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d201      	bcs.n	80034a6 <metal_io_virt_to_offset+0x22>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	e001      	b.n	80034aa <metal_io_virt_to_offset+0x26>
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff ffbf 	bl	800344e <metal_io_virt>
 80034d0:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699c      	ldr	r4, [r3, #24]
 80034de:	79fa      	ldrb	r2, [r7, #7]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	47a0      	blx	r4
 80034e8:	4604      	mov	r4, r0
 80034ea:	460d      	mov	r5, r1
 80034ec:	e059      	b.n	80035a2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <metal_io_read+0x62>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10f      	bne.n	800351a <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	f3bf 8f5b 	dmb	ish
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	f3bf 8f5b 	dmb	ish
 800350a:	b2db      	uxtb	r3, r3
 800350c:	76fb      	strb	r3, [r7, #27]
 800350e:	7efb      	ldrb	r3, [r7, #27]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2200      	movs	r2, #0
 8003514:	461c      	mov	r4, r3
 8003516:	4615      	mov	r5, r2
 8003518:	e043      	b.n	80035a2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d012      	beq.n	8003546 <metal_io_read+0x8e>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d10f      	bne.n	8003546 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	f3bf 8f5b 	dmb	ish
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	f3bf 8f5b 	dmb	ish
 8003536:	b29b      	uxth	r3, r3
 8003538:	833b      	strh	r3, [r7, #24]
 800353a:	8b3b      	ldrh	r3, [r7, #24]
 800353c:	b29b      	uxth	r3, r3
 800353e:	2200      	movs	r2, #0
 8003540:	461c      	mov	r4, r3
 8003542:	4615      	mov	r5, r2
 8003544:	e02d      	b.n	80035a2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <metal_io_read+0xb6>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d10d      	bne.n	800356e <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	623b      	str	r3, [r7, #32]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f3bf 8f5b 	dmb	ish
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3bf 8f5b 	dmb	ish
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	461c      	mov	r4, r3
 800356a:	4615      	mov	r5, r2
 800356c:	e019      	b.n	80035a2 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <metal_io_read+0xde>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d10d      	bne.n	8003596 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f3bf 8f5b 	dmb	ish
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f3bf 8f5b 	dmb	ish
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2200      	movs	r2, #0
 8003590:	461c      	mov	r4, r3
 8003592:	4615      	mov	r5, r2
 8003594:	e005      	b.n	80035a2 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <metal_io_read+0xf8>)
 8003598:	4a06      	ldr	r2, [pc, #24]	; (80035b4 <metal_io_read+0xfc>)
 800359a:	21f0      	movs	r1, #240	; 0xf0
 800359c:	4806      	ldr	r0, [pc, #24]	; (80035b8 <metal_io_read+0x100>)
 800359e:	f002 f8bf 	bl	8005720 <__assert_func>
	return 0; /* quiet compiler */
}
 80035a2:	4622      	mov	r2, r4
 80035a4:	462b      	mov	r3, r5
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	3730      	adds	r7, #48	; 0x30
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bdb0      	pop	{r4, r5, r7, pc}
 80035b0:	080068cc 	.word	0x080068cc
 80035b4:	08006a44 	.word	0x08006a44
 80035b8:	080068d0 	.word	0x080068d0

080035bc <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b08f      	sub	sp, #60	; 0x3c
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ff3e 	bl	800344e <metal_io_virt>
 80035d2:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	69dc      	ldr	r4, [r3, #28]
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 80035f4:	e04e      	b.n	8003694 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00e      	beq.n	800361a <metal_io_write+0x5e>
 80035fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10b      	bne.n	800361a <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
 8003606:	783b      	ldrb	r3, [r7, #0]
 8003608:	76fb      	strb	r3, [r7, #27]
 800360a:	7efa      	ldrb	r2, [r7, #27]
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	f3bf 8f5b 	dmb	ish
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	f3bf 8f5b 	dmb	ish
 8003618:	e03c      	b.n	8003694 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00e      	beq.n	800363e <metal_io_write+0x82>
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	2b02      	cmp	r3, #2
 8003624:	d10b      	bne.n	800363e <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	883b      	ldrh	r3, [r7, #0]
 800362c:	833b      	strh	r3, [r7, #24]
 800362e:	8b3a      	ldrh	r2, [r7, #24]
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	f3bf 8f5b 	dmb	ish
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	f3bf 8f5b 	dmb	ish
 800363c:	e02a      	b.n	8003694 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <metal_io_write+0xa6>
 8003644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003646:	2b04      	cmp	r3, #4
 8003648:	d10b      	bne.n	8003662 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f3bf 8f5b 	dmb	ish
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f3bf 8f5b 	dmb	ish
 8003660:	e018      	b.n	8003694 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00e      	beq.n	8003686 <metal_io_write+0xca>
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	2b04      	cmp	r3, #4
 800366c:	d10b      	bne.n	8003686 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f3bf 8f5b 	dmb	ish
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f5b 	dmb	ish
 8003684:	e006      	b.n	8003694 <metal_io_write+0xd8>
		metal_assert (0);
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <metal_io_write+0xe0>)
 8003688:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <metal_io_write+0xe4>)
 800368a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800368e:	4805      	ldr	r0, [pc, #20]	; (80036a4 <metal_io_write+0xe8>)
 8003690:	f002 f846 	bl	8005720 <__assert_func>
}
 8003694:	bf00      	nop
 8003696:	3734      	adds	r7, #52	; 0x34
 8003698:	46bd      	mov	sp, r7
 800369a:	bd90      	pop	{r4, r7, pc}
 800369c:	080068cc 	.word	0x080068cc
 80036a0:	08006a54 	.word	0x08006a54
 80036a4:	080068d0 	.word	0x080068d0

080036a8 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f002 f889 	bl	80057c8 <malloc>
 80036b6:	4603      	mov	r3, r0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	free(ptr);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f002 f885 	bl	80057d8 <free>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3307      	adds	r3, #7
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff ffde 	bl	80036a8 <metal_allocate_memory>
 80036ec:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	2100      	movs	r1, #0
 80036f8:	68b8      	ldr	r0, [r7, #8]
 80036fa:	f002 f883 	bl	8005804 <memset>
	}

	return vqs;
 80036fe:	68bb      	ldr	r3, [r7, #8]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	891b      	ldrh	r3, [r3, #8]
 8003714:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	3b18      	subs	r3, #24
 8003720:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	429a      	cmp	r2, r3
 800372a:	d905      	bls.n	8003738 <rproc_virtio_virtqueue_notify+0x30>
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <rproc_virtio_virtqueue_notify+0x5c>)
 800372e:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <rproc_virtio_virtqueue_notify+0x60>)
 8003730:	2133      	movs	r1, #51	; 0x33
 8003732:	480e      	ldr	r0, [pc, #56]	; (800376c <rproc_virtio_virtqueue_notify+0x64>)
 8003734:	f001 fff4 	bl	8005720 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	6810      	ldr	r0, [r2, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	6912      	ldr	r2, [r2, #16]
 8003756:	4611      	mov	r1, r2
 8003758:	4798      	blx	r3
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08006918 	.word	0x08006918
 8003768:	08006a24 	.word	0x08006a24
 800376c:	08006934 	.word	0x08006934

08003770 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b18      	subs	r3, #24
 800377c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	3318      	adds	r3, #24
 800378e:	4619      	mov	r1, r3
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fe77 	bl	8003484 <metal_io_virt_to_offset>
 8003796:	4601      	mov	r1, r0
 8003798:	2301      	movs	r3, #1
 800379a:	2205      	movs	r2, #5
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fe8b 	bl	80034b8 <metal_io_read>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4613      	mov	r3, r2
 80037a8:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 80037aa:	7afb      	ldrb	r3, [r7, #11]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b18      	subs	r3, #24
 80037c4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3318      	adds	r3, #24
 80037d6:	4619      	mov	r1, r3
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fe53 	bl	8003484 <metal_io_virt_to_offset>
 80037de:	4601      	mov	r1, r0
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2200      	movs	r2, #0
 80037e4:	461c      	mov	r4, r3
 80037e6:	4615      	mov	r5, r2
 80037e8:	2301      	movs	r3, #1
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2305      	movs	r3, #5
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4622      	mov	r2, r4
 80037f2:	462b      	mov	r3, r5
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff fee1 	bl	80035bc <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	6810      	ldr	r0, [r2, #0]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4611      	mov	r1, r2
 8003808:	4798      	blx	r3
}
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bdb0      	pop	{r4, r5, r7, pc}

08003812 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3b18      	subs	r3, #24
 800381e:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	330c      	adds	r3, #12
 8003830:	4619      	mov	r1, r3
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fe26 	bl	8003484 <metal_io_virt_to_offset>
 8003838:	4601      	mov	r1, r0
 800383a:	2304      	movs	r3, #4
 800383c:	2205      	movs	r2, #5
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff fe3a 	bl	80034b8 <metal_io_read>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800384c:	68bb      	ldr	r3, [r7, #8]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8003856:	b5b0      	push	{r4, r5, r7, lr}
 8003858:	b088      	sub	sp, #32
 800385a:	af02      	add	r7, sp, #8
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b18      	subs	r3, #24
 8003864:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	330c      	adds	r3, #12
 8003876:	4619      	mov	r1, r3
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff fe03 	bl	8003484 <metal_io_virt_to_offset>
 800387e:	4601      	mov	r1, r0
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	461c      	mov	r4, r3
 8003886:	4615      	mov	r5, r2
 8003888:	2304      	movs	r3, #4
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2305      	movs	r3, #5
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4622      	mov	r2, r4
 8003892:	462b      	mov	r3, r5
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff fe91 	bl	80035bc <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	6810      	ldr	r0, [r2, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	4611      	mov	r1, r2
 80038a8:	4798      	blx	r3
}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bdb0      	pop	{r4, r5, r7, pc}

080038b2 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 800390e:	2140      	movs	r1, #64	; 0x40
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff4f 	bl	80037b4 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	; 0x38
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	7e5b      	ldrb	r3, [r3, #25]
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8003938:	2050      	movs	r0, #80	; 0x50
 800393a:	f7ff feb5 	bl	80036a8 <metal_allocate_memory>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8003946:	2300      	movs	r3, #0
 8003948:	e092      	b.n	8003a70 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800394a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fea7 	bl	80036a8 <metal_allocate_memory>
 800395a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8081 	beq.w	8003a66 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8003964:	2250      	movs	r2, #80	; 0x50
 8003966:	2100      	movs	r1, #0
 8003968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800396a:	f001 ff4b 	bl	8005804 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800396e:	2218      	movs	r2, #24
 8003970:	2100      	movs	r1, #0
 8003972:	6a38      	ldr	r0, [r7, #32]
 8003974:	f001 ff46 	bl	8005804 <memset>
	vdev = &rpvdev->vdev;
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	3318      	adds	r3, #24
 800397c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800397e:	2300      	movs	r3, #0
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
 8003982:	e025      	b.n	80039d0 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8003988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3318      	adds	r3, #24
 8003994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003996:	4413      	add	r3, r2
 8003998:	3304      	adds	r3, #4
 800399a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 80039a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039aa:	f7ff fe94 	bl	80036d6 <virtqueue_allocate>
 80039ae:	6178      	str	r0, [r7, #20]
		if (!vq)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d031      	beq.n	8003a1a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 80039b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	461a      	mov	r2, r3
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	4413      	add	r3, r2
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	3301      	adds	r3, #1
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
 80039d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3d5      	bcc.n	8003984 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039dc:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e2:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	6a3a      	ldr	r2, [r7, #32]
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ee:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a06:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <rproc_virtio_create_vdev+0x158>)
 8003a12:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	3318      	adds	r3, #24
 8003a18:	e02a      	b.n	8003a70 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8003a1a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a20:	e019      	b.n	8003a56 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8003a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	4413      	add	r3, r2
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8003a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	461a      	mov	r2, r3
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	4413      	add	r3, r2
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fe38 	bl	80036c0 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8003a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a52:	3301      	adds	r3, #1
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d3e1      	bcc.n	8003a22 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8003a5e:	6a38      	ldr	r0, [r7, #32]
 8003a60:	f7ff fe2e 	bl	80036c0 <metal_free_memory>
 8003a64:	e000      	b.n	8003a68 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8003a66:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8003a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a6a:	f7ff fe29 	bl	80036c0 <metal_free_memory>
	return NULL;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3738      	adds	r7, #56	; 0x38
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	08006a00 	.word	0x08006a00

08003a7c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d302      	bcc.n	8003a9e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8003a98:	f06f 0301 	mvn.w	r3, #1
 8003a9c:	e019      	b.n	8003ad2 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ace:	609a      	str	r2, [r3, #8]

	return 0;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8003aee:	f06f 0315 	mvn.w	r3, #21
 8003af2:	e02c      	b.n	8003b4e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d101      	bne.n	8003b02 <rproc_virtio_notified+0x24>
		return 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e025      	b.n	8003b4e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e01a      	b.n	8003b44 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	440b      	add	r3, r1
 8003b1e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d003      	beq.n	8003b32 <rproc_virtio_notified+0x54>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d105      	bne.n	8003b3e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8003b38:	68b8      	ldr	r0, [r7, #8]
 8003b3a:	f001 fb58 	bl	80051ee <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3e0      	bcc.n	8003b0e <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fe02 	bl	8003770 <rproc_virtio_get_status>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8003b7a:	e7f4      	b.n	8003b66 <rproc_virtio_wait_remote_ready+0x10>
		return;
 8003b7c:	bf00      	nop
 8003b7e:	e000      	b.n	8003b82 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8003b80:	bf00      	nop
	}
}
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8003b90:	bf00      	nop
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	4611      	mov	r1, r2
 8003b98:	f3bf 8f5b 	dmb	ish
 8003b9c:	e8d3 2f4f 	ldrexb	r2, [r3]
 8003ba0:	e8c3 1f40 	strexb	r0, r1, [r3]
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d1f9      	bne.n	8003b9c <__metal_mutex_acquire+0x14>
 8003ba8:	f3bf 8f5b 	dmb	ish
 8003bac:	b2d3      	uxtb	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ef      	bne.n	8003b92 <__metal_mutex_acquire+0xa>
		;
	}
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f3bf 8f5b 	dmb	ish
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	f3bf 8f5b 	dmb	ish
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ffcc 	bl	8003b88 <__metal_mutex_acquire>
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ffdd 	bl	8003bc0 <__metal_mutex_release>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <metal_list_add_before>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <metal_list_add_tail>:
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ffdd 	bl	8003c0e <metal_list_add_before>
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6852      	ldr	r2, [r2, #4]
 8003c6c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	009a      	lsls	r2, r3, #2
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	f002 021f 	and.w	r2, r2, #31
 8003cae:	2001      	movs	r0, #1
 8003cb0:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4403      	add	r3, r0
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8003cec:	4013      	ands	r3, r2
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	f002 021f 	and.w	r2, r2, #31
 8003d16:	2001      	movs	r0, #1
 8003d18:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4403      	add	r3, r0
 8003d24:	400a      	ands	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ffc2 	bl	8003cca <metal_bitmap_is_bit_set>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e002      	b.n	8003d72 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d207      	bcs.n	8003d8a <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff ffd8 	bl	8003d34 <metal_bitmap_is_bit_clear>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8003d8a:	697b      	ldr	r3, [r7, #20]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <rpmsg_init_ept>:
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f002 f925 	bl	8005ff8 <strncpy>
	ept->addr = src;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	2100      	movs	r1, #0
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ffb8 	bl	8003d5a <metal_bitmap_next_clear_bit>
 8003dea:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d206      	bcs.n	8003e02 <rpmsg_get_address+0x34>
		addr = nextbit;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff48 	bl	8003c92 <metal_bitmap_set_bit>
	}

	return addr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	da03      	bge.n	8003e28 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff ff69 	bl	8003cfa <metal_bitmap_clear_bit>
}
 8003e28:	bf00      	nop
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	da05      	bge.n	8003e50 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff ff3f 	bl	8003cca <metal_bitmap_is_bit_set>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	e000      	b.n	8003e52 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8003e50:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <rpmsg_is_address_set+0x2c>)
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	fffff82d 	.word	0xfffff82d

08003e60 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	da05      	bge.n	8003e80 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff ff0b 	bl	8003c92 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8003e80:	4b02      	ldr	r3, [pc, #8]	; (8003e8c <rpmsg_set_address+0x2c>)
	}
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	fffff82d 	.word	0xfffff82d

08003e90 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b089      	sub	sp, #36	; 0x24
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <rpmsg_send_offchannel_raw+0x2a>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <rpmsg_send_offchannel_raw+0x2a>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <rpmsg_send_offchannel_raw+0x2a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d101      	bne.n	8003ebe <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <rpmsg_send_offchannel_raw+0x60>)
 8003ebc:	e014      	b.n	8003ee8 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00c      	beq.n	8003ee6 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	6978      	ldr	r0, [r7, #20]
 8003ee0:	47a0      	blx	r4
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	e000      	b.n	8003ee8 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8003ee6:	4b02      	ldr	r3, [pc, #8]	; (8003ef0 <rpmsg_send_offchannel_raw+0x60>)
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd90      	pop	{r4, r7, pc}
 8003ef0:	fffff82d 	.word	0xfffff82d

08003ef4 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b090      	sub	sp, #64	; 0x40
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	f107 030c 	add.w	r3, r7, #12
 8003f0e:	2220      	movs	r2, #32
 8003f10:	4618      	mov	r0, r3
 8003f12:	f002 f871 	bl	8005ff8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f1a:	f107 030c 	add.w	r3, r7, #12
 8003f1e:	2201      	movs	r2, #1
 8003f20:	9201      	str	r2, [sp, #4]
 8003f22:	2228      	movs	r2, #40	; 0x28
 8003f24:	9200      	str	r2, [sp, #0]
 8003f26:	2235      	movs	r2, #53	; 0x35
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ffb1 	bl	8003e90 <rpmsg_send_offchannel_raw>
 8003f2e:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da01      	bge.n	8003f3a <rpmsg_send_ns_message+0x46>
		return ret;
 8003f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f38:	e000      	b.n	8003f3c <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3738      	adds	r7, #56	; 0x38
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e04b      	b.n	8003ff2 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3b34      	subs	r3, #52	; 0x34
 8003f62:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d006      	beq.n	8003f7a <rpmsg_get_endpoint+0x36>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d101      	bne.n	8003f7a <rpmsg_get_endpoint+0x36>
			return ept;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	e040      	b.n	8003ffc <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d106      	bne.n	8003f92 <rpmsg_get_endpoint+0x4e>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d101      	bne.n	8003f92 <rpmsg_get_endpoint+0x4e>
			return ept;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	e034      	b.n	8003ffc <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f002 f816 	bl	8005fd0 <strncmp>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d018      	beq.n	8003fea <rpmsg_get_endpoint+0xa6>
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d015      	beq.n	8003fea <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d006      	beq.n	8003fd4 <rpmsg_get_endpoint+0x90>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d101      	bne.n	8003fd4 <rpmsg_get_endpoint+0x90>
			return ept;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	e013      	b.n	8003ffc <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d107      	bne.n	8003fec <rpmsg_get_endpoint+0xa8>
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d102      	bne.n	8003fec <rpmsg_get_endpoint+0xa8>
			return ept;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	e008      	b.n	8003ffc <rpmsg_get_endpoint+0xb8>
			continue;
 8003fea:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d1af      	bne.n	8003f5a <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d008      	beq.n	8004034 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800402c:	461a      	mov	r2, r3
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	f7ff feec 	bl	8003e0c <rpmsg_release_address>
	metal_list_del(&ept->node);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3334      	adds	r3, #52	; 0x34
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fe0f 	bl	8003c5c <metal_list_del>
 800403e:	e000      	b.n	8004042 <rpmsg_unregister_endpoint+0x3e>
		return;
 8004040:	bf00      	nop
}
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	3334      	adds	r3, #52	; 0x34
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f7ff fdee 	bl	8003c42 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	613b      	str	r3, [r7, #16]

	if (!ept)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8004088:	4b37      	ldr	r3, [pc, #220]	; (8004168 <rpmsg_create_ept+0xf8>)
 800408a:	e068      	b.n	800415e <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3358      	adds	r3, #88	; 0x58
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fda6 	bl	8003be2 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d018      	beq.n	80040d0 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3348      	adds	r3, #72	; 0x48
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fec2 	bl	8003e30 <rpmsg_is_address_set>
 80040ac:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d107      	bne.n	80040c4 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3348      	adds	r3, #72	; 0x48
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fecf 	bl	8003e60 <rpmsg_set_address>
 80040c2:	e00c      	b.n	80040de <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	dd40      	ble.n	800414c <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
			goto ret_status;
 80040ce:	e040      	b.n	8004152 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	3348      	adds	r3, #72	; 0x48
 80040d4:	2180      	movs	r1, #128	; 0x80
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fe79 	bl	8003dce <rpmsg_get_address>
 80040dc:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fe51 	bl	8003d94 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	68b8      	ldr	r0, [r7, #8]
 80040f6:	f7ff ffa7 	bl	8004048 <rpmsg_register_endpoint>
 80040fa:	6178      	str	r0, [r7, #20]
	if (status < 0)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da06      	bge.n	8004110 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3348      	adds	r3, #72	; 0x48
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fe7e 	bl	8003e0c <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11c      	bne.n	8004150 <rpmsg_create_ept+0xe0>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d117      	bne.n	8004150 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	3358      	adds	r3, #88	; 0x58
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fd67 	bl	8003bf8 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 800412a:	2100      	movs	r1, #0
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fee1 	bl	8003ef4 <rpmsg_send_ns_message>
 8004132:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	3358      	adds	r3, #88	; 0x58
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fd52 	bl	8003be2 <metal_mutex_acquire>
		if (status)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ff5d 	bl	8004004 <rpmsg_unregister_endpoint>
 800414a:	e002      	b.n	8004152 <rpmsg_create_ept+0xe2>
			goto ret_status;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8004150:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3358      	adds	r3, #88	; 0x58
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fd4e 	bl	8003bf8 <metal_mutex_release>
	return status;
 800415c:	697b      	ldr	r3, [r7, #20]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	fffff82d 	.word	0xfffff82d

0800416c <__metal_cache_invalidate>:
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fcc2 	bl	8004b02 <metal_machine_cache_invalidate>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <metal_cache_invalidate>:
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ffea 	bl	800416c <__metal_cache_invalidate>
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ffee 	bl	80041a0 <__metal_sleep_usec>
 80041c4:	4603      	mov	r3, r0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <metal_list_init>:
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <metal_io_virt_to_offset>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d201      	bcs.n	8004212 <metal_io_virt_to_offset+0x22>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	e001      	b.n	8004216 <metal_io_virt_to_offset+0x26>
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <__metal_mutex_init>:
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	461a      	mov	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f3bf 8f5b 	dmb	ish
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f3bf 8f5b 	dmb	ish
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <__metal_mutex_acquire>:
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8004256:	bf00      	nop
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	4611      	mov	r1, r2
 800425e:	f3bf 8f5b 	dmb	ish
 8004262:	e8d3 2f4f 	ldrexb	r2, [r3]
 8004266:	e8c3 1f40 	strexb	r0, r1, [r3]
 800426a:	2800      	cmp	r0, #0
 800426c:	d1f9      	bne.n	8004262 <__metal_mutex_acquire+0x14>
 800426e:	f3bf 8f5b 	dmb	ish
 8004272:	b2d3      	uxtb	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ef      	bne.n	8004258 <__metal_mutex_acquire+0xa>
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <__metal_mutex_release>:
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f3bf 8f5b 	dmb	ish
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	f3bf 8f5b 	dmb	ish
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <metal_mutex_init>:
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff ffb6 	bl	8004222 <__metal_mutex_init>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <metal_mutex_acquire>:
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff ffc1 	bl	800424e <__metal_mutex_acquire>
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <metal_mutex_release>:
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ffd2 	bl	8004286 <__metal_mutex_release>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <rpmsg_init_ept>:
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 fe7a 	bl	8005ff8 <strncpy>
	ept->addr = src;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004330:	699b      	ldr	r3, [r3, #24]
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004356:	78f9      	ldrb	r1, [r7, #3]
 8004358:	4610      	mov	r0, r2
 800435a:	4798      	blx	r3
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
 800437c:	4603      	mov	r3, r0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800439a:	4610      	mov	r0, r2
 800439c:	4798      	blx	r3
 800439e:	4603      	mov	r3, r0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	f000 fbf2 	bl	8004bac <virtio_create_virtqueues>
 80043c8:	4603      	mov	r3, r0
					callbacks);
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	2100      	movs	r1, #0
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff fdad 	bl	8003f44 <rpmsg_get_endpoint>
 80043ea:	4603      	mov	r3, r0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d901      	bls.n	800440c <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	e00f      	b.n	800442c <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6899      	ldr	r1, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	1acb      	subs	r3, r1, r3
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	605a      	str	r2, [r3, #4]

	return buffer;
 800442a:	68fb      	ldr	r3, [r7, #12]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01d      	beq.n	8004486 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <rpmsg_virtio_init_shm_pool+0x2c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f023 0303 	bic.w	r3, r3, #3
 8004460:	3304      	adds	r3, #4
 8004462:	e000      	b.n	8004466 <rpmsg_virtio_init_shm_pool+0x2e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <rpmsg_virtio_init_shm_pool+0x46>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	3304      	adds	r3, #4
 800447c:	e000      	b.n	8004480 <rpmsg_virtio_init_shm_pool+0x48>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	6053      	str	r3, [r2, #4]
 8004484:	e000      	b.n	8004488 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8004486:	bf00      	nop
}
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08a      	sub	sp, #40	; 0x28
 8004496:	af02      	add	r7, sp, #8
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff ff3f 	bl	8004324 <rpmsg_virtio_get_role>
 80044a6:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80044ba:	f107 0114 	add.w	r1, r7, #20
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2301      	movs	r3, #1
 80044c4:	2200      	movs	r2, #0
 80044c6:	f000 fcc0 	bl	8004e4a <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 80044ca:	bf00      	nop
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b08a      	sub	sp, #40	; 0x28
 80044d6:	af02      	add	r7, sp, #8
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ff1f 	bl	8004324 <rpmsg_virtio_get_role>
 80044e6:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80044fa:	f107 0114 	add.w	r1, r7, #20
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2301      	movs	r3, #1
 8004504:	2200      	movs	r2, #0
 8004506:	f000 fca0 	bl	8004e4a <virtqueue_add_buffer>
 800450a:	4603      	mov	r3, r0
 800450c:	e000      	b.n	8004510 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fefd 	bl	8004324 <rpmsg_virtio_get_role>
 800452a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d116      	bne.n	8004564 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fcc7 	bl	8004ed2 <virtqueue_get_buffer>
 8004544:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff4d 	bl	80043f4 <rpmsg_virtio_shm_pool_get_buffer>
 800455a:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004562:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8004564:	697b      	ldr	r3, [r7, #20]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fed2 	bl	8004324 <rpmsg_virtio_get_role>
 8004580:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d107      	bne.n	800459c <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fc9c 	bl	8004ed2 <virtqueue_get_buffer>
 800459a:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4619      	mov	r1, r3
 80045a8:	6978      	ldr	r0, [r7, #20]
 80045aa:	f7ff fdec 	bl	8004186 <metal_cache_invalidate>
	}

	return data;
 80045ae:	697b      	ldr	r3, [r7, #20]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff feaf 	bl	8004324 <rpmsg_virtio_get_role>
 80045c6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 80045d2:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80045d6:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b090      	sub	sp, #64	; 0x40
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 80045fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004600:	f7ff feb0 	bl	8004364 <rpmsg_virtio_get_status>
 8004604:	4603      	mov	r3, r0
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8004612:	4b45      	ldr	r3, [pc, #276]	; (8004728 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8004614:	e083      	b.n	800471e <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800461c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
 8004622:	e001      	b.n	8004628 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3358      	adds	r3, #88	; 0x58
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fe46 	bl	80042be <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8004632:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004634:	f7ff ffc0 	bl	80045b8 <_rpmsg_virtio_get_buffer_size>
 8004638:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 800463a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	429a      	cmp	r2, r3
 8004640:	dc08      	bgt.n	8004654 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8004642:	f107 0216 	add.w	r2, r7, #22
 8004646:	f107 0310 	add.w	r3, r7, #16
 800464a:	4619      	mov	r1, r3
 800464c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800464e:	f7ff ff63 	bl	8004518 <rpmsg_virtio_get_tx_buffer>
 8004652:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3358      	adds	r3, #88	; 0x58
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fe3b 	bl	80042d4 <metal_mutex_release>
		if (buffer || !tick_count)
 800465e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10e      	bne.n	8004682 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8004670:	4b2e      	ldr	r3, [pc, #184]	; (800472c <rpmsg_virtio_send_offchannel_raw+0x148>)
 8004672:	e054      	b.n	800471e <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8004674:	200a      	movs	r0, #10
 8004676:	f7ff fd9e 	bl	80041b6 <metal_sleep_usec>
		tick_count--;
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	3b01      	subs	r3, #1
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8004680:	e7d2      	b.n	8004628 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8004682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800468a:	e048      	b.n	800471e <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8004694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004696:	b29b      	uxth	r3, r3
 8004698:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 80046a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a8:	f7ff fda2 	bl	80041f0 <metal_io_virt_to_offset>
 80046ac:	4601      	mov	r1, r0
 80046ae:	f107 0218 	add.w	r2, r7, #24
 80046b2:	2310      	movs	r3, #16
 80046b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b6:	f7fe fdce 	bl	8003256 <metal_io_block_write>
 80046ba:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d000      	beq.n	80046c4 <rpmsg_virtio_send_offchannel_raw+0xe0>
 80046c2:	e7fe      	b.n	80046c2 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	3310      	adds	r3, #16
 80046c8:	4619      	mov	r1, r3
 80046ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046cc:	f7ff fd90 	bl	80041f0 <metal_io_virt_to_offset>
 80046d0:	4601      	mov	r1, r0
 80046d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d8:	f7fe fdbd 	bl	8003256 <metal_io_block_write>
 80046dc:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 80046de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d000      	beq.n	80046e8 <rpmsg_virtio_send_offchannel_raw+0x104>
 80046e6:	e7fe      	b.n	80046e6 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3358      	adds	r3, #88	; 0x58
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fde6 	bl	80042be <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	8afb      	ldrh	r3, [r7, #22]
 80046f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046fa:	f7ff feea 	bl	80044d2 <rpmsg_virtio_enqueue_buffer>
 80046fe:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2b00      	cmp	r3, #0
 8004704:	d000      	beq.n	8004708 <rpmsg_virtio_send_offchannel_raw+0x124>
 8004706:	e7fe      	b.n	8004706 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fc5a 	bl	8004fc6 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3358      	adds	r3, #88	; 0x58
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fddc 	bl	80042d4 <metal_mutex_release>

	return size;
 800471c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800471e:	4618      	mov	r0, r3
 8004720:	3740      	adds	r7, #64	; 0x40
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	fffff82c 	.word	0xfffff82c
 800472c:	fffff82b 	.word	0xfffff82b
 8004730:	fffff82e 	.word	0xfffff82e

08004734 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b08d      	sub	sp, #52	; 0x34
 800474c:	af02      	add	r7, sp, #8
 800474e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	3358      	adds	r3, #88	; 0x58
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fdaa 	bl	80042be <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800476a:	f107 020a 	add.w	r2, r7, #10
 800476e:	f107 030c 	add.w	r3, r7, #12
 8004772:	4619      	mov	r1, r3
 8004774:	69f8      	ldr	r0, [r7, #28]
 8004776:	f7ff fefa 	bl	800456e <rpmsg_virtio_get_rx_buffer>
 800477a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3358      	adds	r3, #88	; 0x58
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fda7 	bl	80042d4 <metal_mutex_release>

	while (rp_hdr) {
 8004786:	e04c      	b.n	8004822 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	3358      	adds	r3, #88	; 0x58
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fd96 	bl	80042be <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4619      	mov	r1, r3
 8004798:	69b8      	ldr	r0, [r7, #24]
 800479a:	f7ff fe1a 	bl	80043d2 <rpmsg_get_ept_from_addr>
 800479e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	3358      	adds	r3, #88	; 0x58
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fd95 	bl	80042d4 <metal_mutex_release>

		if (!ept)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d03c      	beq.n	800482a <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d103      	bne.n	80047c2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	899b      	ldrh	r3, [r3, #12]
 80047d0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80047d2:	4618      	mov	r0, r3
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	4613      	mov	r3, r2
 80047e0:	4602      	mov	r2, r0
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	47a0      	blx	r4
 80047e6:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d000      	beq.n	80047f0 <rpmsg_virtio_rx_callback+0xa8>
 80047ee:	e7fe      	b.n	80047ee <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	3358      	adds	r3, #88	; 0x58
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fd62 	bl	80042be <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	897b      	ldrh	r3, [r7, #10]
 80047fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004800:	69f8      	ldr	r0, [r7, #28]
 8004802:	f7ff fe46 	bl	8004492 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8004806:	f107 020a 	add.w	r2, r7, #10
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	4619      	mov	r1, r3
 8004810:	69f8      	ldr	r0, [r7, #28]
 8004812:	f7ff feac 	bl	800456e <rpmsg_virtio_get_rx_buffer>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	3358      	adds	r3, #88	; 0x58
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fd59 	bl	80042d4 <metal_mutex_release>
	while (rp_hdr) {
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1af      	bne.n	8004788 <rpmsg_virtio_rx_callback+0x40>
 8004828:	e000      	b.n	800482c <rpmsg_virtio_rx_callback+0xe4>
			return;
 800482a:	bf00      	nop
	}
}
 800482c:	372c      	adds	r7, #44	; 0x2c
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}

08004832 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b092      	sub	sp, #72	; 0x48
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8004846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800484a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b28      	cmp	r3, #40	; 0x28
 8004858:	d001      	beq.n	800485e <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800485a:	2300      	movs	r3, #0
 800485c:	e057      	b.n	800490e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8004860:	4619      	mov	r1, r3
 8004862:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004864:	f7ff fcc4 	bl	80041f0 <metal_io_virt_to_offset>
 8004868:	4601      	mov	r1, r0
 800486a:	f107 0210 	add.w	r2, r7, #16
 800486e:	2320      	movs	r3, #32
 8004870:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004872:	f7fe fc79 	bl	8003168 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800487c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487e:	3358      	adds	r3, #88	; 0x58
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fd1c 	bl	80042be <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8004886:	f107 0110 	add.w	r1, r7, #16
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	f04f 32ff 	mov.w	r2, #4294967295
 8004890:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004892:	f7ff fb57 	bl	8003f44 <rpmsg_get_endpoint>
 8004896:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d017      	beq.n	80048d4 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 80048b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b4:	3358      	adds	r3, #88	; 0x58
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fd0c 	bl	80042d4 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d024      	beq.n	800490c <rpmsg_virtio_ns_callback+0xda>
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	4798      	blx	r3
 80048d2:	e01b      	b.n	800490c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d110      	bne.n	80048fc <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 80048da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048dc:	3358      	adds	r3, #88	; 0x58
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fcf8 	bl	80042d4 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 80048e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00f      	beq.n	800490c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 80048ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f107 0110 	add.w	r1, r7, #16
 80048f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80048f8:	4798      	blx	r3
 80048fa:	e007      	b.n	800490c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004900:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8004902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004904:	3358      	adds	r3, #88	; 0x58
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fce4 	bl	80042d4 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3748      	adds	r7, #72	; 0x48
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b094      	sub	sp, #80	; 0x50
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 800492a:	2264      	movs	r2, #100	; 0x64
 800492c:	2100      	movs	r1, #0
 800492e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004930:	f000 ff68 	bl	8005804 <memset>
	metal_mutex_init(&rdev->lock);
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	3358      	adds	r3, #88	; 0x58
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fcb5 	bl	80042a8 <metal_mutex_init>
	rvdev->vdev = vdev;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	4a5d      	ldr	r2, [pc, #372]	; (8004ac8 <rpmsg_init_vdev+0x1b0>)
 8004954:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fce4 	bl	8004324 <rpmsg_virtio_get_role>
 800495c:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	2b00      	cmp	r3, #0
 8004962:	d120      	bne.n	80049a6 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8004964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800496a:	4b58      	ldr	r3, [pc, #352]	; (8004acc <rpmsg_init_vdev+0x1b4>)
 800496c:	e0a7      	b.n	8004abe <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8004976:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <rpmsg_init_vdev+0x1b8>)
 8004978:	e0a1      	b.n	8004abe <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800497e:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 8004980:	4b54      	ldr	r3, [pc, #336]	; (8004ad4 <rpmsg_init_vdev+0x1bc>)
 8004982:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8004984:	4b54      	ldr	r3, [pc, #336]	; (8004ad8 <rpmsg_init_vdev+0x1c0>)
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8004988:	4b54      	ldr	r3, [pc, #336]	; (8004adc <rpmsg_init_vdev+0x1c4>)
 800498a:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800498c:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <rpmsg_init_vdev+0x1c8>)
 800498e:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	3318      	adds	r3, #24
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 80049ac:	f107 0220 	add.w	r2, r7, #32
 80049b0:	f107 0318 	add.w	r3, r7, #24
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	2202      	movs	r2, #2
 80049ba:	2100      	movs	r1, #0
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fcf3 	bl	80043a8 <rpmsg_virtio_create_virtqueues>
 80049c2:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 80049c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <rpmsg_init_vdev+0xb6>
		return status;
 80049ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049cc:	e077      	b.n	8004abe <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80049ce:	2300      	movs	r3, #0
 80049d0:	643b      	str	r3, [r7, #64]	; 0x40
 80049d2:	e00f      	b.n	80049f4 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	3301      	adds	r3, #1
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
 80049f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d9ec      	bls.n	80049d4 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80049fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d137      	bne.n	8004a70 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8004a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a04:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8004a06:	2300      	movs	r3, #0
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0a:	e02a      	b.n	8004a62 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 8004a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004a12:	f7ff fcef 	bl	80043f4 <rpmsg_virtio_shm_pool_get_buffer>
 8004a16:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <rpmsg_init_vdev+0x1b8>)
 8004a20:	e04d      	b.n	8004abe <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8004a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a28:	6838      	ldr	r0, [r7, #0]
 8004a2a:	f7ff fbe1 	bl	80041f0 <metal_io_virt_to_offset>
 8004a2e:	4601      	mov	r1, r0
 8004a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a34:	2200      	movs	r2, #0
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	f7fe fc83 	bl	8003342 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004a40:	f107 0110 	add.w	r1, r7, #16
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f000 f9fd 	bl	8004e4a <virtqueue_add_buffer>
 8004a50:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8004a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <rpmsg_init_vdev+0x144>
				return status;
 8004a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5a:	e030      	b.n	8004abe <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	3301      	adds	r3, #1
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a66:	895b      	ldrh	r3, [r3, #10]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d3cd      	bcc.n	8004a0c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fbab 	bl	80041ce <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fc84 	bl	8004386 <rpmsg_virtio_get_features>
 8004a7e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8004a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d011      	beq.n	8004aae <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	f103 0008 	add.w	r0, r3, #8
 8004a90:	2300      	movs	r3, #0
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <rpmsg_init_vdev+0x1cc>)
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2335      	movs	r3, #53	; 0x35
 8004a9a:	2235      	movs	r2, #53	; 0x35
 8004a9c:	4912      	ldr	r1, [pc, #72]	; (8004ae8 <rpmsg_init_vdev+0x1d0>)
 8004a9e:	f7ff fc24 	bl	80042ea <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004aaa:	f7ff facd 	bl	8004048 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d103      	bne.n	8004abc <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fc41 	bl	800433e <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8004abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3748      	adds	r7, #72	; 0x48
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	080045e5 	.word	0x080045e5
 8004acc:	fffff82d 	.word	0xfffff82d
 8004ad0:	fffff82e 	.word	0xfffff82e
 8004ad4:	080069bc 	.word	0x080069bc
 8004ad8:	080069c4 	.word	0x080069c4
 8004adc:	08004749 	.word	0x08004749
 8004ae0:	08004735 	.word	0x08004735
 8004ae4:	08004833 	.word	0x08004833
 8004ae8:	080069cc 	.word	0x080069cc

08004aec <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3303      	adds	r3, #3
 8004b48:	005a      	lsls	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	1e5a      	subs	r2, r3, #1
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	425b      	negs	r3, r3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	3306      	adds	r3, #6
 8004b6a:	60fb      	str	r3, [r7, #12]

	return size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <metal_io_virt_to_offset>:
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d201      	bcs.n	8004b9c <metal_io_virt_to_offset+0x22>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	e001      	b.n	8004ba0 <metal_io_virt_to_offset+0x26>
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b091      	sub	sp, #68	; 0x44
 8004bb0:	af04      	add	r7, sp, #16
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d902      	bls.n	8004bce <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8004bc8:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8004bcc:	e053      	b.n	8004c76 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8004bce:	2300      	movs	r3, #0
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd2:	e04b      	b.n	8004c6c <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bda:	4613      	mov	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4413      	add	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	440b      	add	r3, r1
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	3304      	adds	r3, #4
 8004bea:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d118      	bne.n	8004c26 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	69f8      	ldr	r0, [r7, #28]
 8004c02:	f7ff ffba 	bl	8004b7a <metal_io_virt_to_offset>
 8004c06:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4619      	mov	r1, r3
 8004c14:	4610      	mov	r0, r2
 8004c16:	f7ff ff8d 	bl	8004b34 <vring_size>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	69b9      	ldr	r1, [r7, #24]
 8004c20:	69f8      	ldr	r0, [r7, #28]
 8004c22:	f7fe fb8e 	bl	8003342 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	b298      	uxth	r0, r3
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	4413      	add	r3, r2
 8004c32:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c3a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8004c3c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8004c42:	6a12      	ldr	r2, [r2, #32]
 8004c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c46:	6809      	ldr	r1, [r1, #0]
 8004c48:	9102      	str	r1, [sp, #8]
 8004c4a:	9201      	str	r2, [sp, #4]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	4622      	mov	r2, r4
 8004c52:	4601      	mov	r1, r0
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8c4 	bl	8004de2 <virtqueue_create>
 8004c5a:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <virtio_create_virtqueues+0xba>
			return ret;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	e007      	b.n	8004c76 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	3301      	adds	r3, #1
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d3af      	bcc.n	8004bd4 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3734      	adds	r7, #52	; 0x34
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}

08004c7e <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	441a      	add	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	3304      	adds	r3, #4
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	425b      	negs	r3, r3
 8004cbc:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	60da      	str	r2, [r3, #12]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	80bb      	strh	r3, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8004ce2:	88ba      	ldrh	r2, [r7, #4]
 8004ce4:	88fb      	ldrh	r3, [r7, #6]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8004cee:	88b9      	ldrh	r1, [r7, #4]
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	1acb      	subs	r3, r1, r3
 8004cf4:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	bf34      	ite	cc
 8004cfa:	2301      	movcc	r3, #1
 8004cfc:	2300      	movcs	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <metal_io_virt_to_offset>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d201      	bcs.n	8004d2e <metal_io_virt_to_offset+0x22>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	e001      	b.n	8004d32 <metal_io_virt_to_offset+0x26>
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <metal_io_phys>:
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8004d4c:	2b1f      	cmp	r3, #31
 8004d4e:	d805      	bhi.n	8004d5c <metal_io_phys+0x1e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	e000      	b.n	8004d5e <metal_io_phys+0x20>
 8004d5c:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8004d5e:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d010      	beq.n	8004d8a <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d80b      	bhi.n	8004d8a <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6919      	ldr	r1, [r3, #16]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8004d86:	4413      	add	r3, r2
 8004d88:	e001      	b.n	8004d8e <metal_io_phys+0x50>
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <metal_io_virt_to_phys>:
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff ffb0 	bl	8004d0c <metal_io_virt_to_offset>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ffc4 	bl	8004d3e <metal_io_phys>
 8004db6:	4603      	mov	r3, r0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff ffe1 	bl	8004d9a <metal_io_virt_to_phys>
 8004dd8:	4603      	mov	r3, r0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	460b      	mov	r3, r1
 8004df0:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d121      	bne.n	8004e40 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	897a      	ldrh	r2, [r7, #10]
 8004e0c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	891a      	ldrh	r2, [r3, #8]
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	895a      	ldrh	r2, [r3, #10]
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e28:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e36:	f000 f97a 	bl	800512e <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8004e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e3c:	f000 f899 	bl	8004f72 <virtqueue_disable_cb>
	}

	return (status);
 8004e40:	697b      	ldr	r3, [r7, #20]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b08a      	sub	sp, #40	; 0x28
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d12c      	bne.n	8004ec8 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004e72:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8004e74:	8a7b      	ldrh	r3, [r7, #18]
 8004e76:	3307      	adds	r3, #7
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e84:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	69d9      	ldr	r1, [r3, #28]
 8004e92:	8a7a      	ldrh	r2, [r7, #18]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f8a7 	bl	8004ff2 <vq_ring_add_buffer>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8a3a      	ldrh	r2, [r7, #16]
 8004eac:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8004ebe:	8a7b      	ldrh	r3, [r7, #18]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f966 	bl	8005194 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3720      	adds	r7, #32
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b088      	sub	sp, #32
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d006      	beq.n	8004ef2 <virtqueue_get_buffer+0x20>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	885b      	ldrh	r3, [r3, #2]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d101      	bne.n	8004ef6 <virtqueue_get_buffer+0x24>
		return (NULL);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e039      	b.n	8004f6a <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	b291      	uxth	r1, r2
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	8651      	strh	r1, [r2, #50]	; 0x32
 8004f02:	b21a      	sxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	895b      	ldrh	r3, [r3, #10]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	4013      	ands	r3, r2
 8004f10:	b21b      	sxth	r3, r3
 8004f12:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f18:	8bfb      	ldrh	r3, [r7, #30]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3304      	adds	r3, #4
 8004f20:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8004f22:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	82fb      	strh	r3, [r7, #22]
	if (len)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8004f3a:	8afb      	ldrh	r3, [r7, #22]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f8ae 	bl	80050a0 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8004f44:	8afa      	ldrh	r2, [r7, #22]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3207      	adds	r2, #7
 8004f4a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004f4e:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8004f50:	8afa      	ldrh	r2, [r7, #22]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3207      	adds	r2, #7
 8004f56:	2100      	movs	r1, #0
 8004f58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8bfa      	ldrh	r2, [r7, #30]
 8004f66:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8004f68:	693b      	ldr	r3, [r7, #16]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d010      	beq.n	8004fa8 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	895b      	ldrh	r3, [r3, #10]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8004f9a:	3901      	subs	r1, #1
 8004f9c:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	4413      	add	r3, r2
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8004fa6:	e008      	b.n	8004fba <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	801a      	strh	r2, [r3, #0]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8004fce:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f91d 	bl	8005212 <vq_ring_must_notify_host>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f94d 	bl	800527e <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8004ff2:	b5b0      	push	{r4, r5, r7, lr}
 8004ff4:	b088      	sub	sp, #32
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8005002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	4413      	add	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	837b      	strh	r3, [r7, #26]
 8005012:	e03c      	b.n	800508e <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8005014:	8b7b      	ldrh	r3, [r7, #26]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	4413      	add	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	4413      	add	r3, r2
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4619      	mov	r1, r3
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fec8 	bl	8004dc0 <virtqueue_virt_to_phys>
 8005030:	4603      	mov	r3, r0
 8005032:	2200      	movs	r2, #0
 8005034:	461c      	mov	r4, r3
 8005036:	4615      	mov	r5, r2
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	4413      	add	r3, r2
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	461a      	mov	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2200      	movs	r2, #0
 8005052:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3b01      	subs	r3, #1
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	429a      	cmp	r2, r3
 800505c:	da06      	bge.n	800506c <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	899b      	ldrh	r3, [r3, #12]
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	429a      	cmp	r2, r3
 8005072:	db06      	blt.n	8005082 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	899b      	ldrh	r3, [r3, #12]
 8005078:	f043 0302 	orr.w	r3, r3, #2
 800507c:	b29a      	uxth	r2, r3
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	89db      	ldrh	r3, [r3, #14]
 800508c:	837b      	strh	r3, [r7, #26]
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	dbbe      	blt.n	8005014 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8005096:	8b7b      	ldrh	r3, [r7, #26]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bdb0      	pop	{r4, r5, r7, pc}

080050a0 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	887b      	ldrh	r3, [r7, #2]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	4413      	add	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 80050b8:	887b      	ldrh	r3, [r7, #2]
 80050ba:	3307      	adds	r3, #7
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	889b      	ldrh	r3, [r3, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	889b      	ldrh	r3, [r3, #4]
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	899b      	ldrh	r3, [r3, #12]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d113      	bne.n	8005114 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 80050ec:	e00c      	b.n	8005108 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	89db      	ldrh	r3, [r3, #14]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	4413      	add	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	889b      	ldrh	r3, [r3, #4]
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	899b      	ldrh	r3, [r3, #12]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1ec      	bne.n	80050ee <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	895b      	ldrh	r3, [r3, #10]
 800513e:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3318      	adds	r3, #24
 8005144:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	6978      	ldr	r0, [r7, #20]
 800514e:	f7ff fd96 	bl	8004c7e <vring_init>

	for (i = 0; i < size - 1; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e00c      	b.n	8005172 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	b29a      	uxth	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	440b      	add	r3, r1
 8005166:	3201      	adds	r2, #1
 8005168:	b292      	uxth	r2, r2
 800516a:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	3301      	adds	r3, #1
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3b01      	subs	r3, #1
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	429a      	cmp	r2, r3
 800517a:	dbed      	blt.n	8005158 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	4413      	add	r3, r2
 8005186:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800518a:	81da      	strh	r2, [r3, #14]
}
 800518c:	bf00      	nop
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	885b      	ldrh	r3, [r3, #2]
 80051a6:	b21a      	sxth	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	895b      	ldrh	r3, [r3, #10]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	b21b      	sxth	r3, r3
 80051b2:	4013      	ands	r3, r2
 80051b4:	b21b      	sxth	r3, r3
 80051b6:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 80051c6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	885a      	ldrh	r2, [r3, #2]
 80051d0:	3201      	adds	r2, #1
 80051d2:	b292      	uxth	r2, r2
 80051d4:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051da:	3301      	adds	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 80051f6:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <virtqueue_notification+0x1c>
		vq->callback(vq);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01d      	beq.n	8005262 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	885b      	ldrh	r3, [r3, #2]
 800522c:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	89fa      	ldrh	r2, [r7, #14]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	4413      	add	r3, r2
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8005248:	89ba      	ldrh	r2, [r7, #12]
 800524a:	89f9      	ldrh	r1, [r7, #14]
 800524c:	897b      	ldrh	r3, [r7, #10]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fd3e 	bl	8004cd0 <vring_need_event>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf14      	ite	ne
 800525a:	2301      	movne	r3, #1
 800525c:	2300      	moveq	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e009      	b.n	8005276 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	4798      	blx	r3
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <HAL_HSEM_FreeCallback+0x1c>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 80052ae:	2002      	movs	r0, #2
 80052b0:	f7fc f994 	bl	80015dc <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 80052b4:	bf00      	nop
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	240002cc 	.word	0x240002cc

080052c0 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <MAILBOX_Init+0x34>)
 80052c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052cc:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <MAILBOX_Init+0x34>)
 80052ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <MAILBOX_Init+0x34>)
 80052d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 80052e4:	2002      	movs	r0, #2
 80052e6:	f7fc f979 	bl	80015dc <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	58024400 	.word	0x58024400

080052f8 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8005300:	4b09      	ldr	r3, [pc, #36]	; (8005328 <MAILBOX_Poll+0x30>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d108      	bne.n	800531a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fe fbe7 	bl	8003ade <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <MAILBOX_Poll+0x30>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
    return 0;
 8005316:	2300      	movs	r3, #0
 8005318:	e001      	b.n	800531e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800531a:	f06f 030a 	mvn.w	r3, #10
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	240002cc 	.word	0x240002cc

0800532c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8005336:	2000      	movs	r0, #0
 8005338:	f7fc f922 	bl	8001580 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800533c:	2100      	movs	r1, #0
 800533e:	2000      	movs	r0, #0
 8005340:	f7fc f938 	bl	80015b4 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d006      	beq.n	800536e <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005368:	d001      	beq.n	800536e <is_rpmsg_ept_ready+0x20>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <is_rpmsg_ept_ready+0x22>
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d209      	bcs.n	80053a4 <metal_device_io_region+0x28>
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	3308      	adds	r3, #8
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4413      	add	r3, r2
 80053a0:	3304      	adds	r3, #4
 80053a2:	e000      	b.n	80053a6 <metal_device_io_region+0x2a>
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b08d      	sub	sp, #52	; 0x34
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	6078      	str	r0, [r7, #4]
  int status = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 80053c4:	4a41      	ldr	r2, [pc, #260]	; (80054cc <OPENAMP_shmem_init+0x118>)
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053ce:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 80053da:	f107 0310 	add.w	r3, r7, #16
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fd fe26 	bl	8003030 <metal_init>

  status = metal_register_generic_device(&shm_device);
 80053e4:	483a      	ldr	r0, [pc, #232]	; (80054d0 <OPENAMP_shmem_init+0x11c>)
 80053e6:	f7fd fccb 	bl	8002d80 <metal_register_generic_device>
 80053ea:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <OPENAMP_shmem_init+0x42>
    return status;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	e066      	b.n	80054c4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 80053f6:	f107 0318 	add.w	r3, r7, #24
 80053fa:	461a      	mov	r2, r3
 80053fc:	4935      	ldr	r1, [pc, #212]	; (80054d4 <OPENAMP_shmem_init+0x120>)
 80053fe:	4836      	ldr	r0, [pc, #216]	; (80054d8 <OPENAMP_shmem_init+0x124>)
 8005400:	f7fd fc80 	bl	8002d04 <metal_device_open>
 8005404:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <OPENAMP_shmem_init+0x5c>
    return status;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	e059      	b.n	80054c4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8005410:	4a32      	ldr	r2, [pc, #200]	; (80054dc <OPENAMP_shmem_init+0x128>)
 8005412:	4b33      	ldr	r3, [pc, #204]	; (80054e0 <OPENAMP_shmem_init+0x12c>)
 8005414:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800541c:	4a31      	ldr	r2, [pc, #196]	; (80054e4 <OPENAMP_shmem_init+0x130>)
 800541e:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <OPENAMP_shmem_init+0x128>)
 8005420:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8005422:	461a      	mov	r2, r3
 8005424:	2300      	movs	r3, #0
 8005426:	9302      	str	r3, [sp, #8]
 8005428:	2300      	movs	r3, #0
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <OPENAMP_shmem_init+0x12c>)
 8005436:	4929      	ldr	r1, [pc, #164]	; (80054dc <OPENAMP_shmem_init+0x128>)
 8005438:	f7fd fe47 	bl	80030ca <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff ff9b 	bl	800537c <metal_device_io_region>
 8005446:	4603      	mov	r3, r0
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <OPENAMP_shmem_init+0x134>)
 800544a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800544c:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <OPENAMP_shmem_init+0x134>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <OPENAMP_shmem_init+0xa6>
    return -1;
 8005454:	f04f 33ff 	mov.w	r3, #4294967295
 8005458:	e034      	b.n	80054c4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800545a:	f107 0208 	add.w	r2, r7, #8
 800545e:	f107 030c 	add.w	r3, r7, #12
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f911 	bl	800568c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a1f      	ldr	r2, [pc, #124]	; (80054ec <OPENAMP_shmem_init+0x138>)
 800546e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8005470:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <OPENAMP_shmem_init+0x138>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8005478:	f04f 33ff 	mov.w	r3, #4294967295
 800547c:	e022      	b.n	80054c4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <OPENAMP_shmem_init+0x138>)
 8005486:	6819      	ldr	r1, [r3, #0]
 8005488:	4b18      	ldr	r3, [pc, #96]	; (80054ec <OPENAMP_shmem_init+0x138>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	461c      	mov	r4, r3
 8005490:	2300      	movs	r3, #0
 8005492:	9302      	str	r3, [sp, #8]
 8005494:	2300      	movs	r3, #0
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	f04f 33ff 	mov.w	r3, #4294967295
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	4623      	mov	r3, r4
 80054a0:	f7fd fe13 	bl	80030ca <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff ff67 	bl	800537c <metal_device_io_region>
 80054ae:	4603      	mov	r3, r0
 80054b0:	4a0f      	ldr	r2, [pc, #60]	; (80054f0 <OPENAMP_shmem_init+0x13c>)
 80054b2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <OPENAMP_shmem_init+0x13c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <OPENAMP_shmem_init+0x10e>
    return -1;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	e000      	b.n	80054c4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3724      	adds	r7, #36	; 0x24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd90      	pop	{r4, r7, pc}
 80054cc:	080069e4 	.word	0x080069e4
 80054d0:	24000104 	.word	0x24000104
 80054d4:	080069d0 	.word	0x080069d0
 80054d8:	080069dc 	.word	0x080069dc
 80054dc:	38000400 	.word	0x38000400
 80054e0:	24000360 	.word	0x24000360
 80054e4:	38010000 	.word	0x38010000
 80054e8:	240002d0 	.word	0x240002d0
 80054ec:	240002d8 	.word	0x240002d8
 80054f0:	240002d4 	.word	0x240002d4

080054f4 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b08b      	sub	sp, #44	; 0x2c
 80054f8:	af04      	add	r7, sp, #16
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
  int status = 0;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800550a:	f7ff fed9 	bl	80052c0 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff ff50 	bl	80053b4 <OPENAMP_shmem_init>
 8005514:	60f8      	str	r0, [r7, #12]
  if(status)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	e06a      	b.n	80055f6 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4b37      	ldr	r3, [pc, #220]	; (8005600 <MX_OPENAMP_Init+0x10c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f103 0218 	add.w	r2, r3, #24
 800552a:	4b36      	ldr	r3, [pc, #216]	; (8005604 <MX_OPENAMP_Init+0x110>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2100      	movs	r1, #0
 8005530:	9102      	str	r1, [sp, #8]
 8005532:	4935      	ldr	r1, [pc, #212]	; (8005608 <MX_OPENAMP_Init+0x114>)
 8005534:	9101      	str	r1, [sp, #4]
 8005536:	2100      	movs	r1, #0
 8005538:	9100      	str	r1, [sp, #0]
 800553a:	21ff      	movs	r1, #255	; 0xff
 800553c:	f7fe f9f0 	bl	8003920 <rproc_virtio_create_vdev>
 8005540:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8005548:	f04f 33ff 	mov.w	r3, #4294967295
 800554c:	e053      	b.n	80055f6 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800554e:	6938      	ldr	r0, [r7, #16]
 8005550:	f7fe fb01 	bl	8003b56 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8005554:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <MX_OPENAMP_Init+0x10c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3334      	adds	r3, #52	; 0x34
 800555a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8005564:	461c      	mov	r4, r3
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <MX_OPENAMP_Init+0x118>)
 8005568:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	6892      	ldr	r2, [r2, #8]
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8005572:	9102      	str	r1, [sp, #8]
 8005574:	9201      	str	r2, [sp, #4]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4623      	mov	r3, r4
 800557a:	4602      	mov	r2, r0
 800557c:	2100      	movs	r1, #0
 800557e:	6938      	ldr	r0, [r7, #16]
 8005580:	f7fe fa7c 	bl	8003a7c <rproc_virtio_init_vring>
 8005584:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	e032      	b.n	80055f6 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8005590:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <MX_OPENAMP_Init+0x10c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3348      	adds	r3, #72	; 0x48
 8005596:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 80055a0:	461c      	mov	r4, r3
 80055a2:	4b1a      	ldr	r3, [pc, #104]	; (800560c <MX_OPENAMP_Init+0x118>)
 80055a4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	6892      	ldr	r2, [r2, #8]
 80055aa:	6979      	ldr	r1, [r7, #20]
 80055ac:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 80055ae:	9102      	str	r1, [sp, #8]
 80055b0:	9201      	str	r2, [sp, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4623      	mov	r3, r4
 80055b6:	4602      	mov	r2, r0
 80055b8:	2101      	movs	r1, #1
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f7fe fa5e 	bl	8003a7c <rproc_virtio_init_vring>
 80055c0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_OPENAMP_Init+0xd8>
  {
    return status;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	e014      	b.n	80055f6 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <MX_OPENAMP_Init+0x11c>)
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 80055d4:	4a0f      	ldr	r2, [pc, #60]	; (8005614 <MX_OPENAMP_Init+0x120>)
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <MX_OPENAMP_Init+0x11c>)
 80055d8:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 80055da:	461a      	mov	r2, r3
 80055dc:	480e      	ldr	r0, [pc, #56]	; (8005618 <MX_OPENAMP_Init+0x124>)
 80055de:	f7fe ff2b 	bl	8004438 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <MX_OPENAMP_Init+0x118>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a0c      	ldr	r2, [pc, #48]	; (8005618 <MX_OPENAMP_Init+0x124>)
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	6939      	ldr	r1, [r7, #16]
 80055ee:	480b      	ldr	r0, [pc, #44]	; (800561c <MX_OPENAMP_Init+0x128>)
 80055f0:	f7ff f992 	bl	8004918 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
 80055fe:	bf00      	nop
 8005600:	240002d8 	.word	0x240002d8
 8005604:	240002d4 	.word	0x240002d4
 8005608:	0800532d 	.word	0x0800532d
 800560c:	240002d0 	.word	0x240002d0
 8005610:	38000400 	.word	0x38000400
 8005614:	38010000 	.word	0x38010000
 8005618:	240002dc 	.word	0x240002dc
 800561c:	240002e8 	.word	0x240002e8

08005620 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	; 0x28
 8005624:	af04      	add	r7, sp, #16
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	9302      	str	r3, [sp, #8]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	f04f 33ff 	mov.w	r3, #4294967295
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	4904      	ldr	r1, [pc, #16]	; (8005658 <OPENAMP_create_endpoint+0x38>)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7fe fd12 	bl	8004070 <rpmsg_create_ept>
 800564c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800564e:	697b      	ldr	r3, [r7, #20]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	240002e8 	.word	0x240002e8

0800565c <OPENAMP_Wait_EndPointready>:
  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
}

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8005664:	e004      	b.n	8005670 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <OPENAMP_Wait_EndPointready+0x2c>)
 8005668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fe44 	bl	80052f8 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fe6c 	bl	800534e <is_rpmsg_ept_ready>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f4      	beq.n	8005666 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	240002e8 	.word	0x240002e8

0800568c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8005698:	228c      	movs	r2, #140	; 0x8c
 800569a:	2100      	movs	r1, #0
 800569c:	481e      	ldr	r0, [pc, #120]	; (8005718 <resource_table_init+0x8c>)
 800569e:	f000 f8b1 	bl	8005804 <memset>
	resource_table.num = 1;
 80056a2:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <resource_table_init+0x8c>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <resource_table_init+0x8c>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 80056ae:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <resource_table_init+0x8c>)
 80056b0:	2218      	movs	r2, #24
 80056b2:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 80056b4:	4b19      	ldr	r3, [pc, #100]	; (800571c <resource_table_init+0x90>)
 80056b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <resource_table_init+0x8c>)
 80056bc:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 80056be:	4b16      	ldr	r3, [pc, #88]	; (8005718 <resource_table_init+0x8c>)
 80056c0:	2204      	movs	r2, #4
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <resource_table_init+0x8c>)
 80056c6:	2204      	movs	r2, #4
 80056c8:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <resource_table_init+0x8c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 80056d0:	4a12      	ldr	r2, [pc, #72]	; (800571c <resource_table_init+0x90>)
 80056d2:	4b11      	ldr	r3, [pc, #68]	; (8005718 <resource_table_init+0x8c>)
 80056d4:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <resource_table_init+0x8c>)
 80056d8:	2204      	movs	r2, #4
 80056da:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <resource_table_init+0x8c>)
 80056de:	2204      	movs	r2, #4
 80056e0:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 80056e2:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <resource_table_init+0x8c>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <resource_table_init+0x8c>)
 80056ea:	2203      	movs	r2, #3
 80056ec:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <resource_table_init+0x8c>)
 80056f0:	2207      	movs	r2, #7
 80056f2:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <resource_table_init+0x8c>)
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <resource_table_init+0x8c>)
 80056fe:	2201      	movs	r2, #1
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	228c      	movs	r2, #140	; 0x8c
 8005706:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a03      	ldr	r2, [pc, #12]	; (8005718 <resource_table_init+0x8c>)
 800570c:	601a      	str	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	38000000 	.word	0x38000000
 800571c:	38000400 	.word	0x38000400

08005720 <__assert_func>:
 8005720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005722:	4614      	mov	r4, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <__assert_func+0x2c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4605      	mov	r5, r0
 800572c:	68d8      	ldr	r0, [r3, #12]
 800572e:	b14c      	cbz	r4, 8005744 <__assert_func+0x24>
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <__assert_func+0x30>)
 8005732:	9100      	str	r1, [sp, #0]
 8005734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005738:	4906      	ldr	r1, [pc, #24]	; (8005754 <__assert_func+0x34>)
 800573a:	462b      	mov	r3, r5
 800573c:	f000 f80e 	bl	800575c <fiprintf>
 8005740:	f000 fd2e 	bl	80061a0 <abort>
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <__assert_func+0x38>)
 8005746:	461c      	mov	r4, r3
 8005748:	e7f3      	b.n	8005732 <__assert_func+0x12>
 800574a:	bf00      	nop
 800574c:	24000180 	.word	0x24000180
 8005750:	08006a63 	.word	0x08006a63
 8005754:	08006a70 	.word	0x08006a70
 8005758:	08006a9e 	.word	0x08006a9e

0800575c <fiprintf>:
 800575c:	b40e      	push	{r1, r2, r3}
 800575e:	b503      	push	{r0, r1, lr}
 8005760:	4601      	mov	r1, r0
 8005762:	ab03      	add	r3, sp, #12
 8005764:	4805      	ldr	r0, [pc, #20]	; (800577c <fiprintf+0x20>)
 8005766:	f853 2b04 	ldr.w	r2, [r3], #4
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	f000 f95b 	bl	8005a28 <_vfiprintf_r>
 8005772:	b002      	add	sp, #8
 8005774:	f85d eb04 	ldr.w	lr, [sp], #4
 8005778:	b003      	add	sp, #12
 800577a:	4770      	bx	lr
 800577c:	24000180 	.word	0x24000180

08005780 <__libc_init_array>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	4d0d      	ldr	r5, [pc, #52]	; (80057b8 <__libc_init_array+0x38>)
 8005784:	4c0d      	ldr	r4, [pc, #52]	; (80057bc <__libc_init_array+0x3c>)
 8005786:	1b64      	subs	r4, r4, r5
 8005788:	10a4      	asrs	r4, r4, #2
 800578a:	2600      	movs	r6, #0
 800578c:	42a6      	cmp	r6, r4
 800578e:	d109      	bne.n	80057a4 <__libc_init_array+0x24>
 8005790:	4d0b      	ldr	r5, [pc, #44]	; (80057c0 <__libc_init_array+0x40>)
 8005792:	4c0c      	ldr	r4, [pc, #48]	; (80057c4 <__libc_init_array+0x44>)
 8005794:	f001 f828 	bl	80067e8 <_init>
 8005798:	1b64      	subs	r4, r4, r5
 800579a:	10a4      	asrs	r4, r4, #2
 800579c:	2600      	movs	r6, #0
 800579e:	42a6      	cmp	r6, r4
 80057a0:	d105      	bne.n	80057ae <__libc_init_array+0x2e>
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a8:	4798      	blx	r3
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7ee      	b.n	800578c <__libc_init_array+0xc>
 80057ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b2:	4798      	blx	r3
 80057b4:	3601      	adds	r6, #1
 80057b6:	e7f2      	b.n	800579e <__libc_init_array+0x1e>
 80057b8:	08006b38 	.word	0x08006b38
 80057bc:	08006b38 	.word	0x08006b38
 80057c0:	08006b38 	.word	0x08006b38
 80057c4:	08006b3c 	.word	0x08006b3c

080057c8 <malloc>:
 80057c8:	4b02      	ldr	r3, [pc, #8]	; (80057d4 <malloc+0xc>)
 80057ca:	4601      	mov	r1, r0
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f000 b88d 	b.w	80058ec <_malloc_r>
 80057d2:	bf00      	nop
 80057d4:	24000180 	.word	0x24000180

080057d8 <free>:
 80057d8:	4b02      	ldr	r3, [pc, #8]	; (80057e4 <free+0xc>)
 80057da:	4601      	mov	r1, r0
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	f000 b819 	b.w	8005814 <_free_r>
 80057e2:	bf00      	nop
 80057e4:	24000180 	.word	0x24000180

080057e8 <memcpy>:
 80057e8:	440a      	add	r2, r1
 80057ea:	4291      	cmp	r1, r2
 80057ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80057f0:	d100      	bne.n	80057f4 <memcpy+0xc>
 80057f2:	4770      	bx	lr
 80057f4:	b510      	push	{r4, lr}
 80057f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fe:	4291      	cmp	r1, r2
 8005800:	d1f9      	bne.n	80057f6 <memcpy+0xe>
 8005802:	bd10      	pop	{r4, pc}

08005804 <memset>:
 8005804:	4402      	add	r2, r0
 8005806:	4603      	mov	r3, r0
 8005808:	4293      	cmp	r3, r2
 800580a:	d100      	bne.n	800580e <memset+0xa>
 800580c:	4770      	bx	lr
 800580e:	f803 1b01 	strb.w	r1, [r3], #1
 8005812:	e7f9      	b.n	8005808 <memset+0x4>

08005814 <_free_r>:
 8005814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005816:	2900      	cmp	r1, #0
 8005818:	d044      	beq.n	80058a4 <_free_r+0x90>
 800581a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581e:	9001      	str	r0, [sp, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f1a1 0404 	sub.w	r4, r1, #4
 8005826:	bfb8      	it	lt
 8005828:	18e4      	addlt	r4, r4, r3
 800582a:	f000 fee1 	bl	80065f0 <__malloc_lock>
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <_free_r+0x94>)
 8005830:	9801      	ldr	r0, [sp, #4]
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	b933      	cbnz	r3, 8005844 <_free_r+0x30>
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	6014      	str	r4, [r2, #0]
 800583a:	b003      	add	sp, #12
 800583c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005840:	f000 bedc 	b.w	80065fc <__malloc_unlock>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d908      	bls.n	800585a <_free_r+0x46>
 8005848:	6825      	ldr	r5, [r4, #0]
 800584a:	1961      	adds	r1, r4, r5
 800584c:	428b      	cmp	r3, r1
 800584e:	bf01      	itttt	eq
 8005850:	6819      	ldreq	r1, [r3, #0]
 8005852:	685b      	ldreq	r3, [r3, #4]
 8005854:	1949      	addeq	r1, r1, r5
 8005856:	6021      	streq	r1, [r4, #0]
 8005858:	e7ed      	b.n	8005836 <_free_r+0x22>
 800585a:	461a      	mov	r2, r3
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	b10b      	cbz	r3, 8005864 <_free_r+0x50>
 8005860:	42a3      	cmp	r3, r4
 8005862:	d9fa      	bls.n	800585a <_free_r+0x46>
 8005864:	6811      	ldr	r1, [r2, #0]
 8005866:	1855      	adds	r5, r2, r1
 8005868:	42a5      	cmp	r5, r4
 800586a:	d10b      	bne.n	8005884 <_free_r+0x70>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	4421      	add	r1, r4
 8005870:	1854      	adds	r4, r2, r1
 8005872:	42a3      	cmp	r3, r4
 8005874:	6011      	str	r1, [r2, #0]
 8005876:	d1e0      	bne.n	800583a <_free_r+0x26>
 8005878:	681c      	ldr	r4, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6053      	str	r3, [r2, #4]
 800587e:	4421      	add	r1, r4
 8005880:	6011      	str	r1, [r2, #0]
 8005882:	e7da      	b.n	800583a <_free_r+0x26>
 8005884:	d902      	bls.n	800588c <_free_r+0x78>
 8005886:	230c      	movs	r3, #12
 8005888:	6003      	str	r3, [r0, #0]
 800588a:	e7d6      	b.n	800583a <_free_r+0x26>
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1961      	adds	r1, r4, r5
 8005890:	428b      	cmp	r3, r1
 8005892:	bf04      	itt	eq
 8005894:	6819      	ldreq	r1, [r3, #0]
 8005896:	685b      	ldreq	r3, [r3, #4]
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	bf04      	itt	eq
 800589c:	1949      	addeq	r1, r1, r5
 800589e:	6021      	streq	r1, [r4, #0]
 80058a0:	6054      	str	r4, [r2, #4]
 80058a2:	e7ca      	b.n	800583a <_free_r+0x26>
 80058a4:	b003      	add	sp, #12
 80058a6:	bd30      	pop	{r4, r5, pc}
 80058a8:	24000364 	.word	0x24000364

080058ac <sbrk_aligned>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4e0e      	ldr	r6, [pc, #56]	; (80058e8 <sbrk_aligned+0x3c>)
 80058b0:	460c      	mov	r4, r1
 80058b2:	6831      	ldr	r1, [r6, #0]
 80058b4:	4605      	mov	r5, r0
 80058b6:	b911      	cbnz	r1, 80058be <sbrk_aligned+0x12>
 80058b8:	f000 fb7a 	bl	8005fb0 <_sbrk_r>
 80058bc:	6030      	str	r0, [r6, #0]
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fb75 	bl	8005fb0 <_sbrk_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d00a      	beq.n	80058e0 <sbrk_aligned+0x34>
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d007      	beq.n	80058e4 <sbrk_aligned+0x38>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fb6a 	bl	8005fb0 <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d101      	bne.n	80058e4 <sbrk_aligned+0x38>
 80058e0:	f04f 34ff 	mov.w	r4, #4294967295
 80058e4:	4620      	mov	r0, r4
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	24000368 	.word	0x24000368

080058ec <_malloc_r>:
 80058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	1ccd      	adds	r5, r1, #3
 80058f2:	f025 0503 	bic.w	r5, r5, #3
 80058f6:	3508      	adds	r5, #8
 80058f8:	2d0c      	cmp	r5, #12
 80058fa:	bf38      	it	cc
 80058fc:	250c      	movcc	r5, #12
 80058fe:	2d00      	cmp	r5, #0
 8005900:	4607      	mov	r7, r0
 8005902:	db01      	blt.n	8005908 <_malloc_r+0x1c>
 8005904:	42a9      	cmp	r1, r5
 8005906:	d905      	bls.n	8005914 <_malloc_r+0x28>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	2600      	movs	r6, #0
 800590e:	4630      	mov	r0, r6
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005914:	4e2e      	ldr	r6, [pc, #184]	; (80059d0 <_malloc_r+0xe4>)
 8005916:	f000 fe6b 	bl	80065f0 <__malloc_lock>
 800591a:	6833      	ldr	r3, [r6, #0]
 800591c:	461c      	mov	r4, r3
 800591e:	bb34      	cbnz	r4, 800596e <_malloc_r+0x82>
 8005920:	4629      	mov	r1, r5
 8005922:	4638      	mov	r0, r7
 8005924:	f7ff ffc2 	bl	80058ac <sbrk_aligned>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	4604      	mov	r4, r0
 800592c:	d14d      	bne.n	80059ca <_malloc_r+0xde>
 800592e:	6834      	ldr	r4, [r6, #0]
 8005930:	4626      	mov	r6, r4
 8005932:	2e00      	cmp	r6, #0
 8005934:	d140      	bne.n	80059b8 <_malloc_r+0xcc>
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	4631      	mov	r1, r6
 800593a:	4638      	mov	r0, r7
 800593c:	eb04 0803 	add.w	r8, r4, r3
 8005940:	f000 fb36 	bl	8005fb0 <_sbrk_r>
 8005944:	4580      	cmp	r8, r0
 8005946:	d13a      	bne.n	80059be <_malloc_r+0xd2>
 8005948:	6821      	ldr	r1, [r4, #0]
 800594a:	3503      	adds	r5, #3
 800594c:	1a6d      	subs	r5, r5, r1
 800594e:	f025 0503 	bic.w	r5, r5, #3
 8005952:	3508      	adds	r5, #8
 8005954:	2d0c      	cmp	r5, #12
 8005956:	bf38      	it	cc
 8005958:	250c      	movcc	r5, #12
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ffa5 	bl	80058ac <sbrk_aligned>
 8005962:	3001      	adds	r0, #1
 8005964:	d02b      	beq.n	80059be <_malloc_r+0xd2>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	442b      	add	r3, r5
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	e00e      	b.n	800598c <_malloc_r+0xa0>
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	1b52      	subs	r2, r2, r5
 8005972:	d41e      	bmi.n	80059b2 <_malloc_r+0xc6>
 8005974:	2a0b      	cmp	r2, #11
 8005976:	d916      	bls.n	80059a6 <_malloc_r+0xba>
 8005978:	1961      	adds	r1, r4, r5
 800597a:	42a3      	cmp	r3, r4
 800597c:	6025      	str	r5, [r4, #0]
 800597e:	bf18      	it	ne
 8005980:	6059      	strne	r1, [r3, #4]
 8005982:	6863      	ldr	r3, [r4, #4]
 8005984:	bf08      	it	eq
 8005986:	6031      	streq	r1, [r6, #0]
 8005988:	5162      	str	r2, [r4, r5]
 800598a:	604b      	str	r3, [r1, #4]
 800598c:	4638      	mov	r0, r7
 800598e:	f104 060b 	add.w	r6, r4, #11
 8005992:	f000 fe33 	bl	80065fc <__malloc_unlock>
 8005996:	f026 0607 	bic.w	r6, r6, #7
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	1af2      	subs	r2, r6, r3
 800599e:	d0b6      	beq.n	800590e <_malloc_r+0x22>
 80059a0:	1b9b      	subs	r3, r3, r6
 80059a2:	50a3      	str	r3, [r4, r2]
 80059a4:	e7b3      	b.n	800590e <_malloc_r+0x22>
 80059a6:	6862      	ldr	r2, [r4, #4]
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	bf0c      	ite	eq
 80059ac:	6032      	streq	r2, [r6, #0]
 80059ae:	605a      	strne	r2, [r3, #4]
 80059b0:	e7ec      	b.n	800598c <_malloc_r+0xa0>
 80059b2:	4623      	mov	r3, r4
 80059b4:	6864      	ldr	r4, [r4, #4]
 80059b6:	e7b2      	b.n	800591e <_malloc_r+0x32>
 80059b8:	4634      	mov	r4, r6
 80059ba:	6876      	ldr	r6, [r6, #4]
 80059bc:	e7b9      	b.n	8005932 <_malloc_r+0x46>
 80059be:	230c      	movs	r3, #12
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4638      	mov	r0, r7
 80059c4:	f000 fe1a 	bl	80065fc <__malloc_unlock>
 80059c8:	e7a1      	b.n	800590e <_malloc_r+0x22>
 80059ca:	6025      	str	r5, [r4, #0]
 80059cc:	e7de      	b.n	800598c <_malloc_r+0xa0>
 80059ce:	bf00      	nop
 80059d0:	24000364 	.word	0x24000364

080059d4 <__sfputc_r>:
 80059d4:	6893      	ldr	r3, [r2, #8]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	b410      	push	{r4}
 80059dc:	6093      	str	r3, [r2, #8]
 80059de:	da08      	bge.n	80059f2 <__sfputc_r+0x1e>
 80059e0:	6994      	ldr	r4, [r2, #24]
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	db01      	blt.n	80059ea <__sfputc_r+0x16>
 80059e6:	290a      	cmp	r1, #10
 80059e8:	d103      	bne.n	80059f2 <__sfputc_r+0x1e>
 80059ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ee:	f000 bb17 	b.w	8006020 <__swbuf_r>
 80059f2:	6813      	ldr	r3, [r2, #0]
 80059f4:	1c58      	adds	r0, r3, #1
 80059f6:	6010      	str	r0, [r2, #0]
 80059f8:	7019      	strb	r1, [r3, #0]
 80059fa:	4608      	mov	r0, r1
 80059fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <__sfputs_r>:
 8005a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	18d5      	adds	r5, r2, r3
 8005a0c:	42ac      	cmp	r4, r5
 8005a0e:	d101      	bne.n	8005a14 <__sfputs_r+0x12>
 8005a10:	2000      	movs	r0, #0
 8005a12:	e007      	b.n	8005a24 <__sfputs_r+0x22>
 8005a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a18:	463a      	mov	r2, r7
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7ff ffda 	bl	80059d4 <__sfputc_r>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d1f3      	bne.n	8005a0c <__sfputs_r+0xa>
 8005a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a28 <_vfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	b09d      	sub	sp, #116	; 0x74
 8005a30:	4614      	mov	r4, r2
 8005a32:	4698      	mov	r8, r3
 8005a34:	4606      	mov	r6, r0
 8005a36:	b118      	cbz	r0, 8005a40 <_vfiprintf_r+0x18>
 8005a38:	6983      	ldr	r3, [r0, #24]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <_vfiprintf_r+0x18>
 8005a3c:	f000 fcd2 	bl	80063e4 <__sinit>
 8005a40:	4b89      	ldr	r3, [pc, #548]	; (8005c68 <_vfiprintf_r+0x240>)
 8005a42:	429d      	cmp	r5, r3
 8005a44:	d11b      	bne.n	8005a7e <_vfiprintf_r+0x56>
 8005a46:	6875      	ldr	r5, [r6, #4]
 8005a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a4a:	07d9      	lsls	r1, r3, #31
 8005a4c:	d405      	bmi.n	8005a5a <_vfiprintf_r+0x32>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	059a      	lsls	r2, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <_vfiprintf_r+0x32>
 8005a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a56:	f000 fd63 	bl	8006520 <__retarget_lock_acquire_recursive>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	071b      	lsls	r3, r3, #28
 8005a5e:	d501      	bpl.n	8005a64 <_vfiprintf_r+0x3c>
 8005a60:	692b      	ldr	r3, [r5, #16]
 8005a62:	b9eb      	cbnz	r3, 8005aa0 <_vfiprintf_r+0x78>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4630      	mov	r0, r6
 8005a68:	f000 fb2c 	bl	80060c4 <__swsetup_r>
 8005a6c:	b1c0      	cbz	r0, 8005aa0 <_vfiprintf_r+0x78>
 8005a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a70:	07dc      	lsls	r4, r3, #31
 8005a72:	d50e      	bpl.n	8005a92 <_vfiprintf_r+0x6a>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	b01d      	add	sp, #116	; 0x74
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <_vfiprintf_r+0x244>)
 8005a80:	429d      	cmp	r5, r3
 8005a82:	d101      	bne.n	8005a88 <_vfiprintf_r+0x60>
 8005a84:	68b5      	ldr	r5, [r6, #8]
 8005a86:	e7df      	b.n	8005a48 <_vfiprintf_r+0x20>
 8005a88:	4b79      	ldr	r3, [pc, #484]	; (8005c70 <_vfiprintf_r+0x248>)
 8005a8a:	429d      	cmp	r5, r3
 8005a8c:	bf08      	it	eq
 8005a8e:	68f5      	ldreq	r5, [r6, #12]
 8005a90:	e7da      	b.n	8005a48 <_vfiprintf_r+0x20>
 8005a92:	89ab      	ldrh	r3, [r5, #12]
 8005a94:	0598      	lsls	r0, r3, #22
 8005a96:	d4ed      	bmi.n	8005a74 <_vfiprintf_r+0x4c>
 8005a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a9a:	f000 fd42 	bl	8006522 <__retarget_lock_release_recursive>
 8005a9e:	e7e9      	b.n	8005a74 <_vfiprintf_r+0x4c>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa4:	2320      	movs	r3, #32
 8005aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aae:	2330      	movs	r3, #48	; 0x30
 8005ab0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c74 <_vfiprintf_r+0x24c>
 8005ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab8:	f04f 0901 	mov.w	r9, #1
 8005abc:	4623      	mov	r3, r4
 8005abe:	469a      	mov	sl, r3
 8005ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac4:	b10a      	cbz	r2, 8005aca <_vfiprintf_r+0xa2>
 8005ac6:	2a25      	cmp	r2, #37	; 0x25
 8005ac8:	d1f9      	bne.n	8005abe <_vfiprintf_r+0x96>
 8005aca:	ebba 0b04 	subs.w	fp, sl, r4
 8005ace:	d00b      	beq.n	8005ae8 <_vfiprintf_r+0xc0>
 8005ad0:	465b      	mov	r3, fp
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f7ff ff93 	bl	8005a02 <__sfputs_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	f000 80aa 	beq.w	8005c36 <_vfiprintf_r+0x20e>
 8005ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae4:	445a      	add	r2, fp
 8005ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 80a2 	beq.w	8005c36 <_vfiprintf_r+0x20e>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295
 8005af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005afc:	f10a 0a01 	add.w	sl, sl, #1
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	9307      	str	r3, [sp, #28]
 8005b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b08:	931a      	str	r3, [sp, #104]	; 0x68
 8005b0a:	4654      	mov	r4, sl
 8005b0c:	2205      	movs	r2, #5
 8005b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b12:	4858      	ldr	r0, [pc, #352]	; (8005c74 <_vfiprintf_r+0x24c>)
 8005b14:	f7fa fbfc 	bl	8000310 <memchr>
 8005b18:	9a04      	ldr	r2, [sp, #16]
 8005b1a:	b9d8      	cbnz	r0, 8005b54 <_vfiprintf_r+0x12c>
 8005b1c:	06d1      	lsls	r1, r2, #27
 8005b1e:	bf44      	itt	mi
 8005b20:	2320      	movmi	r3, #32
 8005b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b26:	0713      	lsls	r3, r2, #28
 8005b28:	bf44      	itt	mi
 8005b2a:	232b      	movmi	r3, #43	; 0x2b
 8005b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b30:	f89a 3000 	ldrb.w	r3, [sl]
 8005b34:	2b2a      	cmp	r3, #42	; 0x2a
 8005b36:	d015      	beq.n	8005b64 <_vfiprintf_r+0x13c>
 8005b38:	9a07      	ldr	r2, [sp, #28]
 8005b3a:	4654      	mov	r4, sl
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f04f 0c0a 	mov.w	ip, #10
 8005b42:	4621      	mov	r1, r4
 8005b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b48:	3b30      	subs	r3, #48	; 0x30
 8005b4a:	2b09      	cmp	r3, #9
 8005b4c:	d94e      	bls.n	8005bec <_vfiprintf_r+0x1c4>
 8005b4e:	b1b0      	cbz	r0, 8005b7e <_vfiprintf_r+0x156>
 8005b50:	9207      	str	r2, [sp, #28]
 8005b52:	e014      	b.n	8005b7e <_vfiprintf_r+0x156>
 8005b54:	eba0 0308 	sub.w	r3, r0, r8
 8005b58:	fa09 f303 	lsl.w	r3, r9, r3
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	46a2      	mov	sl, r4
 8005b62:	e7d2      	b.n	8005b0a <_vfiprintf_r+0xe2>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	1d19      	adds	r1, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfbb      	ittet	lt
 8005b70:	425b      	neglt	r3, r3
 8005b72:	f042 0202 	orrlt.w	r2, r2, #2
 8005b76:	9307      	strge	r3, [sp, #28]
 8005b78:	9307      	strlt	r3, [sp, #28]
 8005b7a:	bfb8      	it	lt
 8005b7c:	9204      	strlt	r2, [sp, #16]
 8005b7e:	7823      	ldrb	r3, [r4, #0]
 8005b80:	2b2e      	cmp	r3, #46	; 0x2e
 8005b82:	d10c      	bne.n	8005b9e <_vfiprintf_r+0x176>
 8005b84:	7863      	ldrb	r3, [r4, #1]
 8005b86:	2b2a      	cmp	r3, #42	; 0x2a
 8005b88:	d135      	bne.n	8005bf6 <_vfiprintf_r+0x1ce>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	9203      	str	r2, [sp, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bfb8      	it	lt
 8005b96:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b9a:	3402      	adds	r4, #2
 8005b9c:	9305      	str	r3, [sp, #20]
 8005b9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c84 <_vfiprintf_r+0x25c>
 8005ba2:	7821      	ldrb	r1, [r4, #0]
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	4650      	mov	r0, sl
 8005ba8:	f7fa fbb2 	bl	8000310 <memchr>
 8005bac:	b140      	cbz	r0, 8005bc0 <_vfiprintf_r+0x198>
 8005bae:	2340      	movs	r3, #64	; 0x40
 8005bb0:	eba0 000a 	sub.w	r0, r0, sl
 8005bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8005bb8:	9b04      	ldr	r3, [sp, #16]
 8005bba:	4303      	orrs	r3, r0
 8005bbc:	3401      	adds	r4, #1
 8005bbe:	9304      	str	r3, [sp, #16]
 8005bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc4:	482c      	ldr	r0, [pc, #176]	; (8005c78 <_vfiprintf_r+0x250>)
 8005bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bca:	2206      	movs	r2, #6
 8005bcc:	f7fa fba0 	bl	8000310 <memchr>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d03f      	beq.n	8005c54 <_vfiprintf_r+0x22c>
 8005bd4:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <_vfiprintf_r+0x254>)
 8005bd6:	bb1b      	cbnz	r3, 8005c20 <_vfiprintf_r+0x1f8>
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	3307      	adds	r3, #7
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	3308      	adds	r3, #8
 8005be2:	9303      	str	r3, [sp, #12]
 8005be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be6:	443b      	add	r3, r7
 8005be8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bea:	e767      	b.n	8005abc <_vfiprintf_r+0x94>
 8005bec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e7a5      	b.n	8005b42 <_vfiprintf_r+0x11a>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	3401      	adds	r4, #1
 8005bfa:	9305      	str	r3, [sp, #20]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f04f 0c0a 	mov.w	ip, #10
 8005c02:	4620      	mov	r0, r4
 8005c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c08:	3a30      	subs	r2, #48	; 0x30
 8005c0a:	2a09      	cmp	r2, #9
 8005c0c:	d903      	bls.n	8005c16 <_vfiprintf_r+0x1ee>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0c5      	beq.n	8005b9e <_vfiprintf_r+0x176>
 8005c12:	9105      	str	r1, [sp, #20]
 8005c14:	e7c3      	b.n	8005b9e <_vfiprintf_r+0x176>
 8005c16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e7f0      	b.n	8005c02 <_vfiprintf_r+0x1da>
 8005c20:	ab03      	add	r3, sp, #12
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	462a      	mov	r2, r5
 8005c26:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <_vfiprintf_r+0x258>)
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f3af 8000 	nop.w
 8005c30:	4607      	mov	r7, r0
 8005c32:	1c78      	adds	r0, r7, #1
 8005c34:	d1d6      	bne.n	8005be4 <_vfiprintf_r+0x1bc>
 8005c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c38:	07d9      	lsls	r1, r3, #31
 8005c3a:	d405      	bmi.n	8005c48 <_vfiprintf_r+0x220>
 8005c3c:	89ab      	ldrh	r3, [r5, #12]
 8005c3e:	059a      	lsls	r2, r3, #22
 8005c40:	d402      	bmi.n	8005c48 <_vfiprintf_r+0x220>
 8005c42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c44:	f000 fc6d 	bl	8006522 <__retarget_lock_release_recursive>
 8005c48:	89ab      	ldrh	r3, [r5, #12]
 8005c4a:	065b      	lsls	r3, r3, #25
 8005c4c:	f53f af12 	bmi.w	8005a74 <_vfiprintf_r+0x4c>
 8005c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c52:	e711      	b.n	8005a78 <_vfiprintf_r+0x50>
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	462a      	mov	r2, r5
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <_vfiprintf_r+0x258>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f000 f880 	bl	8005d64 <_printf_i>
 8005c64:	e7e4      	b.n	8005c30 <_vfiprintf_r+0x208>
 8005c66:	bf00      	nop
 8005c68:	08006af8 	.word	0x08006af8
 8005c6c:	08006b18 	.word	0x08006b18
 8005c70:	08006ad8 	.word	0x08006ad8
 8005c74:	08006aa4 	.word	0x08006aa4
 8005c78:	08006aae 	.word	0x08006aae
 8005c7c:	00000000 	.word	0x00000000
 8005c80:	08005a03 	.word	0x08005a03
 8005c84:	08006aaa 	.word	0x08006aaa

08005c88 <_printf_common>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	4699      	mov	r9, r3
 8005c90:	688a      	ldr	r2, [r1, #8]
 8005c92:	690b      	ldr	r3, [r1, #16]
 8005c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	bfb8      	it	lt
 8005c9c:	4613      	movlt	r3, r2
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ca4:	4607      	mov	r7, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	b10a      	cbz	r2, 8005cae <_printf_common+0x26>
 8005caa:	3301      	adds	r3, #1
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	0699      	lsls	r1, r3, #26
 8005cb2:	bf42      	ittt	mi
 8005cb4:	6833      	ldrmi	r3, [r6, #0]
 8005cb6:	3302      	addmi	r3, #2
 8005cb8:	6033      	strmi	r3, [r6, #0]
 8005cba:	6825      	ldr	r5, [r4, #0]
 8005cbc:	f015 0506 	ands.w	r5, r5, #6
 8005cc0:	d106      	bne.n	8005cd0 <_printf_common+0x48>
 8005cc2:	f104 0a19 	add.w	sl, r4, #25
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	6832      	ldr	r2, [r6, #0]
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dc26      	bgt.n	8005d1e <_printf_common+0x96>
 8005cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cd4:	1e13      	subs	r3, r2, #0
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	bf18      	it	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	0692      	lsls	r2, r2, #26
 8005cde:	d42b      	bmi.n	8005d38 <_printf_common+0xb0>
 8005ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	47c0      	blx	r8
 8005cea:	3001      	adds	r0, #1
 8005cec:	d01e      	beq.n	8005d2c <_printf_common+0xa4>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	68e5      	ldr	r5, [r4, #12]
 8005cf2:	6832      	ldr	r2, [r6, #0]
 8005cf4:	f003 0306 	and.w	r3, r3, #6
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	bf08      	it	eq
 8005cfc:	1aad      	subeq	r5, r5, r2
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	6922      	ldr	r2, [r4, #16]
 8005d02:	bf0c      	ite	eq
 8005d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d08:	2500      	movne	r5, #0
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	bfc4      	itt	gt
 8005d0e:	1a9b      	subgt	r3, r3, r2
 8005d10:	18ed      	addgt	r5, r5, r3
 8005d12:	2600      	movs	r6, #0
 8005d14:	341a      	adds	r4, #26
 8005d16:	42b5      	cmp	r5, r6
 8005d18:	d11a      	bne.n	8005d50 <_printf_common+0xc8>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e008      	b.n	8005d30 <_printf_common+0xa8>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	4652      	mov	r2, sl
 8005d22:	4649      	mov	r1, r9
 8005d24:	4638      	mov	r0, r7
 8005d26:	47c0      	blx	r8
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d103      	bne.n	8005d34 <_printf_common+0xac>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d34:	3501      	adds	r5, #1
 8005d36:	e7c6      	b.n	8005cc6 <_printf_common+0x3e>
 8005d38:	18e1      	adds	r1, r4, r3
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	2030      	movs	r0, #48	; 0x30
 8005d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d42:	4422      	add	r2, r4
 8005d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	e7c7      	b.n	8005ce0 <_printf_common+0x58>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4622      	mov	r2, r4
 8005d54:	4649      	mov	r1, r9
 8005d56:	4638      	mov	r0, r7
 8005d58:	47c0      	blx	r8
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d0e6      	beq.n	8005d2c <_printf_common+0xa4>
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7d9      	b.n	8005d16 <_printf_common+0x8e>
	...

08005d64 <_printf_i>:
 8005d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	7e0f      	ldrb	r7, [r1, #24]
 8005d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d6c:	2f78      	cmp	r7, #120	; 0x78
 8005d6e:	4691      	mov	r9, r2
 8005d70:	4680      	mov	r8, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	469a      	mov	sl, r3
 8005d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d7a:	d807      	bhi.n	8005d8c <_printf_i+0x28>
 8005d7c:	2f62      	cmp	r7, #98	; 0x62
 8005d7e:	d80a      	bhi.n	8005d96 <_printf_i+0x32>
 8005d80:	2f00      	cmp	r7, #0
 8005d82:	f000 80d8 	beq.w	8005f36 <_printf_i+0x1d2>
 8005d86:	2f58      	cmp	r7, #88	; 0x58
 8005d88:	f000 80a3 	beq.w	8005ed2 <_printf_i+0x16e>
 8005d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d94:	e03a      	b.n	8005e0c <_printf_i+0xa8>
 8005d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d9a:	2b15      	cmp	r3, #21
 8005d9c:	d8f6      	bhi.n	8005d8c <_printf_i+0x28>
 8005d9e:	a101      	add	r1, pc, #4	; (adr r1, 8005da4 <_printf_i+0x40>)
 8005da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005da4:	08005dfd 	.word	0x08005dfd
 8005da8:	08005e11 	.word	0x08005e11
 8005dac:	08005d8d 	.word	0x08005d8d
 8005db0:	08005d8d 	.word	0x08005d8d
 8005db4:	08005d8d 	.word	0x08005d8d
 8005db8:	08005d8d 	.word	0x08005d8d
 8005dbc:	08005e11 	.word	0x08005e11
 8005dc0:	08005d8d 	.word	0x08005d8d
 8005dc4:	08005d8d 	.word	0x08005d8d
 8005dc8:	08005d8d 	.word	0x08005d8d
 8005dcc:	08005d8d 	.word	0x08005d8d
 8005dd0:	08005f1d 	.word	0x08005f1d
 8005dd4:	08005e41 	.word	0x08005e41
 8005dd8:	08005eff 	.word	0x08005eff
 8005ddc:	08005d8d 	.word	0x08005d8d
 8005de0:	08005d8d 	.word	0x08005d8d
 8005de4:	08005f3f 	.word	0x08005f3f
 8005de8:	08005d8d 	.word	0x08005d8d
 8005dec:	08005e41 	.word	0x08005e41
 8005df0:	08005d8d 	.word	0x08005d8d
 8005df4:	08005d8d 	.word	0x08005d8d
 8005df8:	08005f07 	.word	0x08005f07
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	1d1a      	adds	r2, r3, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	602a      	str	r2, [r5, #0]
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0a3      	b.n	8005f58 <_printf_i+0x1f4>
 8005e10:	6820      	ldr	r0, [r4, #0]
 8005e12:	6829      	ldr	r1, [r5, #0]
 8005e14:	0606      	lsls	r6, r0, #24
 8005e16:	f101 0304 	add.w	r3, r1, #4
 8005e1a:	d50a      	bpl.n	8005e32 <_printf_i+0xce>
 8005e1c:	680e      	ldr	r6, [r1, #0]
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	2e00      	cmp	r6, #0
 8005e22:	da03      	bge.n	8005e2c <_printf_i+0xc8>
 8005e24:	232d      	movs	r3, #45	; 0x2d
 8005e26:	4276      	negs	r6, r6
 8005e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e2c:	485e      	ldr	r0, [pc, #376]	; (8005fa8 <_printf_i+0x244>)
 8005e2e:	230a      	movs	r3, #10
 8005e30:	e019      	b.n	8005e66 <_printf_i+0x102>
 8005e32:	680e      	ldr	r6, [r1, #0]
 8005e34:	602b      	str	r3, [r5, #0]
 8005e36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e3a:	bf18      	it	ne
 8005e3c:	b236      	sxthne	r6, r6
 8005e3e:	e7ef      	b.n	8005e20 <_printf_i+0xbc>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	6820      	ldr	r0, [r4, #0]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	6029      	str	r1, [r5, #0]
 8005e48:	0601      	lsls	r1, r0, #24
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0xec>
 8005e4c:	681e      	ldr	r6, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <_printf_i+0xf2>
 8005e50:	0646      	lsls	r6, r0, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0xe8>
 8005e54:	881e      	ldrh	r6, [r3, #0]
 8005e56:	4854      	ldr	r0, [pc, #336]	; (8005fa8 <_printf_i+0x244>)
 8005e58:	2f6f      	cmp	r7, #111	; 0x6f
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2308      	moveq	r3, #8
 8005e5e:	230a      	movne	r3, #10
 8005e60:	2100      	movs	r1, #0
 8005e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e66:	6865      	ldr	r5, [r4, #4]
 8005e68:	60a5      	str	r5, [r4, #8]
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	bfa2      	ittt	ge
 8005e6e:	6821      	ldrge	r1, [r4, #0]
 8005e70:	f021 0104 	bicge.w	r1, r1, #4
 8005e74:	6021      	strge	r1, [r4, #0]
 8005e76:	b90e      	cbnz	r6, 8005e7c <_printf_i+0x118>
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	d04d      	beq.n	8005f18 <_printf_i+0x1b4>
 8005e7c:	4615      	mov	r5, r2
 8005e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e82:	fb03 6711 	mls	r7, r3, r1, r6
 8005e86:	5dc7      	ldrb	r7, [r0, r7]
 8005e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e8c:	4637      	mov	r7, r6
 8005e8e:	42bb      	cmp	r3, r7
 8005e90:	460e      	mov	r6, r1
 8005e92:	d9f4      	bls.n	8005e7e <_printf_i+0x11a>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10b      	bne.n	8005eb0 <_printf_i+0x14c>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07de      	lsls	r6, r3, #31
 8005e9c:	d508      	bpl.n	8005eb0 <_printf_i+0x14c>
 8005e9e:	6923      	ldr	r3, [r4, #16]
 8005ea0:	6861      	ldr	r1, [r4, #4]
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	bfde      	ittt	le
 8005ea6:	2330      	movle	r3, #48	; 0x30
 8005ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eb0:	1b52      	subs	r2, r2, r5
 8005eb2:	6122      	str	r2, [r4, #16]
 8005eb4:	f8cd a000 	str.w	sl, [sp]
 8005eb8:	464b      	mov	r3, r9
 8005eba:	aa03      	add	r2, sp, #12
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f7ff fee2 	bl	8005c88 <_printf_common>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d14c      	bne.n	8005f62 <_printf_i+0x1fe>
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b004      	add	sp, #16
 8005ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed2:	4835      	ldr	r0, [pc, #212]	; (8005fa8 <_printf_i+0x244>)
 8005ed4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ed8:	6829      	ldr	r1, [r5, #0]
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ee0:	6029      	str	r1, [r5, #0]
 8005ee2:	061d      	lsls	r5, r3, #24
 8005ee4:	d514      	bpl.n	8005f10 <_printf_i+0x1ac>
 8005ee6:	07df      	lsls	r7, r3, #31
 8005ee8:	bf44      	itt	mi
 8005eea:	f043 0320 	orrmi.w	r3, r3, #32
 8005eee:	6023      	strmi	r3, [r4, #0]
 8005ef0:	b91e      	cbnz	r6, 8005efa <_printf_i+0x196>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f023 0320 	bic.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	2310      	movs	r3, #16
 8005efc:	e7b0      	b.n	8005e60 <_printf_i+0xfc>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	f043 0320 	orr.w	r3, r3, #32
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	2378      	movs	r3, #120	; 0x78
 8005f08:	4828      	ldr	r0, [pc, #160]	; (8005fac <_printf_i+0x248>)
 8005f0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f0e:	e7e3      	b.n	8005ed8 <_printf_i+0x174>
 8005f10:	0659      	lsls	r1, r3, #25
 8005f12:	bf48      	it	mi
 8005f14:	b2b6      	uxthmi	r6, r6
 8005f16:	e7e6      	b.n	8005ee6 <_printf_i+0x182>
 8005f18:	4615      	mov	r5, r2
 8005f1a:	e7bb      	b.n	8005e94 <_printf_i+0x130>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	6826      	ldr	r6, [r4, #0]
 8005f20:	6961      	ldr	r1, [r4, #20]
 8005f22:	1d18      	adds	r0, r3, #4
 8005f24:	6028      	str	r0, [r5, #0]
 8005f26:	0635      	lsls	r5, r6, #24
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0x1cc>
 8005f2c:	6019      	str	r1, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0x1d2>
 8005f30:	0670      	lsls	r0, r6, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0x1c8>
 8005f34:	8019      	strh	r1, [r3, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	4615      	mov	r5, r2
 8005f3c:	e7ba      	b.n	8005eb4 <_printf_i+0x150>
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	1d1a      	adds	r2, r3, #4
 8005f42:	602a      	str	r2, [r5, #0]
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	6862      	ldr	r2, [r4, #4]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f7fa f9e0 	bl	8000310 <memchr>
 8005f50:	b108      	cbz	r0, 8005f56 <_printf_i+0x1f2>
 8005f52:	1b40      	subs	r0, r0, r5
 8005f54:	6060      	str	r0, [r4, #4]
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f60:	e7a8      	b.n	8005eb4 <_printf_i+0x150>
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	462a      	mov	r2, r5
 8005f66:	4649      	mov	r1, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	47d0      	blx	sl
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d0ab      	beq.n	8005ec8 <_printf_i+0x164>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	079b      	lsls	r3, r3, #30
 8005f74:	d413      	bmi.n	8005f9e <_printf_i+0x23a>
 8005f76:	68e0      	ldr	r0, [r4, #12]
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	4298      	cmp	r0, r3
 8005f7c:	bfb8      	it	lt
 8005f7e:	4618      	movlt	r0, r3
 8005f80:	e7a4      	b.n	8005ecc <_printf_i+0x168>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4632      	mov	r2, r6
 8005f86:	4649      	mov	r1, r9
 8005f88:	4640      	mov	r0, r8
 8005f8a:	47d0      	blx	sl
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d09b      	beq.n	8005ec8 <_printf_i+0x164>
 8005f90:	3501      	adds	r5, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	9903      	ldr	r1, [sp, #12]
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	42ab      	cmp	r3, r5
 8005f9a:	dcf2      	bgt.n	8005f82 <_printf_i+0x21e>
 8005f9c:	e7eb      	b.n	8005f76 <_printf_i+0x212>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	f104 0619 	add.w	r6, r4, #25
 8005fa4:	e7f5      	b.n	8005f92 <_printf_i+0x22e>
 8005fa6:	bf00      	nop
 8005fa8:	08006ab5 	.word	0x08006ab5
 8005fac:	08006ac6 	.word	0x08006ac6

08005fb0 <_sbrk_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d06      	ldr	r5, [pc, #24]	; (8005fcc <_sbrk_r+0x1c>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	602b      	str	r3, [r5, #0]
 8005fbc:	f7fa fe24 	bl	8000c08 <_sbrk>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_sbrk_r+0x1a>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_sbrk_r+0x1a>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	2400036c 	.word	0x2400036c

08005fd0 <strncmp>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	b17a      	cbz	r2, 8005ff4 <strncmp+0x24>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	3901      	subs	r1, #1
 8005fd8:	1884      	adds	r4, r0, r2
 8005fda:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005fde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005fe2:	4290      	cmp	r0, r2
 8005fe4:	d101      	bne.n	8005fea <strncmp+0x1a>
 8005fe6:	42a3      	cmp	r3, r4
 8005fe8:	d101      	bne.n	8005fee <strncmp+0x1e>
 8005fea:	1a80      	subs	r0, r0, r2
 8005fec:	bd10      	pop	{r4, pc}
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1f3      	bne.n	8005fda <strncmp+0xa>
 8005ff2:	e7fa      	b.n	8005fea <strncmp+0x1a>
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	e7f9      	b.n	8005fec <strncmp+0x1c>

08005ff8 <strncpy>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	3901      	subs	r1, #1
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	b132      	cbz	r2, 800600e <strncpy+0x16>
 8006000:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006004:	f803 4b01 	strb.w	r4, [r3], #1
 8006008:	3a01      	subs	r2, #1
 800600a:	2c00      	cmp	r4, #0
 800600c:	d1f7      	bne.n	8005ffe <strncpy+0x6>
 800600e:	441a      	add	r2, r3
 8006010:	2100      	movs	r1, #0
 8006012:	4293      	cmp	r3, r2
 8006014:	d100      	bne.n	8006018 <strncpy+0x20>
 8006016:	bd10      	pop	{r4, pc}
 8006018:	f803 1b01 	strb.w	r1, [r3], #1
 800601c:	e7f9      	b.n	8006012 <strncpy+0x1a>
	...

08006020 <__swbuf_r>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	460e      	mov	r6, r1
 8006024:	4614      	mov	r4, r2
 8006026:	4605      	mov	r5, r0
 8006028:	b118      	cbz	r0, 8006032 <__swbuf_r+0x12>
 800602a:	6983      	ldr	r3, [r0, #24]
 800602c:	b90b      	cbnz	r3, 8006032 <__swbuf_r+0x12>
 800602e:	f000 f9d9 	bl	80063e4 <__sinit>
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <__swbuf_r+0x98>)
 8006034:	429c      	cmp	r4, r3
 8006036:	d12b      	bne.n	8006090 <__swbuf_r+0x70>
 8006038:	686c      	ldr	r4, [r5, #4]
 800603a:	69a3      	ldr	r3, [r4, #24]
 800603c:	60a3      	str	r3, [r4, #8]
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	071a      	lsls	r2, r3, #28
 8006042:	d52f      	bpl.n	80060a4 <__swbuf_r+0x84>
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	b36b      	cbz	r3, 80060a4 <__swbuf_r+0x84>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	1ac0      	subs	r0, r0, r3
 800604e:	6963      	ldr	r3, [r4, #20]
 8006050:	b2f6      	uxtb	r6, r6
 8006052:	4283      	cmp	r3, r0
 8006054:	4637      	mov	r7, r6
 8006056:	dc04      	bgt.n	8006062 <__swbuf_r+0x42>
 8006058:	4621      	mov	r1, r4
 800605a:	4628      	mov	r0, r5
 800605c:	f000 f92e 	bl	80062bc <_fflush_r>
 8006060:	bb30      	cbnz	r0, 80060b0 <__swbuf_r+0x90>
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	3b01      	subs	r3, #1
 8006066:	60a3      	str	r3, [r4, #8]
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	701e      	strb	r6, [r3, #0]
 8006070:	6963      	ldr	r3, [r4, #20]
 8006072:	3001      	adds	r0, #1
 8006074:	4283      	cmp	r3, r0
 8006076:	d004      	beq.n	8006082 <__swbuf_r+0x62>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	07db      	lsls	r3, r3, #31
 800607c:	d506      	bpl.n	800608c <__swbuf_r+0x6c>
 800607e:	2e0a      	cmp	r6, #10
 8006080:	d104      	bne.n	800608c <__swbuf_r+0x6c>
 8006082:	4621      	mov	r1, r4
 8006084:	4628      	mov	r0, r5
 8006086:	f000 f919 	bl	80062bc <_fflush_r>
 800608a:	b988      	cbnz	r0, 80060b0 <__swbuf_r+0x90>
 800608c:	4638      	mov	r0, r7
 800608e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <__swbuf_r+0x9c>)
 8006092:	429c      	cmp	r4, r3
 8006094:	d101      	bne.n	800609a <__swbuf_r+0x7a>
 8006096:	68ac      	ldr	r4, [r5, #8]
 8006098:	e7cf      	b.n	800603a <__swbuf_r+0x1a>
 800609a:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <__swbuf_r+0xa0>)
 800609c:	429c      	cmp	r4, r3
 800609e:	bf08      	it	eq
 80060a0:	68ec      	ldreq	r4, [r5, #12]
 80060a2:	e7ca      	b.n	800603a <__swbuf_r+0x1a>
 80060a4:	4621      	mov	r1, r4
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 f80c 	bl	80060c4 <__swsetup_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d0cb      	beq.n	8006048 <__swbuf_r+0x28>
 80060b0:	f04f 37ff 	mov.w	r7, #4294967295
 80060b4:	e7ea      	b.n	800608c <__swbuf_r+0x6c>
 80060b6:	bf00      	nop
 80060b8:	08006af8 	.word	0x08006af8
 80060bc:	08006b18 	.word	0x08006b18
 80060c0:	08006ad8 	.word	0x08006ad8

080060c4 <__swsetup_r>:
 80060c4:	4b32      	ldr	r3, [pc, #200]	; (8006190 <__swsetup_r+0xcc>)
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	681d      	ldr	r5, [r3, #0]
 80060ca:	4606      	mov	r6, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	b125      	cbz	r5, 80060da <__swsetup_r+0x16>
 80060d0:	69ab      	ldr	r3, [r5, #24]
 80060d2:	b913      	cbnz	r3, 80060da <__swsetup_r+0x16>
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f985 	bl	80063e4 <__sinit>
 80060da:	4b2e      	ldr	r3, [pc, #184]	; (8006194 <__swsetup_r+0xd0>)
 80060dc:	429c      	cmp	r4, r3
 80060de:	d10f      	bne.n	8006100 <__swsetup_r+0x3c>
 80060e0:	686c      	ldr	r4, [r5, #4]
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060e8:	0719      	lsls	r1, r3, #28
 80060ea:	d42c      	bmi.n	8006146 <__swsetup_r+0x82>
 80060ec:	06dd      	lsls	r5, r3, #27
 80060ee:	d411      	bmi.n	8006114 <__swsetup_r+0x50>
 80060f0:	2309      	movs	r3, #9
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295
 80060fe:	e03e      	b.n	800617e <__swsetup_r+0xba>
 8006100:	4b25      	ldr	r3, [pc, #148]	; (8006198 <__swsetup_r+0xd4>)
 8006102:	429c      	cmp	r4, r3
 8006104:	d101      	bne.n	800610a <__swsetup_r+0x46>
 8006106:	68ac      	ldr	r4, [r5, #8]
 8006108:	e7eb      	b.n	80060e2 <__swsetup_r+0x1e>
 800610a:	4b24      	ldr	r3, [pc, #144]	; (800619c <__swsetup_r+0xd8>)
 800610c:	429c      	cmp	r4, r3
 800610e:	bf08      	it	eq
 8006110:	68ec      	ldreq	r4, [r5, #12]
 8006112:	e7e6      	b.n	80060e2 <__swsetup_r+0x1e>
 8006114:	0758      	lsls	r0, r3, #29
 8006116:	d512      	bpl.n	800613e <__swsetup_r+0x7a>
 8006118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800611a:	b141      	cbz	r1, 800612e <__swsetup_r+0x6a>
 800611c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006120:	4299      	cmp	r1, r3
 8006122:	d002      	beq.n	800612a <__swsetup_r+0x66>
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff fb75 	bl	8005814 <_free_r>
 800612a:	2300      	movs	r3, #0
 800612c:	6363      	str	r3, [r4, #52]	; 0x34
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	2300      	movs	r3, #0
 8006138:	6063      	str	r3, [r4, #4]
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	f043 0308 	orr.w	r3, r3, #8
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	b94b      	cbnz	r3, 800615e <__swsetup_r+0x9a>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006154:	d003      	beq.n	800615e <__swsetup_r+0x9a>
 8006156:	4621      	mov	r1, r4
 8006158:	4630      	mov	r0, r6
 800615a:	f000 fa09 	bl	8006570 <__smakebuf_r>
 800615e:	89a0      	ldrh	r0, [r4, #12]
 8006160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006164:	f010 0301 	ands.w	r3, r0, #1
 8006168:	d00a      	beq.n	8006180 <__swsetup_r+0xbc>
 800616a:	2300      	movs	r3, #0
 800616c:	60a3      	str	r3, [r4, #8]
 800616e:	6963      	ldr	r3, [r4, #20]
 8006170:	425b      	negs	r3, r3
 8006172:	61a3      	str	r3, [r4, #24]
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	b943      	cbnz	r3, 800618a <__swsetup_r+0xc6>
 8006178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800617c:	d1ba      	bne.n	80060f4 <__swsetup_r+0x30>
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	0781      	lsls	r1, r0, #30
 8006182:	bf58      	it	pl
 8006184:	6963      	ldrpl	r3, [r4, #20]
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	e7f4      	b.n	8006174 <__swsetup_r+0xb0>
 800618a:	2000      	movs	r0, #0
 800618c:	e7f7      	b.n	800617e <__swsetup_r+0xba>
 800618e:	bf00      	nop
 8006190:	24000180 	.word	0x24000180
 8006194:	08006af8 	.word	0x08006af8
 8006198:	08006b18 	.word	0x08006b18
 800619c:	08006ad8 	.word	0x08006ad8

080061a0 <abort>:
 80061a0:	b508      	push	{r3, lr}
 80061a2:	2006      	movs	r0, #6
 80061a4:	f000 fa58 	bl	8006658 <raise>
 80061a8:	2001      	movs	r0, #1
 80061aa:	f7fa fcb5 	bl	8000b18 <_exit>
	...

080061b0 <__sflush_r>:
 80061b0:	898a      	ldrh	r2, [r1, #12]
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	4605      	mov	r5, r0
 80061b8:	0710      	lsls	r0, r2, #28
 80061ba:	460c      	mov	r4, r1
 80061bc:	d458      	bmi.n	8006270 <__sflush_r+0xc0>
 80061be:	684b      	ldr	r3, [r1, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dc05      	bgt.n	80061d0 <__sflush_r+0x20>
 80061c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dc02      	bgt.n	80061d0 <__sflush_r+0x20>
 80061ca:	2000      	movs	r0, #0
 80061cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	d0f9      	beq.n	80061ca <__sflush_r+0x1a>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061dc:	682f      	ldr	r7, [r5, #0]
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	d032      	beq.n	8006248 <__sflush_r+0x98>
 80061e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	075a      	lsls	r2, r3, #29
 80061e8:	d505      	bpl.n	80061f6 <__sflush_r+0x46>
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	1ac0      	subs	r0, r0, r3
 80061ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061f0:	b10b      	cbz	r3, 80061f6 <__sflush_r+0x46>
 80061f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061f4:	1ac0      	subs	r0, r0, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	4602      	mov	r2, r0
 80061fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061fc:	6a21      	ldr	r1, [r4, #32]
 80061fe:	4628      	mov	r0, r5
 8006200:	47b0      	blx	r6
 8006202:	1c43      	adds	r3, r0, #1
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	d106      	bne.n	8006216 <__sflush_r+0x66>
 8006208:	6829      	ldr	r1, [r5, #0]
 800620a:	291d      	cmp	r1, #29
 800620c:	d82c      	bhi.n	8006268 <__sflush_r+0xb8>
 800620e:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <__sflush_r+0x108>)
 8006210:	40ca      	lsrs	r2, r1
 8006212:	07d6      	lsls	r6, r2, #31
 8006214:	d528      	bpl.n	8006268 <__sflush_r+0xb8>
 8006216:	2200      	movs	r2, #0
 8006218:	6062      	str	r2, [r4, #4]
 800621a:	04d9      	lsls	r1, r3, #19
 800621c:	6922      	ldr	r2, [r4, #16]
 800621e:	6022      	str	r2, [r4, #0]
 8006220:	d504      	bpl.n	800622c <__sflush_r+0x7c>
 8006222:	1c42      	adds	r2, r0, #1
 8006224:	d101      	bne.n	800622a <__sflush_r+0x7a>
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	b903      	cbnz	r3, 800622c <__sflush_r+0x7c>
 800622a:	6560      	str	r0, [r4, #84]	; 0x54
 800622c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622e:	602f      	str	r7, [r5, #0]
 8006230:	2900      	cmp	r1, #0
 8006232:	d0ca      	beq.n	80061ca <__sflush_r+0x1a>
 8006234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006238:	4299      	cmp	r1, r3
 800623a:	d002      	beq.n	8006242 <__sflush_r+0x92>
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff fae9 	bl	8005814 <_free_r>
 8006242:	2000      	movs	r0, #0
 8006244:	6360      	str	r0, [r4, #52]	; 0x34
 8006246:	e7c1      	b.n	80061cc <__sflush_r+0x1c>
 8006248:	6a21      	ldr	r1, [r4, #32]
 800624a:	2301      	movs	r3, #1
 800624c:	4628      	mov	r0, r5
 800624e:	47b0      	blx	r6
 8006250:	1c41      	adds	r1, r0, #1
 8006252:	d1c7      	bne.n	80061e4 <__sflush_r+0x34>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0c4      	beq.n	80061e4 <__sflush_r+0x34>
 800625a:	2b1d      	cmp	r3, #29
 800625c:	d001      	beq.n	8006262 <__sflush_r+0xb2>
 800625e:	2b16      	cmp	r3, #22
 8006260:	d101      	bne.n	8006266 <__sflush_r+0xb6>
 8006262:	602f      	str	r7, [r5, #0]
 8006264:	e7b1      	b.n	80061ca <__sflush_r+0x1a>
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	e7ad      	b.n	80061cc <__sflush_r+0x1c>
 8006270:	690f      	ldr	r7, [r1, #16]
 8006272:	2f00      	cmp	r7, #0
 8006274:	d0a9      	beq.n	80061ca <__sflush_r+0x1a>
 8006276:	0793      	lsls	r3, r2, #30
 8006278:	680e      	ldr	r6, [r1, #0]
 800627a:	bf08      	it	eq
 800627c:	694b      	ldreq	r3, [r1, #20]
 800627e:	600f      	str	r7, [r1, #0]
 8006280:	bf18      	it	ne
 8006282:	2300      	movne	r3, #0
 8006284:	eba6 0807 	sub.w	r8, r6, r7
 8006288:	608b      	str	r3, [r1, #8]
 800628a:	f1b8 0f00 	cmp.w	r8, #0
 800628e:	dd9c      	ble.n	80061ca <__sflush_r+0x1a>
 8006290:	6a21      	ldr	r1, [r4, #32]
 8006292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006294:	4643      	mov	r3, r8
 8006296:	463a      	mov	r2, r7
 8006298:	4628      	mov	r0, r5
 800629a:	47b0      	blx	r6
 800629c:	2800      	cmp	r0, #0
 800629e:	dc06      	bgt.n	80062ae <__sflush_r+0xfe>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a6:	81a3      	strh	r3, [r4, #12]
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	e78e      	b.n	80061cc <__sflush_r+0x1c>
 80062ae:	4407      	add	r7, r0
 80062b0:	eba8 0800 	sub.w	r8, r8, r0
 80062b4:	e7e9      	b.n	800628a <__sflush_r+0xda>
 80062b6:	bf00      	nop
 80062b8:	20400001 	.word	0x20400001

080062bc <_fflush_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	690b      	ldr	r3, [r1, #16]
 80062c0:	4605      	mov	r5, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b913      	cbnz	r3, 80062cc <_fflush_r+0x10>
 80062c6:	2500      	movs	r5, #0
 80062c8:	4628      	mov	r0, r5
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	b118      	cbz	r0, 80062d6 <_fflush_r+0x1a>
 80062ce:	6983      	ldr	r3, [r0, #24]
 80062d0:	b90b      	cbnz	r3, 80062d6 <_fflush_r+0x1a>
 80062d2:	f000 f887 	bl	80063e4 <__sinit>
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <_fflush_r+0x6c>)
 80062d8:	429c      	cmp	r4, r3
 80062da:	d11b      	bne.n	8006314 <_fflush_r+0x58>
 80062dc:	686c      	ldr	r4, [r5, #4]
 80062de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ef      	beq.n	80062c6 <_fflush_r+0xa>
 80062e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062e8:	07d0      	lsls	r0, r2, #31
 80062ea:	d404      	bmi.n	80062f6 <_fflush_r+0x3a>
 80062ec:	0599      	lsls	r1, r3, #22
 80062ee:	d402      	bmi.n	80062f6 <_fflush_r+0x3a>
 80062f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f2:	f000 f915 	bl	8006520 <__retarget_lock_acquire_recursive>
 80062f6:	4628      	mov	r0, r5
 80062f8:	4621      	mov	r1, r4
 80062fa:	f7ff ff59 	bl	80061b0 <__sflush_r>
 80062fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006300:	07da      	lsls	r2, r3, #31
 8006302:	4605      	mov	r5, r0
 8006304:	d4e0      	bmi.n	80062c8 <_fflush_r+0xc>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	059b      	lsls	r3, r3, #22
 800630a:	d4dd      	bmi.n	80062c8 <_fflush_r+0xc>
 800630c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800630e:	f000 f908 	bl	8006522 <__retarget_lock_release_recursive>
 8006312:	e7d9      	b.n	80062c8 <_fflush_r+0xc>
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <_fflush_r+0x70>)
 8006316:	429c      	cmp	r4, r3
 8006318:	d101      	bne.n	800631e <_fflush_r+0x62>
 800631a:	68ac      	ldr	r4, [r5, #8]
 800631c:	e7df      	b.n	80062de <_fflush_r+0x22>
 800631e:	4b04      	ldr	r3, [pc, #16]	; (8006330 <_fflush_r+0x74>)
 8006320:	429c      	cmp	r4, r3
 8006322:	bf08      	it	eq
 8006324:	68ec      	ldreq	r4, [r5, #12]
 8006326:	e7da      	b.n	80062de <_fflush_r+0x22>
 8006328:	08006af8 	.word	0x08006af8
 800632c:	08006b18 	.word	0x08006b18
 8006330:	08006ad8 	.word	0x08006ad8

08006334 <std>:
 8006334:	2300      	movs	r3, #0
 8006336:	b510      	push	{r4, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	e9c0 3300 	strd	r3, r3, [r0]
 800633e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006342:	6083      	str	r3, [r0, #8]
 8006344:	8181      	strh	r1, [r0, #12]
 8006346:	6643      	str	r3, [r0, #100]	; 0x64
 8006348:	81c2      	strh	r2, [r0, #14]
 800634a:	6183      	str	r3, [r0, #24]
 800634c:	4619      	mov	r1, r3
 800634e:	2208      	movs	r2, #8
 8006350:	305c      	adds	r0, #92	; 0x5c
 8006352:	f7ff fa57 	bl	8005804 <memset>
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <std+0x38>)
 8006358:	6263      	str	r3, [r4, #36]	; 0x24
 800635a:	4b05      	ldr	r3, [pc, #20]	; (8006370 <std+0x3c>)
 800635c:	62a3      	str	r3, [r4, #40]	; 0x28
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <std+0x40>)
 8006360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <std+0x44>)
 8006364:	6224      	str	r4, [r4, #32]
 8006366:	6323      	str	r3, [r4, #48]	; 0x30
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	08006691 	.word	0x08006691
 8006370:	080066b3 	.word	0x080066b3
 8006374:	080066eb 	.word	0x080066eb
 8006378:	0800670f 	.word	0x0800670f

0800637c <_cleanup_r>:
 800637c:	4901      	ldr	r1, [pc, #4]	; (8006384 <_cleanup_r+0x8>)
 800637e:	f000 b8af 	b.w	80064e0 <_fwalk_reent>
 8006382:	bf00      	nop
 8006384:	080062bd 	.word	0x080062bd

08006388 <__sfmoreglue>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	2268      	movs	r2, #104	; 0x68
 800638c:	1e4d      	subs	r5, r1, #1
 800638e:	4355      	muls	r5, r2
 8006390:	460e      	mov	r6, r1
 8006392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006396:	f7ff faa9 	bl	80058ec <_malloc_r>
 800639a:	4604      	mov	r4, r0
 800639c:	b140      	cbz	r0, 80063b0 <__sfmoreglue+0x28>
 800639e:	2100      	movs	r1, #0
 80063a0:	e9c0 1600 	strd	r1, r6, [r0]
 80063a4:	300c      	adds	r0, #12
 80063a6:	60a0      	str	r0, [r4, #8]
 80063a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063ac:	f7ff fa2a 	bl	8005804 <memset>
 80063b0:	4620      	mov	r0, r4
 80063b2:	bd70      	pop	{r4, r5, r6, pc}

080063b4 <__sfp_lock_acquire>:
 80063b4:	4801      	ldr	r0, [pc, #4]	; (80063bc <__sfp_lock_acquire+0x8>)
 80063b6:	f000 b8b3 	b.w	8006520 <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	24000371 	.word	0x24000371

080063c0 <__sfp_lock_release>:
 80063c0:	4801      	ldr	r0, [pc, #4]	; (80063c8 <__sfp_lock_release+0x8>)
 80063c2:	f000 b8ae 	b.w	8006522 <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	24000371 	.word	0x24000371

080063cc <__sinit_lock_acquire>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__sinit_lock_acquire+0x8>)
 80063ce:	f000 b8a7 	b.w	8006520 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	24000372 	.word	0x24000372

080063d8 <__sinit_lock_release>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__sinit_lock_release+0x8>)
 80063da:	f000 b8a2 	b.w	8006522 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	24000372 	.word	0x24000372

080063e4 <__sinit>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	4604      	mov	r4, r0
 80063e8:	f7ff fff0 	bl	80063cc <__sinit_lock_acquire>
 80063ec:	69a3      	ldr	r3, [r4, #24]
 80063ee:	b11b      	cbz	r3, 80063f8 <__sinit+0x14>
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f7ff bff0 	b.w	80063d8 <__sinit_lock_release>
 80063f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063fc:	6523      	str	r3, [r4, #80]	; 0x50
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <__sinit+0x68>)
 8006400:	4a13      	ldr	r2, [pc, #76]	; (8006450 <__sinit+0x6c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	62a2      	str	r2, [r4, #40]	; 0x28
 8006406:	42a3      	cmp	r3, r4
 8006408:	bf04      	itt	eq
 800640a:	2301      	moveq	r3, #1
 800640c:	61a3      	streq	r3, [r4, #24]
 800640e:	4620      	mov	r0, r4
 8006410:	f000 f820 	bl	8006454 <__sfp>
 8006414:	6060      	str	r0, [r4, #4]
 8006416:	4620      	mov	r0, r4
 8006418:	f000 f81c 	bl	8006454 <__sfp>
 800641c:	60a0      	str	r0, [r4, #8]
 800641e:	4620      	mov	r0, r4
 8006420:	f000 f818 	bl	8006454 <__sfp>
 8006424:	2200      	movs	r2, #0
 8006426:	60e0      	str	r0, [r4, #12]
 8006428:	2104      	movs	r1, #4
 800642a:	6860      	ldr	r0, [r4, #4]
 800642c:	f7ff ff82 	bl	8006334 <std>
 8006430:	68a0      	ldr	r0, [r4, #8]
 8006432:	2201      	movs	r2, #1
 8006434:	2109      	movs	r1, #9
 8006436:	f7ff ff7d 	bl	8006334 <std>
 800643a:	68e0      	ldr	r0, [r4, #12]
 800643c:	2202      	movs	r2, #2
 800643e:	2112      	movs	r1, #18
 8006440:	f7ff ff78 	bl	8006334 <std>
 8006444:	2301      	movs	r3, #1
 8006446:	61a3      	str	r3, [r4, #24]
 8006448:	e7d2      	b.n	80063f0 <__sinit+0xc>
 800644a:	bf00      	nop
 800644c:	08006aa0 	.word	0x08006aa0
 8006450:	0800637d 	.word	0x0800637d

08006454 <__sfp>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	4607      	mov	r7, r0
 8006458:	f7ff ffac 	bl	80063b4 <__sfp_lock_acquire>
 800645c:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <__sfp+0x84>)
 800645e:	681e      	ldr	r6, [r3, #0]
 8006460:	69b3      	ldr	r3, [r6, #24]
 8006462:	b913      	cbnz	r3, 800646a <__sfp+0x16>
 8006464:	4630      	mov	r0, r6
 8006466:	f7ff ffbd 	bl	80063e4 <__sinit>
 800646a:	3648      	adds	r6, #72	; 0x48
 800646c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006470:	3b01      	subs	r3, #1
 8006472:	d503      	bpl.n	800647c <__sfp+0x28>
 8006474:	6833      	ldr	r3, [r6, #0]
 8006476:	b30b      	cbz	r3, 80064bc <__sfp+0x68>
 8006478:	6836      	ldr	r6, [r6, #0]
 800647a:	e7f7      	b.n	800646c <__sfp+0x18>
 800647c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006480:	b9d5      	cbnz	r5, 80064b8 <__sfp+0x64>
 8006482:	4b16      	ldr	r3, [pc, #88]	; (80064dc <__sfp+0x88>)
 8006484:	60e3      	str	r3, [r4, #12]
 8006486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800648a:	6665      	str	r5, [r4, #100]	; 0x64
 800648c:	f000 f847 	bl	800651e <__retarget_lock_init_recursive>
 8006490:	f7ff ff96 	bl	80063c0 <__sfp_lock_release>
 8006494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800649c:	6025      	str	r5, [r4, #0]
 800649e:	61a5      	str	r5, [r4, #24]
 80064a0:	2208      	movs	r2, #8
 80064a2:	4629      	mov	r1, r5
 80064a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064a8:	f7ff f9ac 	bl	8005804 <memset>
 80064ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064b4:	4620      	mov	r0, r4
 80064b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b8:	3468      	adds	r4, #104	; 0x68
 80064ba:	e7d9      	b.n	8006470 <__sfp+0x1c>
 80064bc:	2104      	movs	r1, #4
 80064be:	4638      	mov	r0, r7
 80064c0:	f7ff ff62 	bl	8006388 <__sfmoreglue>
 80064c4:	4604      	mov	r4, r0
 80064c6:	6030      	str	r0, [r6, #0]
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d1d5      	bne.n	8006478 <__sfp+0x24>
 80064cc:	f7ff ff78 	bl	80063c0 <__sfp_lock_release>
 80064d0:	230c      	movs	r3, #12
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	e7ee      	b.n	80064b4 <__sfp+0x60>
 80064d6:	bf00      	nop
 80064d8:	08006aa0 	.word	0x08006aa0
 80064dc:	ffff0001 	.word	0xffff0001

080064e0 <_fwalk_reent>:
 80064e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	4606      	mov	r6, r0
 80064e6:	4688      	mov	r8, r1
 80064e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064ec:	2700      	movs	r7, #0
 80064ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064f2:	f1b9 0901 	subs.w	r9, r9, #1
 80064f6:	d505      	bpl.n	8006504 <_fwalk_reent+0x24>
 80064f8:	6824      	ldr	r4, [r4, #0]
 80064fa:	2c00      	cmp	r4, #0
 80064fc:	d1f7      	bne.n	80064ee <_fwalk_reent+0xe>
 80064fe:	4638      	mov	r0, r7
 8006500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006504:	89ab      	ldrh	r3, [r5, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d907      	bls.n	800651a <_fwalk_reent+0x3a>
 800650a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800650e:	3301      	adds	r3, #1
 8006510:	d003      	beq.n	800651a <_fwalk_reent+0x3a>
 8006512:	4629      	mov	r1, r5
 8006514:	4630      	mov	r0, r6
 8006516:	47c0      	blx	r8
 8006518:	4307      	orrs	r7, r0
 800651a:	3568      	adds	r5, #104	; 0x68
 800651c:	e7e9      	b.n	80064f2 <_fwalk_reent+0x12>

0800651e <__retarget_lock_init_recursive>:
 800651e:	4770      	bx	lr

08006520 <__retarget_lock_acquire_recursive>:
 8006520:	4770      	bx	lr

08006522 <__retarget_lock_release_recursive>:
 8006522:	4770      	bx	lr

08006524 <__swhatbuf_r>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	460e      	mov	r6, r1
 8006528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652c:	2900      	cmp	r1, #0
 800652e:	b096      	sub	sp, #88	; 0x58
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	da08      	bge.n	8006548 <__swhatbuf_r+0x24>
 8006536:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	602a      	str	r2, [r5, #0]
 800653e:	061a      	lsls	r2, r3, #24
 8006540:	d410      	bmi.n	8006564 <__swhatbuf_r+0x40>
 8006542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006546:	e00e      	b.n	8006566 <__swhatbuf_r+0x42>
 8006548:	466a      	mov	r2, sp
 800654a:	f000 f907 	bl	800675c <_fstat_r>
 800654e:	2800      	cmp	r0, #0
 8006550:	dbf1      	blt.n	8006536 <__swhatbuf_r+0x12>
 8006552:	9a01      	ldr	r2, [sp, #4]
 8006554:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006558:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800655c:	425a      	negs	r2, r3
 800655e:	415a      	adcs	r2, r3
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	e7ee      	b.n	8006542 <__swhatbuf_r+0x1e>
 8006564:	2340      	movs	r3, #64	; 0x40
 8006566:	2000      	movs	r0, #0
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	b016      	add	sp, #88	; 0x58
 800656c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006570 <__smakebuf_r>:
 8006570:	898b      	ldrh	r3, [r1, #12]
 8006572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006574:	079d      	lsls	r5, r3, #30
 8006576:	4606      	mov	r6, r0
 8006578:	460c      	mov	r4, r1
 800657a:	d507      	bpl.n	800658c <__smakebuf_r+0x1c>
 800657c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	6123      	str	r3, [r4, #16]
 8006584:	2301      	movs	r3, #1
 8006586:	6163      	str	r3, [r4, #20]
 8006588:	b002      	add	sp, #8
 800658a:	bd70      	pop	{r4, r5, r6, pc}
 800658c:	ab01      	add	r3, sp, #4
 800658e:	466a      	mov	r2, sp
 8006590:	f7ff ffc8 	bl	8006524 <__swhatbuf_r>
 8006594:	9900      	ldr	r1, [sp, #0]
 8006596:	4605      	mov	r5, r0
 8006598:	4630      	mov	r0, r6
 800659a:	f7ff f9a7 	bl	80058ec <_malloc_r>
 800659e:	b948      	cbnz	r0, 80065b4 <__smakebuf_r+0x44>
 80065a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a4:	059a      	lsls	r2, r3, #22
 80065a6:	d4ef      	bmi.n	8006588 <__smakebuf_r+0x18>
 80065a8:	f023 0303 	bic.w	r3, r3, #3
 80065ac:	f043 0302 	orr.w	r3, r3, #2
 80065b0:	81a3      	strh	r3, [r4, #12]
 80065b2:	e7e3      	b.n	800657c <__smakebuf_r+0xc>
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <__smakebuf_r+0x7c>)
 80065b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	6020      	str	r0, [r4, #0]
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	6163      	str	r3, [r4, #20]
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	6120      	str	r0, [r4, #16]
 80065ca:	b15b      	cbz	r3, 80065e4 <__smakebuf_r+0x74>
 80065cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065d0:	4630      	mov	r0, r6
 80065d2:	f000 f8d5 	bl	8006780 <_isatty_r>
 80065d6:	b128      	cbz	r0, 80065e4 <__smakebuf_r+0x74>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f023 0303 	bic.w	r3, r3, #3
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	81a3      	strh	r3, [r4, #12]
 80065e4:	89a0      	ldrh	r0, [r4, #12]
 80065e6:	4305      	orrs	r5, r0
 80065e8:	81a5      	strh	r5, [r4, #12]
 80065ea:	e7cd      	b.n	8006588 <__smakebuf_r+0x18>
 80065ec:	0800637d 	.word	0x0800637d

080065f0 <__malloc_lock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	; (80065f8 <__malloc_lock+0x8>)
 80065f2:	f7ff bf95 	b.w	8006520 <__retarget_lock_acquire_recursive>
 80065f6:	bf00      	nop
 80065f8:	24000370 	.word	0x24000370

080065fc <__malloc_unlock>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__malloc_unlock+0x8>)
 80065fe:	f7ff bf90 	b.w	8006522 <__retarget_lock_release_recursive>
 8006602:	bf00      	nop
 8006604:	24000370 	.word	0x24000370

08006608 <_raise_r>:
 8006608:	291f      	cmp	r1, #31
 800660a:	b538      	push	{r3, r4, r5, lr}
 800660c:	4604      	mov	r4, r0
 800660e:	460d      	mov	r5, r1
 8006610:	d904      	bls.n	800661c <_raise_r+0x14>
 8006612:	2316      	movs	r3, #22
 8006614:	6003      	str	r3, [r0, #0]
 8006616:	f04f 30ff 	mov.w	r0, #4294967295
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800661e:	b112      	cbz	r2, 8006626 <_raise_r+0x1e>
 8006620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006624:	b94b      	cbnz	r3, 800663a <_raise_r+0x32>
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f830 	bl	800668c <_getpid_r>
 800662c:	462a      	mov	r2, r5
 800662e:	4601      	mov	r1, r0
 8006630:	4620      	mov	r0, r4
 8006632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006636:	f000 b817 	b.w	8006668 <_kill_r>
 800663a:	2b01      	cmp	r3, #1
 800663c:	d00a      	beq.n	8006654 <_raise_r+0x4c>
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	d103      	bne.n	800664a <_raise_r+0x42>
 8006642:	2316      	movs	r3, #22
 8006644:	6003      	str	r3, [r0, #0]
 8006646:	2001      	movs	r0, #1
 8006648:	e7e7      	b.n	800661a <_raise_r+0x12>
 800664a:	2400      	movs	r4, #0
 800664c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006650:	4628      	mov	r0, r5
 8006652:	4798      	blx	r3
 8006654:	2000      	movs	r0, #0
 8006656:	e7e0      	b.n	800661a <_raise_r+0x12>

08006658 <raise>:
 8006658:	4b02      	ldr	r3, [pc, #8]	; (8006664 <raise+0xc>)
 800665a:	4601      	mov	r1, r0
 800665c:	6818      	ldr	r0, [r3, #0]
 800665e:	f7ff bfd3 	b.w	8006608 <_raise_r>
 8006662:	bf00      	nop
 8006664:	24000180 	.word	0x24000180

08006668 <_kill_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d07      	ldr	r5, [pc, #28]	; (8006688 <_kill_r+0x20>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	602b      	str	r3, [r5, #0]
 8006676:	f7fa fa3d 	bl	8000af4 <_kill>
 800667a:	1c43      	adds	r3, r0, #1
 800667c:	d102      	bne.n	8006684 <_kill_r+0x1c>
 800667e:	682b      	ldr	r3, [r5, #0]
 8006680:	b103      	cbz	r3, 8006684 <_kill_r+0x1c>
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	bd38      	pop	{r3, r4, r5, pc}
 8006686:	bf00      	nop
 8006688:	2400036c 	.word	0x2400036c

0800668c <_getpid_r>:
 800668c:	f7fa ba2a 	b.w	8000ae4 <_getpid>

08006690 <__sread>:
 8006690:	b510      	push	{r4, lr}
 8006692:	460c      	mov	r4, r1
 8006694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006698:	f000 f894 	bl	80067c4 <_read_r>
 800669c:	2800      	cmp	r0, #0
 800669e:	bfab      	itete	ge
 80066a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066a2:	89a3      	ldrhlt	r3, [r4, #12]
 80066a4:	181b      	addge	r3, r3, r0
 80066a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066aa:	bfac      	ite	ge
 80066ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80066ae:	81a3      	strhlt	r3, [r4, #12]
 80066b0:	bd10      	pop	{r4, pc}

080066b2 <__swrite>:
 80066b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	461f      	mov	r7, r3
 80066b8:	898b      	ldrh	r3, [r1, #12]
 80066ba:	05db      	lsls	r3, r3, #23
 80066bc:	4605      	mov	r5, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	4616      	mov	r6, r2
 80066c2:	d505      	bpl.n	80066d0 <__swrite+0x1e>
 80066c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c8:	2302      	movs	r3, #2
 80066ca:	2200      	movs	r2, #0
 80066cc:	f000 f868 	bl	80067a0 <_lseek_r>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	4632      	mov	r2, r6
 80066de:	463b      	mov	r3, r7
 80066e0:	4628      	mov	r0, r5
 80066e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	f000 b817 	b.w	8006718 <_write_r>

080066ea <__sseek>:
 80066ea:	b510      	push	{r4, lr}
 80066ec:	460c      	mov	r4, r1
 80066ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f2:	f000 f855 	bl	80067a0 <_lseek_r>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	89a3      	ldrh	r3, [r4, #12]
 80066fa:	bf15      	itete	ne
 80066fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80066fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006706:	81a3      	strheq	r3, [r4, #12]
 8006708:	bf18      	it	ne
 800670a:	81a3      	strhne	r3, [r4, #12]
 800670c:	bd10      	pop	{r4, pc}

0800670e <__sclose>:
 800670e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006712:	f000 b813 	b.w	800673c <_close_r>
	...

08006718 <_write_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	4d07      	ldr	r5, [pc, #28]	; (8006738 <_write_r+0x20>)
 800671c:	4604      	mov	r4, r0
 800671e:	4608      	mov	r0, r1
 8006720:	4611      	mov	r1, r2
 8006722:	2200      	movs	r2, #0
 8006724:	602a      	str	r2, [r5, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	f7fa fa1d 	bl	8000b66 <_write>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_write_r+0x1e>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_write_r+0x1e>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	2400036c 	.word	0x2400036c

0800673c <_close_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d06      	ldr	r5, [pc, #24]	; (8006758 <_close_r+0x1c>)
 8006740:	2300      	movs	r3, #0
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	f7fa fa29 	bl	8000b9e <_close>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d102      	bne.n	8006756 <_close_r+0x1a>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b103      	cbz	r3, 8006756 <_close_r+0x1a>
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	2400036c 	.word	0x2400036c

0800675c <_fstat_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4d07      	ldr	r5, [pc, #28]	; (800677c <_fstat_r+0x20>)
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	4611      	mov	r1, r2
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	f7fa fa24 	bl	8000bb6 <_fstat>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	d102      	bne.n	8006778 <_fstat_r+0x1c>
 8006772:	682b      	ldr	r3, [r5, #0]
 8006774:	b103      	cbz	r3, 8006778 <_fstat_r+0x1c>
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	bf00      	nop
 800677c:	2400036c 	.word	0x2400036c

08006780 <_isatty_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4d06      	ldr	r5, [pc, #24]	; (800679c <_isatty_r+0x1c>)
 8006784:	2300      	movs	r3, #0
 8006786:	4604      	mov	r4, r0
 8006788:	4608      	mov	r0, r1
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	f7fa fa23 	bl	8000bd6 <_isatty>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_isatty_r+0x1a>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_isatty_r+0x1a>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	2400036c 	.word	0x2400036c

080067a0 <_lseek_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d07      	ldr	r5, [pc, #28]	; (80067c0 <_lseek_r+0x20>)
 80067a4:	4604      	mov	r4, r0
 80067a6:	4608      	mov	r0, r1
 80067a8:	4611      	mov	r1, r2
 80067aa:	2200      	movs	r2, #0
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f7fa fa1c 	bl	8000bec <_lseek>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_lseek_r+0x1e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_lseek_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	2400036c 	.word	0x2400036c

080067c4 <_read_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	; (80067e4 <_read_r+0x20>)
 80067c8:	4604      	mov	r4, r0
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fa f9aa 	bl	8000b2c <_read>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_read_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_read_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	2400036c 	.word	0x2400036c

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
